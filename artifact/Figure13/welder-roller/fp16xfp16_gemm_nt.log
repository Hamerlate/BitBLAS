{<Node, roller_matmul>: {'block': [128, 128], 'warp': [64, 64], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
3.5345189571380615
{<Node, roller_matmul>: {'block': [64, 128], 'warp': [32, 64], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
6.936429500579834
{<Node, roller_matmul>: {'block': [128, 64], 'warp': [64, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
5.154331207275391
{<Node, roller_matmul>: {'block': [128, 256], 'warp': [64, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
3.0399487018585205
{<Node, roller_matmul>: {'block': [256, 128], 'warp': [128, 64], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
3.0761301517486572
{<Node, roller_matmul>: {'block': [64, 256], 'warp': [32, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
4.368710041046143
{<Node, roller_matmul>: {'block': [256, 64], 'warp': [128, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
4.216552734375
{<Node, roller_matmul>: {'block': [64, 64], 'warp': [32, 32], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
8.142420768737793
{<Node, roller_matmul>: {'block': [256, 256], 'warp': [128, 128], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
6.1871442794799805
{<Node, roller_matmul>: {'block': [32, 256], 'warp': [16, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
8.058406829833984
{<Node, roller_matmul>: {'block': [256, 32], 'warp': [128, 16], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
7.4084038734436035
{<Node, roller_matmul>: {'block': [64, 512], 'warp': [32, 256], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 520>}}}
3.8304853439331055
{<Node, roller_matmul>: {'block': [512, 64], 'warp': [256, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
3.8388941287994385
{<Node, roller_matmul>: {'block': [32, 128], 'warp': [16, 64], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
13.74015998840332
{<Node, roller_matmul>: {'block': [128, 32], 'warp': [64, 16], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
7.719699382781982
{<Node, roller_matmul>: {'block': [32, 64], 'warp': [16, 32], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
12.409215927124023
{<Node, roller_matmul>: {'block': [64, 32], 'warp': [32, 16], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
9.255563735961914
{<Node, roller_matmul>: {'block': [32, 32], 'warp': [16, 16], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
13.826432228088379
{<Node, roller_matmul>: {'block': [16, 256], 'warp': [8, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
17.501012802124023
{<Node, roller_matmul>: {'block': [256, 16], 'warp': [128, 8], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 24>}}}
15.282468795776367
best code __global__ void __launch_bounds__(128) Fused(half* __restrict__ A, half* __restrict__ B, half* __restrict__ C) {
  
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 8, 32, 16, half> C_wmma_accumulator[32];
  __shared__ half A_shared[5120];
  __shared__ half B_shared[10240];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 8, 32, 16, half, nvcuda::wmma::row_major> A_shared_wmma_matrix_a[8];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 8, 32, 16, half, nvcuda::wmma::col_major> B_shared_wmma_matrix_b[4];
  for (int i_c_outer_init = 0; i_c_outer_init < 8; ++i_c_outer_init) {
    for (int j_c_outer_init = 0; j_c_outer_init < 4; ++j_c_outer_init) {
      nvcuda::wmma::fill_fragment(C_wmma_accumulator[((i_c_outer_init * 4) + j_c_outer_init)], __float2half_rn(0.000000e+00f));
    }
  }
  for (int k_outer = 0; k_outer < 256; ++k_outer) {
    __syncthreads();
    *(uint4*)(A_shared + (((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8))) = *(uint4*)(A + ((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 1280)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 262144));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 2560)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 524288));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 3840)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 5) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 786432));
    *(uint4*)(B_shared + (((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8))) = *(uint4*)(B + ((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 1280)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 262144));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 2560)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 524288));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 3840)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 786432));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 5120)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1048576));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 6400)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1310720));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 7680)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1572864));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 8960)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 31) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1835008));
    __syncthreads();
    for (int k_inner_outer = 0; k_inner_outer < 2; ++k_inner_outer) {
      for (int ax0_outer = 0; ax0_outer < 8; ++ax0_outer) {
        nvcuda::wmma::load_matrix_sync(A_shared_wmma_matrix_a[ax0_outer], (&(A_shared[((((((int)threadIdx.y) >> 1) * 2560) + (ax0_outer * 320)) + (k_inner_outer * 16))])), 40);
      }
      for (int ax0_outer_1 = 0; ax0_outer_1 < 4; ++ax0_outer_1) {
        nvcuda::wmma::load_matrix_sync(B_shared_wmma_matrix_b[ax0_outer_1], (&(B_shared[((((((int)threadIdx.y) & 1) * 5120) + (ax0_outer_1 * 1280)) + (k_inner_outer * 16))])), 40);
      }
      for (int i_c_outer = 0; i_c_outer < 8; ++i_c_outer) {
        for (int j_c_outer = 0; j_c_outer < 4; ++j_c_outer) {
          nvcuda::wmma::mma_sync(C_wmma_accumulator[((i_c_outer * 4) + j_c_outer)], A_shared_wmma_matrix_a[i_c_outer], B_shared_wmma_matrix_b[j_c_outer], C_wmma_accumulator[((i_c_outer * 4) + j_c_outer)]);
        }
      }
    }
  }
  __syncthreads();
  for (int i_inner_inner_outer = 0; i_inner_inner_outer < 8; ++i_inner_inner_outer) {
    for (int j_inner_inner_outer = 0; j_inner_inner_outer < 4; ++j_inner_inner_outer) {
      nvcuda::wmma::store_matrix_sync((&(C[(((((((((int)blockIdx.x) >> 5) * 1048576) + ((((int)threadIdx.y) >> 1) * 524288)) + (i_inner_inner_outer * 65536)) + ((((int)blockIdx.x) & 31) * 256)) + ((((int)threadIdx.y) & 1) * 128)) + (j_inner_inner_outer * 32))])), C_wmma_accumulator[((i_inner_inner_outer * 4) + j_inner_inner_outer)], 8192, nvcuda::wmma::mem_row_major);
    }
  }
  __syncthreads();
}


top1: 3.5345189571380615 	top10: 3.0399487018585205
--------------------------------------------------------------------------------
best config: {<Node, roller_matmul>: {'block': [128, 256], 'warp': [64, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
best latency: 3.0399487018585205
{<Node, roller_matmul>: {'block': [128, 128], 'warp': [64, 64], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
16.1843204498291
{<Node, roller_matmul>: {'block': [128, 112], 'warp': [64, 56], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 120>}}}
23.342693328857422
{<Node, roller_matmul>: {'block': [64, 224], 'warp': [16, 224], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 232>}}}
28.576255798339844
{<Node, roller_matmul>: {'block': [128, 64], 'warp': [64, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
18.356224060058594
{<Node, roller_matmul>: {'block': [64, 128], 'warp': [32, 64], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
30.26892852783203
{<Node, roller_matmul>: {'block': [256, 128], 'warp': [128, 64], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
10.972569465637207
{<Node, roller_matmul>: {'block': [128, 256], 'warp': [64, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
14.197175025939941
{<Node, roller_matmul>: {'block': [128, 224], 'warp': [32, 224], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 232>}}}
15.511113166809082
{<Node, roller_matmul>: {'block': [128, 56], 'warp': [32, 56], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 64>}}}
32.71236038208008
{<Node, roller_matmul>: {'block': [256, 112], 'warp': [128, 56], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 120>}}}
19.15118980407715
{<Node, roller_matmul>: {'block': [256, 64], 'warp': [128, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
14.535296440124512
{<Node, roller_matmul>: {'block': [64, 256], 'warp': [32, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
28.91289520263672
{<Node, roller_matmul>: {'block': [256, 56], 'warp': [64, 56], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 64>}}}
20.30612564086914
{<Node, roller_matmul>: {'block': [64, 64], 'warp': [32, 32], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
31.288320541381836
{<Node, roller_matmul>: {'block': [256, 256], 'warp': [128, 128], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
22.22243881225586
{<Node, roller_matmul>: {'block': [64, 56], 'warp': [64, 8], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 64>}}}
58.84262466430664
{<Node, roller_matmul>: {'block': [256, 224], 'warp': [128, 112], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 232>}}}
14.755108833312988
{<Node, roller_matmul>: {'block': [32, 224], 'warp': [8, 224], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 232>}}}
56.648704528808594
{<Node, roller_matmul>: {'block': [64, 448], 'warp': [32, 224], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 456>}}}
24.511743545532227
{<Node, roller_matmul>: {'block': [256, 32], 'warp': [128, 16], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
23.930469512939453
best code __global__ void __launch_bounds__(128) Fused(half* __restrict__ A, half* __restrict__ B, half* __restrict__ C) {
  
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 32, 8, 16, half> C_wmma_accumulator[32];
  __shared__ half A_shared[10240];
  __shared__ half B_shared[5120];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 32, 8, 16, half, nvcuda::wmma::row_major> A_shared_wmma_matrix_a[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 32, 8, 16, half, nvcuda::wmma::col_major> B_shared_wmma_matrix_b[8];
  for (int i_c_outer_init = 0; i_c_outer_init < 4; ++i_c_outer_init) {
    for (int j_c_outer_init = 0; j_c_outer_init < 8; ++j_c_outer_init) {
      nvcuda::wmma::fill_fragment(C_wmma_accumulator[((i_c_outer_init * 8) + j_c_outer_init)], __float2half_rn(0.000000e+00f));
    }
  }
  for (int k_outer = 0; k_outer < 256; ++k_outer) {
    __syncthreads();
    *(uint4*)(A_shared + (((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8))) = *(uint4*)(A + ((((((((int)blockIdx.x) / 224) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 1280)) = *(uint4*)(A + (((((((((int)blockIdx.x) / 224) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 262144));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 2560)) = *(uint4*)(A + (((((((((int)blockIdx.x) / 224) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 524288));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 3840)) = *(uint4*)(A + (((((((((int)blockIdx.x) / 224) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 786432));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 5120)) = *(uint4*)(A + (((((((((int)blockIdx.x) / 224) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1048576));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 6400)) = *(uint4*)(A + (((((((((int)blockIdx.x) / 224) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1310720));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 7680)) = *(uint4*)(A + (((((((((int)blockIdx.x) / 224) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1572864));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 8960)) = *(uint4*)(A + (((((((((int)blockIdx.x) / 224) * 2097152) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1835008));
    *(uint4*)(B_shared + (((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8))) = *(uint4*)(B + ((((((((int)blockIdx.x) % 224) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 1280)) = *(uint4*)(B + (((((((((int)blockIdx.x) % 224) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 262144));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 2560)) = *(uint4*)(B + (((((((((int)blockIdx.x) % 224) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 524288));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 3840)) = *(uint4*)(B + (((((((((int)blockIdx.x) % 224) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 786432));
    __syncthreads();
    for (int k_inner_outer = 0; k_inner_outer < 2; ++k_inner_outer) {
      for (int ax0_outer = 0; ax0_outer < 4; ++ax0_outer) {
        nvcuda::wmma::load_matrix_sync(A_shared_wmma_matrix_a[ax0_outer], (&(A_shared[((((((int)threadIdx.y) >> 1) * 5120) + (ax0_outer * 1280)) + (k_inner_outer * 16))])), 40);
      }
      for (int ax0_outer_1 = 0; ax0_outer_1 < 8; ++ax0_outer_1) {
        nvcuda::wmma::load_matrix_sync(B_shared_wmma_matrix_b[ax0_outer_1], (&(B_shared[((((((int)threadIdx.y) & 1) * 2560) + (ax0_outer_1 * 320)) + (k_inner_outer * 16))])), 40);
      }
      for (int i_c_outer = 0; i_c_outer < 4; ++i_c_outer) {
        for (int j_c_outer = 0; j_c_outer < 8; ++j_c_outer) {
          nvcuda::wmma::mma_sync(C_wmma_accumulator[((i_c_outer * 8) + j_c_outer)], A_shared_wmma_matrix_a[i_c_outer], B_shared_wmma_matrix_b[j_c_outer], C_wmma_accumulator[((i_c_outer * 8) + j_c_outer)]);
        }
      }
    }
  }
  __syncthreads();
  for (int i_inner_inner_outer = 0; i_inner_inner_outer < 4; ++i_inner_inner_outer) {
    for (int j_inner_inner_outer = 0; j_inner_inner_outer < 8; ++j_inner_inner_outer) {
      nvcuda::wmma::store_matrix_sync((&(C[(((((((((int)blockIdx.x) / 224) * 7340032) + ((((int)threadIdx.y) >> 1) * 3670016)) + (i_inner_inner_outer * 917504)) + ((((int)blockIdx.x) % 224) * 128)) + ((((int)threadIdx.y) & 1) * 64)) + (j_inner_inner_outer * 8))])), C_wmma_accumulator[((i_inner_inner_outer * 8) + j_inner_inner_outer)], 28672, nvcuda::wmma::mem_row_major);
    }
  }
  __syncthreads();
}


top1: 16.1843204498291 	top10: 10.972569465637207
--------------------------------------------------------------------------------
best config: {<Node, roller_matmul>: {'block': [256, 128], 'warp': [128, 64], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
best latency: 10.972569465637207
{<Node, roller_matmul>: {'block': [128, 128], 'warp': [64, 64], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
14.723803520202637
{<Node, roller_matmul>: {'block': [64, 128], 'warp': [32, 64], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
28.904191970825195
{<Node, roller_matmul>: {'block': [128, 64], 'warp': [64, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
19.084970474243164
{<Node, roller_matmul>: {'block': [128, 256], 'warp': [64, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
13.498368263244629
{<Node, roller_matmul>: {'block': [256, 128], 'warp': [128, 64], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
12.325632095336914
{<Node, roller_matmul>: {'block': [64, 256], 'warp': [32, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
25.986303329467773
{<Node, roller_matmul>: {'block': [256, 64], 'warp': [128, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
18.45964813232422
{<Node, roller_matmul>: {'block': [64, 64], 'warp': [32, 32], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
30.445823669433594
{<Node, roller_matmul>: {'block': [256, 256], 'warp': [128, 128], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
24.437503814697266
{<Node, roller_matmul>: {'block': [32, 256], 'warp': [16, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
51.17474365234375
{<Node, roller_matmul>: {'block': [256, 32], 'warp': [128, 16], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
28.14899253845215
{<Node, roller_matmul>: {'block': [64, 512], 'warp': [32, 256], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 520>}}}
23.0283260345459
{<Node, roller_matmul>: {'block': [512, 64], 'warp': [256, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
17.957887649536133
{<Node, roller_matmul>: {'block': [32, 128], 'warp': [16, 64], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
55.38662338256836
{<Node, roller_matmul>: {'block': [128, 32], 'warp': [64, 16], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
27.761920928955078
{<Node, roller_matmul>: {'block': [32, 64], 'warp': [16, 32], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
46.01173400878906
{<Node, roller_matmul>: {'block': [64, 32], 'warp': [32, 16], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
33.232383728027344
{<Node, roller_matmul>: {'block': [32, 32], 'warp': [16, 16], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
45.40313720703125
{<Node, roller_matmul>: {'block': [16, 256], 'warp': [8, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
113.16531372070312
{<Node, roller_matmul>: {'block': [256, 16], 'warp': [128, 8], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 24>}}}
56.04710388183594
best code __global__ void __launch_bounds__(128) Fused(half* __restrict__ A, half* __restrict__ B, half* __restrict__ C) {
  
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 32, 8, 16, half> C_wmma_accumulator[32];
  __shared__ half A_shared[10240];
  __shared__ half B_shared[5120];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 32, 8, 16, half, nvcuda::wmma::row_major> A_shared_wmma_matrix_a[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 32, 8, 16, half, nvcuda::wmma::col_major> B_shared_wmma_matrix_b[8];
  for (int i_c_outer_init = 0; i_c_outer_init < 4; ++i_c_outer_init) {
    for (int j_c_outer_init = 0; j_c_outer_init < 8; ++j_c_outer_init) {
      nvcuda::wmma::fill_fragment(C_wmma_accumulator[((i_c_outer_init * 8) + j_c_outer_init)], __float2half_rn(0.000000e+00f));
    }
  }
  for (int k_outer = 0; k_outer < 896; ++k_outer) {
    __syncthreads();
    *(uint4*)(A_shared + (((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8))) = *(uint4*)(A + ((((((((int)blockIdx.x) >> 6) * 7340032) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 1280)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 6) * 7340032) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 917504));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 2560)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 6) * 7340032) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1835008));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 3840)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 6) * 7340032) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 2752512));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 5120)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 6) * 7340032) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 3670016));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 6400)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 6) * 7340032) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 4587520));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 7680)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 6) * 7340032) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 5505024));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 8960)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 6) * 7340032) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 6422528));
    *(uint4*)(B_shared + (((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8))) = *(uint4*)(B + ((((((((int)blockIdx.x) & 63) * 3670016) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 1280)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 63) * 3670016) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 917504));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 2560)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 63) * 3670016) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 1835008));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 3840)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 63) * 3670016) + (((int)threadIdx.y) * 229376)) + ((((int)threadIdx.x) >> 2) * 28672)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 2752512));
    __syncthreads();
    for (int k_inner_outer = 0; k_inner_outer < 2; ++k_inner_outer) {
      for (int ax0_outer = 0; ax0_outer < 4; ++ax0_outer) {
        nvcuda::wmma::load_matrix_sync(A_shared_wmma_matrix_a[ax0_outer], (&(A_shared[((((((int)threadIdx.y) >> 1) * 5120) + (ax0_outer * 1280)) + (k_inner_outer * 16))])), 40);
      }
      for (int ax0_outer_1 = 0; ax0_outer_1 < 8; ++ax0_outer_1) {
        nvcuda::wmma::load_matrix_sync(B_shared_wmma_matrix_b[ax0_outer_1], (&(B_shared[((((((int)threadIdx.y) & 1) * 2560) + (ax0_outer_1 * 320)) + (k_inner_outer * 16))])), 40);
      }
      for (int i_c_outer = 0; i_c_outer < 4; ++i_c_outer) {
        for (int j_c_outer = 0; j_c_outer < 8; ++j_c_outer) {
          nvcuda::wmma::mma_sync(C_wmma_accumulator[((i_c_outer * 8) + j_c_outer)], A_shared_wmma_matrix_a[i_c_outer], B_shared_wmma_matrix_b[j_c_outer], C_wmma_accumulator[((i_c_outer * 8) + j_c_outer)]);
        }
      }
    }
  }
  __syncthreads();
  for (int i_inner_inner_outer = 0; i_inner_inner_outer < 4; ++i_inner_inner_outer) {
    for (int j_inner_inner_outer = 0; j_inner_inner_outer < 8; ++j_inner_inner_outer) {
      nvcuda::wmma::store_matrix_sync((&(C[(((((((((int)blockIdx.x) >> 6) * 2097152) + ((((int)threadIdx.y) >> 1) * 1048576)) + (i_inner_inner_outer * 262144)) + ((((int)blockIdx.x) & 63) * 128)) + ((((int)threadIdx.y) & 1) * 64)) + (j_inner_inner_outer * 8))])), C_wmma_accumulator[((i_inner_inner_outer * 8) + j_inner_inner_outer)], 8192, nvcuda::wmma::mem_row_major);
    }
  }
  __syncthreads();
}


top1: 14.723803520202637 	top10: 12.325632095336914
--------------------------------------------------------------------------------
best config: {<Node, roller_matmul>: {'block': [256, 128], 'warp': [128, 64], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
best latency: 12.325632095336914
{<Node, roller_matmul>: {'block': [128, 128], 'warp': [64, 64], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
0.5571220517158508
{<Node, roller_matmul>: {'block': [64, 256], 'warp': [32, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
0.5997979640960693
{<Node, roller_matmul>: {'block': [256, 64], 'warp': [128, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
0.605272650718689
{<Node, roller_matmul>: {'block': [64, 64], 'warp': [32, 32], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
0.7725745439529419
{<Node, roller_matmul>: {'block': [64, 128], 'warp': [32, 64], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
0.7108114361763
{<Node, roller_matmul>: {'block': [128, 64], 'warp': [64, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
0.7129899859428406
{<Node, roller_matmul>: {'block': [128, 256], 'warp': [64, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
0.5944361686706543
{<Node, roller_matmul>: {'block': [256, 128], 'warp': [128, 64], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
0.5776233077049255
{<Node, roller_matmul>: {'block': [32, 64], 'warp': [16, 32], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
1.073265790939331
{<Node, roller_matmul>: {'block': [64, 32], 'warp': [32, 16], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
1.0747629404067993
{<Node, roller_matmul>: {'block': [32, 128], 'warp': [16, 64], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
0.9882187843322754
{<Node, roller_matmul>: {'block': [128, 32], 'warp': [64, 16], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
0.9976785778999329
{<Node, roller_matmul>: {'block': [256, 256], 'warp': [128, 128], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
1.4023338556289673
{<Node, roller_matmul>: {'block': [32, 256], 'warp': [16, 128], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 264>}}}
0.9296268820762634
{<Node, roller_matmul>: {'block': [256, 32], 'warp': [128, 16], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
0.9111965894699097
{<Node, roller_matmul>: {'block': [64, 512], 'warp': [32, 256], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 520>}}}
0.7934965491294861
{<Node, roller_matmul>: {'block': [512, 64], 'warp': [256, 32], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 72>}}}
0.7536442875862122
{<Node, roller_matmul>: {'block': [32, 32], 'warp': [16, 16], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 40>}}}
1.4370945692062378
{<Node, roller_matmul>: {'block': [16, 128], 'warp': [8, 64], 'wmma': [8, 32, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
2.110395908355713
{<Node, roller_matmul>: {'block': [128, 16], 'warp': [64, 8], 'wmma': [32, 8, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 24>}}}
2.1235432624816895
best code __global__ void __launch_bounds__(128) Fused(half* __restrict__ A, half* __restrict__ B, half* __restrict__ C) {
  
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> C_wmma_accumulator[16];
  __shared__ half A_shared[5120];
  __shared__ half B_shared[5120];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> A_shared_wmma_matrix_a[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::col_major> B_shared_wmma_matrix_b[4];
  for (int i_c_outer_init = 0; i_c_outer_init < 4; ++i_c_outer_init) {
    for (int j_c_outer_init = 0; j_c_outer_init < 4; ++j_c_outer_init) {
      nvcuda::wmma::fill_fragment(C_wmma_accumulator[((i_c_outer_init * 4) + j_c_outer_init)], __float2half_rn(0.000000e+00f));
    }
  }
  for (int k_outer = 0; k_outer < 256; ++k_outer) {
    __syncthreads();
    *(uint4*)(A_shared + (((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8))) = *(uint4*)(A + ((((((((int)blockIdx.x) >> 3) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 1280)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 3) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 262144));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 2560)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 3) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 524288));
    *(uint4*)(A_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 3840)) = *(uint4*)(A + (((((((((int)blockIdx.x) >> 3) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 786432));
    *(uint4*)(B_shared + (((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8))) = *(uint4*)(B + ((((((((int)blockIdx.x) & 7) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 1280)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 7) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 262144));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 2560)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 7) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 524288));
    *(uint4*)(B_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 3840)) = *(uint4*)(B + (((((((((int)blockIdx.x) & 7) * 1048576) + (((int)threadIdx.y) * 65536)) + ((((int)threadIdx.x) >> 2) * 8192)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 786432));
    __syncthreads();
    for (int k_inner_outer = 0; k_inner_outer < 2; ++k_inner_outer) {
      for (int ax0_outer = 0; ax0_outer < 4; ++ax0_outer) {
        nvcuda::wmma::load_matrix_sync(A_shared_wmma_matrix_a[ax0_outer], (&(A_shared[((((((int)threadIdx.y) >> 1) * 2560) + (ax0_outer * 640)) + (k_inner_outer * 16))])), 40);
      }
      for (int ax0_outer_1 = 0; ax0_outer_1 < 4; ++ax0_outer_1) {
        nvcuda::wmma::load_matrix_sync(B_shared_wmma_matrix_b[ax0_outer_1], (&(B_shared[((((((int)threadIdx.y) & 1) * 2560) + (ax0_outer_1 * 640)) + (k_inner_outer * 16))])), 40);
      }
      for (int i_c_outer = 0; i_c_outer < 4; ++i_c_outer) {
        for (int j_c_outer = 0; j_c_outer < 4; ++j_c_outer) {
          nvcuda::wmma::mma_sync(C_wmma_accumulator[((i_c_outer * 4) + j_c_outer)], A_shared_wmma_matrix_a[i_c_outer], B_shared_wmma_matrix_b[j_c_outer], C_wmma_accumulator[((i_c_outer * 4) + j_c_outer)]);
        }
      }
    }
  }
  __syncthreads();
  for (int i_inner_inner_outer = 0; i_inner_inner_outer < 4; ++i_inner_inner_outer) {
    for (int j_inner_inner_outer = 0; j_inner_inner_outer < 4; ++j_inner_inner_outer) {
      nvcuda::wmma::store_matrix_sync((&(C[(((((((((int)blockIdx.x) >> 3) * 131072) + ((((int)threadIdx.y) >> 1) * 65536)) + (i_inner_inner_outer * 16384)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.y) & 1) * 64)) + (j_inner_inner_outer * 16))])), C_wmma_accumulator[((i_inner_inner_outer * 4) + j_inner_inner_outer)], 1024, nvcuda::wmma::mem_row_major);
    }
  }
  __syncthreads();
}


top1: 0.5571220517158508 	top10: 0.5571220517158508
--------------------------------------------------------------------------------
best config: {<Node, roller_matmul>: {'block': [128, 128], 'warp': [64, 64], 'wmma': [16, 16, 16], 'use_cutlass': False, 'rstep': [32], 'block_order': <NoRasterization>, 'use_tc': '80', 'strides': {2: <Stride, 0, 136>}}}
best latency: 0.5571220517158508
4096_8192_8192	3.0399487018585205
4096_28672_8192	10.972569465637207
4096_8192_28672	12.325632095336914
4096_1024_8192	0.5571220517158508
