[
  {
    "nodes": [
      0,
      1
    ],
    "node_names": [
      "cast_multiply_0",
      "mean_add_sqrt_divide_1"
    ],
    "group_id": 0,
    "input_desc": [
      [
        "cast_multiply_0",
        0,
        0
      ]
    ],
    "output_desc": [
      [
        "cast_multiply_0",
        0,
        0
      ],
      [
        "mean_add_sqrt_divide_1",
        1,
        0
      ]
    ],
    "code": "__device__ void Group0_0_cast_multiply_0(half* __restrict__ p0, float* __restrict__ output_proxy, float* __restrict__ output_proxy_1, char* shared) {\n  output_proxy[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))] = ((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]);\n  __syncthreads();\n  output_proxy_1[((int)threadIdx.x)] = (((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]) * ((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]));\n  output_proxy_1[(((int)threadIdx.x) + 128)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]));\n  output_proxy_1[(((int)threadIdx.x) + 256)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]));\n  output_proxy_1[(((int)threadIdx.x) + 384)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]));\n  output_proxy_1[(((int)threadIdx.x) + 512)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]));\n  output_proxy_1[(((int)threadIdx.x) + 640)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]));\n  output_proxy_1[(((int)threadIdx.x) + 768)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]));\n  output_proxy_1[(((int)threadIdx.x) + 896)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]));\n  output_proxy_1[(((int)threadIdx.x) + 1024)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]));\n  output_proxy_1[(((int)threadIdx.x) + 1152)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]));\n  output_proxy_1[(((int)threadIdx.x) + 1280)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]));\n  output_proxy_1[(((int)threadIdx.x) + 1408)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]));\n  output_proxy_1[(((int)threadIdx.x) + 1536)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]));\n  output_proxy_1[(((int)threadIdx.x) + 1664)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]));\n  output_proxy_1[(((int)threadIdx.x) + 1792)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]));\n  output_proxy_1[(((int)threadIdx.x) + 1920)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]));\n  output_proxy_1[(((int)threadIdx.x) + 2048)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]));\n  output_proxy_1[(((int)threadIdx.x) + 2176)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]));\n  output_proxy_1[(((int)threadIdx.x) + 2304)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]));\n  output_proxy_1[(((int)threadIdx.x) + 2432)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]));\n  output_proxy_1[(((int)threadIdx.x) + 2560)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]));\n  output_proxy_1[(((int)threadIdx.x) + 2688)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]));\n  output_proxy_1[(((int)threadIdx.x) + 2816)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]));\n  output_proxy_1[(((int)threadIdx.x) + 2944)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]));\n  output_proxy_1[(((int)threadIdx.x) + 3072)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]));\n  output_proxy_1[(((int)threadIdx.x) + 3200)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]));\n  output_proxy_1[(((int)threadIdx.x) + 3328)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]));\n  output_proxy_1[(((int)threadIdx.x) + 3456)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]));\n  output_proxy_1[(((int)threadIdx.x) + 3584)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]));\n  output_proxy_1[(((int)threadIdx.x) + 3712)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]));\n  output_proxy_1[(((int)threadIdx.x) + 3840)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]));\n  output_proxy_1[(((int)threadIdx.x) + 3968)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]));\n  output_proxy_1[(((int)threadIdx.x) + 4096)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]));\n  output_proxy_1[(((int)threadIdx.x) + 4224)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]));\n  output_proxy_1[(((int)threadIdx.x) + 4352)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]));\n  output_proxy_1[(((int)threadIdx.x) + 4480)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]));\n  output_proxy_1[(((int)threadIdx.x) + 4608)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]));\n  output_proxy_1[(((int)threadIdx.x) + 4736)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]));\n  output_proxy_1[(((int)threadIdx.x) + 4864)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]));\n  output_proxy_1[(((int)threadIdx.x) + 4992)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]));\n  output_proxy_1[(((int)threadIdx.x) + 5120)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]));\n  output_proxy_1[(((int)threadIdx.x) + 5248)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]));\n  output_proxy_1[(((int)threadIdx.x) + 5376)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]));\n  output_proxy_1[(((int)threadIdx.x) + 5504)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]));\n  output_proxy_1[(((int)threadIdx.x) + 5632)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]));\n  output_proxy_1[(((int)threadIdx.x) + 5760)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]));\n  output_proxy_1[(((int)threadIdx.x) + 5888)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]));\n  output_proxy_1[(((int)threadIdx.x) + 6016)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]));\n  output_proxy_1[(((int)threadIdx.x) + 6144)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]));\n  output_proxy_1[(((int)threadIdx.x) + 6272)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]));\n  output_proxy_1[(((int)threadIdx.x) + 6400)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]));\n  output_proxy_1[(((int)threadIdx.x) + 6528)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]));\n  output_proxy_1[(((int)threadIdx.x) + 6656)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]));\n  output_proxy_1[(((int)threadIdx.x) + 6784)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]));\n  output_proxy_1[(((int)threadIdx.x) + 6912)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]));\n  output_proxy_1[(((int)threadIdx.x) + 7040)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]));\n  output_proxy_1[(((int)threadIdx.x) + 7168)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]));\n  output_proxy_1[(((int)threadIdx.x) + 7296)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]));\n  output_proxy_1[(((int)threadIdx.x) + 7424)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]));\n  output_proxy_1[(((int)threadIdx.x) + 7552)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]));\n  output_proxy_1[(((int)threadIdx.x) + 7680)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]));\n  output_proxy_1[(((int)threadIdx.x) + 7808)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]));\n  output_proxy_1[(((int)threadIdx.x) + 7936)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]));\n  output_proxy_1[(((int)threadIdx.x) + 8064)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]));\n  __syncthreads();\n}\n\n__device__ void Group0_1_mean_add_sqrt_divide_1(float* __restrict__ p0, float* __restrict__ T_divide_7, char* shared) {\n  float normal_reduce_temp0[1];\n  float* p0_shared = (float*)p0;\n  __shared__ float red_buf0[128];\n  normal_reduce_temp0[0] = 0.000000e+00f;\n  for (int k2_inner_outer = 0; k2_inner_outer < 64; ++k2_inner_outer) {\n    normal_reduce_temp0[0] = (normal_reduce_temp0[0] + p0_shared[((k2_inner_outer * 128) + ((int)threadIdx.x))]);\n  }\n  __syncthreads();\n  ((volatile float*)red_buf0)[((int)threadIdx.x)] = normal_reduce_temp0[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 64)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    float w_16_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_16_0;\n    float w_8_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_8_0;\n    float w_4_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_4_0;\n    float w_2_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_2_0;\n    float w_1_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_1_0;\n  }\n  __syncthreads();\n  T_divide_7[((int)blockIdx.x)] = (1.000000e+00f / sqrtf(((((volatile float*)red_buf0)[0] * 1.220703e-04f) + 1.000000e-05f)));\n}\n\n__global__ void __launch_bounds__(128) Group0(half* input0, float* output0, float* output1) {\n  __shared__ char shared[32768];\n  Group0_0_cast_multiply_0(input0, output0, (float*)(shared+0), shared+0);\n  Group0_1_mean_add_sqrt_divide_1((float*)(shared+0), output1, shared+32768);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      4096,
      1,
      1
    ],
    "latency": 0.13762560486793518,
    "name": "Group0",
    "gain": 0.17578238993883133
  },
  {
    "nodes": [
      2
    ],
    "node_names": [
      "multiply_cast_multiply_reshape_cast_cast_reshape_2"
    ],
    "group_id": 1,
    "input_desc": [
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        0
      ],
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        1
      ],
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        2
      ]
    ],
    "output_desc": [
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group1(float* __restrict__ p0, float* __restrict__ p1, half* __restrict__ p2, int8_t* __restrict__ T_reshape_9) {\n  \n  T_reshape_9[(((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4))] = ((signed char)((float)(p2[(((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) & 8191)] * ((half)(p0[(((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4))] * p1[(((int)blockIdx.x) >> 2)])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 128)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 128) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 128)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 128) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 256)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 256) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 256)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 256) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 384)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 384) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 384)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 384) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 1)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 1) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 1)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 1) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 129)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 129) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 129)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 129) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 257)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 257) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 257)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 257) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 385)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 385) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 385)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 385) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 2)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 2) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 2)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 2) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 130)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 130) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 130)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 130) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 258)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 258) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 258)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 258) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 386)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 386) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 386)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 386) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 3)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 3) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 3)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 3) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 131)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 131) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 131)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 131) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 259)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 259) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 259)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 259) >> 13))])))));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 387)] = ((signed char)((float)(p2[((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 387) & 8191)] * ((half)(p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 387)] * p1[(((((int)blockIdx.x) >> 6) * 16) + ((((((((int)blockIdx.x) & 63) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 387) >> 13))])))));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      16384,
      1,
      1
    ],
    "latency": 0.11000686138868332,
    "name": "Group1",
    "gain": 0
  },
  {
    "nodes": [
      3,
      4
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_3",
      "reshape_reshape_transpose_4"
    ],
    "group_id": 2,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_3",
        3,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_3",
        3,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_reshape_transpose_4",
        4,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group2(int8_t* __restrict__ input0, int8_t* __restrict__ input1, half* __restrict__ output0) {\n  \n  int mediate1_shared_warp[128];\n  __shared__ signed char input0_shared[8192];\n  __shared__ signed char mediate0_shared[8192];\n  signed char input1_local[1];\n  signed char mediate0_local[8];\n  signed char input0_shared_warp[64];\n  signed char mediate0_shared_warp[64];\n  __shared__ int mediate1_shared[6400];\n\n  const int MAX_BLOCK_N = 10;\n  const auto baseBlockIdx = blockIdx.x + gridDim.x *blockIdx.y;\n  const auto totalPanel = (gridDim.x * gridDim.y +MAX_BLOCK_N * gridDim.x - 1) / (MAX_BLOCK_N * gridDim.x);\n  const auto totalBlock = gridDim.x * gridDim.y;\n  const auto panelIdx = baseBlockIdx / (MAX_BLOCK_N *gridDim.x);\n  const auto strideLd = panelIdx + 1 < totalPanel ?MAX_BLOCK_N : (totalBlock - panelIdx * (MAX_BLOCK_N *gridDim.x)) / gridDim.x;\n  const auto bx = (panelIdx & 1) ? gridDim.x -(baseBlockIdx - panelIdx * MAX_BLOCK_N * gridDim.x) /strideLd - 1 : (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) / strideLd;\n  const auto by = (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) % strideLd + panelIdx * MAX_BLOCK_N;\n  const auto bz = blockIdx.z;\n  const dim3 blockIdx(bx, by, bz);\n  \n  for (int i0_2_init = 0; i0_2_init < 4; ++i0_2_init) {\n    for (int i1_2_init = 0; i1_2_init < 4; ++i1_2_init) {\n      for (int i = 0; i < 8; ++i) {\nmediate1_shared_warp[((i0_2_init * 32) + (i1_2_init * 8)) + i] = 0.0;}\n;\n    }\n  }\n  for (int k_0 = 0; k_0 < 128; ++k_0) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_ax2_ax3_0_fused_0 = 0; ax0_ax1_ax2_ax3_0_fused_0 < 4; ++ax0_ax1_ax2_ax3_0_fused_0) {\n      *(int4*)(input0_shared + ((((ax0_ax1_ax2_ax3_0_fused_0 * 2048) + (((int)threadIdx.y) * 1024)) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.x) * 16))) = *(int4*)(input0 + (((((((((int)blockIdx.y) * 1048576) + (ax0_ax1_ax2_ax3_0_fused_0 * 262144)) + (((int)threadIdx.y) * 131072)) + (k_0 * 1024)) + (((int)threadIdx.z) * 512)) + ((((int)threadIdx.x) & 15) * 32)) + ((((int)threadIdx.x) >> 4) * 16)));\n    }\n    for (int ax0_ax1_ax2_ax3_0_fused_0_1 = 0; ax0_ax1_ax2_ax3_0_fused_0_1 < 8; ++ax0_ax1_ax2_ax3_0_fused_0_1) {\n      input1_local[0] = input1[((((((((int)blockIdx.x) * 131072) + (ax0_ax1_ax2_ax3_0_fused_0_1 * 16384)) + (k_0 * 128)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.z) * 32)) + ((int)threadIdx.x))];\n      for (int ax0 = 0; ax0 < 8; ++ax0) {\n        mediate0_local[ax0] = ((input1_local[0] >> ((signed char)ax0)) & (signed char)1);\n      }\n      *(int2*)(mediate0_shared + ((((ax0_ax1_ax2_ax3_0_fused_0_1 * 1024) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.z) * 256)) + (((int)threadIdx.x) * 8))) = *(int2*)(mediate0_local + 0);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 2; ++k_1) {\n      for (int ax0_1 = 0; ax0_1 < 4; ++ax0_1) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(input0_shared[(((((int)threadIdx.y) * 4096) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(input0_shared[(((((int)threadIdx.y) * 4096) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[0]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[1]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[2]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int ax0_2 = 0; ax0_2 < 4; ++ax0_2) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(mediate0_shared[(((((int)threadIdx.z) * 4096) + (ax0_2 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(mediate0_shared[(((((int)threadIdx.z) * 4096) + (ax0_2 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[0]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[1]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[2]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int i0_2 = 0; i0_2 < 4; ++i0_2) {\n        for (int i1_2 = 0; i1_2 < 4; ++i1_2) {\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[0]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[1]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[2]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[3])\n      : \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(mediate0_shared_warp + (i1_2 * 16)))[0]), \"r\"(((unsigned *)(mediate0_shared_warp + (i1_2 * 16)))[1]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[0]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[1]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[2]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[3]));\n  }\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[0]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[1]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[2]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[3])\n      : \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(mediate0_shared_warp + ((i1_2 * 16) + 8)))[0]), \"r\"(((unsigned *)(mediate0_shared_warp + ((i1_2 * 16) + 8)))[1]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[0]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[1]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[2]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[3]));\n  }\n        }\n      }\n    }\n  }\n  for (int ax0_3 = 0; ax0_3 < 4; ++ax0_3) {\n    for (int ax1 = 0; ax1 < 4; ++ax1) {\n      __syncthreads();\n      for (int local_id = 0; local_id < 8; ++local_id) {\n(&(mediate1_shared[((((int)threadIdx.y) * 5120) + (((int)threadIdx.z) * 1024))]))[((((((local_id % 4) / 2) * 8) + (threadIdx.x / 4)) * 16) + ((((local_id / 4) * 8) + ((threadIdx.x % 4) * 2)) + (local_id % 2)))] = mediate1_shared_warp[((ax0_3 * 32) + (ax1 * 8)) + local_id];\n}\n;\n      __syncthreads();\n      #pragma unroll\n      for (int ax0_ax1_ax2_ax3_fused_0 = 0; ax0_ax1_ax2_ax3_fused_0 < 1; ++ax0_ax1_ax2_ax3_fused_0) {\n        uint4 __1;\n        longlong4 __2 = *(longlong4*)(mediate1_shared + (((((int)threadIdx.y) * 5120) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.x) * 8)));\n        ((half2*)(&(__1.x)))->x = (half)(((int2*)(&(__2.x)))->x);\n        ((half2*)(&(__1.x)))->y = (half)(((int2*)(&(__2.x)))->y);\n        ((half2*)(&(__1.y)))->x = (half)(((int2*)(&(__2.y)))->x);\n        ((half2*)(&(__1.y)))->y = (half)(((int2*)(&(__2.y)))->y);\n        ((half2*)(&(__1.z)))->x = (half)(((int2*)(&(__2.z)))->x);\n        ((half2*)(&(__1.z)))->y = (half)(((int2*)(&(__2.z)))->y);\n        ((half2*)(&(__1.w)))->x = (half)(((int2*)(&(__2.w)))->x);\n        ((half2*)(&(__1.w)))->y = (half)(((int2*)(&(__2.w)))->y);\n        *(uint4*)(output0 + (((((((((((((int)blockIdx.x) * 8) + (((int)threadIdx.z) * 4)) + ax1) & 31) * 1048576) + ((((int)threadIdx.x) >> 4) * 524288)) + (((int)blockIdx.y) * 16384)) + (((int)threadIdx.y) * 8192)) + (ax0_3 * 2048)) + ((((int)blockIdx.x) >> 2) * 128)) + ((((int)threadIdx.x) & 15) * 8))) = __1;\n      }\n    }\n  }\n}\n\n",
    "block_size": [
      32,
      2,
      2
    ],
    "grid_size": [
      64,
      32,
      1
    ],
    "latency": 1.744691252708435,
    "name": "Group2",
    "gain": 0.0810285285115242
  },
  {
    "nodes": [
      5
    ],
    "node_names": [
      "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5"
    ],
    "group_id": 3,
    "input_desc": [
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        0
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        1
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        2
      ]
    ],
    "output_desc": [
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group3(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ p2, half* __restrict__ T_reshape) {\n  \n  T_reshape[((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2))] = ((p0[((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2))] * p1[((((((int)blockIdx.x) & 2047) * 256) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2))]) + ((__float2half_rn(0.000000e+00f) - p0[(((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 64)]) * p2[((((((int)blockIdx.x) & 2047) * 256) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2))]));\n  T_reshape[(((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 64)] = ((p0[(((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 64)] * p1[(((((((int)blockIdx.x) & 2047) * 256) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 64)]) + (p0[((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2))] * p2[(((((((int)blockIdx.x) & 2047) * 256) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 64)]));\n  T_reshape[(((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 1)] = ((p0[(((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 1)] * p1[(((((((int)blockIdx.x) & 2047) * 256) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 65)]) * p2[(((((((int)blockIdx.x) & 2047) * 256) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 1)]));\n  T_reshape[(((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 65)] = ((p0[(((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 65)] * p1[(((((((int)blockIdx.x) & 2047) * 256) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 65)]) + (p0[(((((((((int)blockIdx.x) >> 11) * 1048576) + ((((int)threadIdx.x) >> 6) * 524288)) + ((((int)blockIdx.x) & 2047) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 1)] * p2[(((((((int)blockIdx.x) & 2047) * 256) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + ((((int)threadIdx.x) & 31) * 2)) + 65)]));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      65536,
      1,
      1
    ],
    "latency": 0.09714346379041672,
    "name": "Group3",
    "gain": 0
  },
  {
    "nodes": [
      6,
      7
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_6",
      "reshape_reshape_transpose_7"
    ],
    "group_id": 4,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_6",
        6,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_6",
        6,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_reshape_transpose_7",
        7,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group4(int8_t* __restrict__ input0, int8_t* __restrict__ input1, half* __restrict__ output0) {\n  \n  int mediate1_shared_warp[64];\n  __shared__ signed char input0_shared[4096];\n  __shared__ signed char mediate0_shared[8192];\n  signed char input1_local[1];\n  signed char mediate0_local[8];\n  signed char input0_shared_warp[32];\n  signed char mediate0_shared_warp[64];\n  __shared__ int mediate1_shared[3840];\n\n  const int MAX_BLOCK_N = 10;\n  const auto baseBlockIdx = blockIdx.x + gridDim.x *blockIdx.y;\n  const auto totalPanel = (gridDim.x * gridDim.y +MAX_BLOCK_N * gridDim.x - 1) / (MAX_BLOCK_N * gridDim.x);\n  const auto totalBlock = gridDim.x * gridDim.y;\n  const auto panelIdx = baseBlockIdx / (MAX_BLOCK_N *gridDim.x);\n  const auto strideLd = panelIdx + 1 < totalPanel ?MAX_BLOCK_N : (totalBlock - panelIdx * (MAX_BLOCK_N *gridDim.x)) / gridDim.x;\n  const auto bx = (panelIdx & 1) ? gridDim.x -(baseBlockIdx - panelIdx * MAX_BLOCK_N * gridDim.x) /strideLd - 1 : (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) / strideLd;\n  const auto by = (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) % strideLd + panelIdx * MAX_BLOCK_N;\n  const auto bz = blockIdx.z;\n  const dim3 blockIdx(bx, by, bz);\n  \n  for (int i0_2_init = 0; i0_2_init < 2; ++i0_2_init) {\n    for (int i1_2_init = 0; i1_2_init < 4; ++i1_2_init) {\n      for (int i = 0; i < 8; ++i) {\nmediate1_shared_warp[((i0_2_init * 32) + (i1_2_init * 8)) + i] = 0.0;}\n;\n    }\n  }\n  for (int k_0 = 0; k_0 < 128; ++k_0) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_ax2_ax3_0_fused_0 = 0; ax0_ax1_ax2_ax3_0_fused_0 < 2; ++ax0_ax1_ax2_ax3_0_fused_0) {\n      *(int4*)(input0_shared + ((((ax0_ax1_ax2_ax3_0_fused_0 * 2048) + (((int)threadIdx.y) * 1024)) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.x) * 16))) = *(int4*)(input0 + (((((((((int)blockIdx.y) * 524288) + (ax0_ax1_ax2_ax3_0_fused_0 * 262144)) + (((int)threadIdx.y) * 131072)) + (k_0 * 1024)) + (((int)threadIdx.z) * 512)) + ((((int)threadIdx.x) & 15) * 32)) + ((((int)threadIdx.x) >> 4) * 16)));\n    }\n    for (int ax0_ax1_ax2_ax3_0_fused_0_1 = 0; ax0_ax1_ax2_ax3_0_fused_0_1 < 8; ++ax0_ax1_ax2_ax3_0_fused_0_1) {\n      input1_local[0] = input1[((((((((int)blockIdx.x) * 131072) + (ax0_ax1_ax2_ax3_0_fused_0_1 * 16384)) + (k_0 * 128)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.z) * 32)) + ((int)threadIdx.x))];\n      for (int ax0 = 0; ax0 < 8; ++ax0) {\n        mediate0_local[ax0] = ((input1_local[0] >> ((signed char)ax0)) & (signed char)1);\n      }\n      *(int2*)(mediate0_shared + ((((ax0_ax1_ax2_ax3_0_fused_0_1 * 1024) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.z) * 256)) + (((int)threadIdx.x) * 8))) = *(int2*)(mediate0_local + 0);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 2; ++k_1) {\n      for (int ax0_1 = 0; ax0_1 < 2; ++ax0_1) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(input0_shared[(((((int)threadIdx.y) * 2048) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(input0_shared[(((((int)threadIdx.y) * 2048) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[0]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[1]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[2]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int ax0_2 = 0; ax0_2 < 4; ++ax0_2) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(mediate0_shared[(((((int)threadIdx.z) * 4096) + (ax0_2 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(mediate0_shared[(((((int)threadIdx.z) * 4096) + (ax0_2 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[0]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[1]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[2]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int i0_2 = 0; i0_2 < 2; ++i0_2) {\n        for (int i1_2 = 0; i1_2 < 4; ++i1_2) {\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[0]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[1]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[2]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[3])\n      : \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(mediate0_shared_warp + (i1_2 * 16)))[0]), \"r\"(((unsigned *)(mediate0_shared_warp + (i1_2 * 16)))[1]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[0]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[1]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[2]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[3]));\n  }\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[0]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[1]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[2]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[3])\n      : \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(mediate0_shared_warp + ((i1_2 * 16) + 8)))[0]), \"r\"(((unsigned *)(mediate0_shared_warp + ((i1_2 * 16) + 8)))[1]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[0]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[1]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[2]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[3]));\n  }\n        }\n      }\n    }\n  }\n  for (int ax0_3 = 0; ax0_3 < 2; ++ax0_3) {\n    for (int ax1 = 0; ax1 < 4; ++ax1) {\n      __syncthreads();\n      for (int local_id = 0; local_id < 8; ++local_id) {\n(&(mediate1_shared[((((int)threadIdx.y) * 2560) + (((int)threadIdx.z) * 1024))]))[((((((local_id % 4) / 2) * 8) + (threadIdx.x / 4)) * 16) + ((((local_id / 4) * 8) + ((threadIdx.x % 4) * 2)) + (local_id % 2)))] = mediate1_shared_warp[((ax0_3 * 32) + (ax1 * 8)) + local_id];\n}\n;\n      __syncthreads();\n      #pragma unroll\n      for (int ax0_ax1_ax2_ax3_fused_0 = 0; ax0_ax1_ax2_ax3_fused_0 < 1; ++ax0_ax1_ax2_ax3_fused_0) {\n        uint4 __1;\n        longlong4 __2 = *(longlong4*)(mediate1_shared + (((((int)threadIdx.y) * 2560) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.x) * 8)));\n        ((half2*)(&(__1.x)))->x = (half)(((int2*)(&(__2.x)))->x);\n        ((half2*)(&(__1.x)))->y = (half)(((int2*)(&(__2.x)))->y);\n        ((half2*)(&(__1.y)))->x = (half)(((int2*)(&(__2.y)))->x);\n        ((half2*)(&(__1.y)))->y = (half)(((int2*)(&(__2.y)))->y);\n        ((half2*)(&(__1.z)))->x = (half)(((int2*)(&(__2.z)))->x);\n        ((half2*)(&(__1.z)))->y = (half)(((int2*)(&(__2.z)))->y);\n        ((half2*)(&(__1.w)))->x = (half)(((int2*)(&(__2.w)))->x);\n        ((half2*)(&(__1.w)))->y = (half)(((int2*)(&(__2.w)))->y);\n        *(uint4*)(output0 + ((((((((ax1 * 1048576) + ((((int)threadIdx.x) >> 4) * 524288)) + (((int)blockIdx.y) * 8192)) + (((int)threadIdx.y) * 4096)) + (ax0_3 * 2048)) + (((int)blockIdx.x) * 256)) + (((int)threadIdx.z) * 128)) + ((((int)threadIdx.x) & 15) * 8))) = __1;\n      }\n    }\n  }\n}\n\n",
    "block_size": [
      32,
      2,
      2
    ],
    "grid_size": [
      8,
      64,
      1
    ],
    "latency": 0.25886720418930054,
    "name": "Group4",
    "gain": 0.009215999394655228
  },
  {
    "nodes": [
      8
    ],
    "node_names": [
      "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8"
    ],
    "group_id": 5,
    "input_desc": [
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
        8,
        0
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
        8,
        1
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
        8,
        2
      ]
    ],
    "output_desc": [
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
        8,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group5(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ p2, half* __restrict__ T_transpose_15) {\n  \n  T_transpose_15[(((((((int)blockIdx.x) >> 13) * 4194304) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 8191) * 64)) + (((int)threadIdx.x) & 63))] = ((p0[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) & 63))] * p1[(((((int)blockIdx.x) & 8191) * 64) + (((int)threadIdx.x) & 63))]) + ((((((int)blockIdx.x) & 1) == 1) ? p0[(((((int)blockIdx.x) >> 1) * 128) + (((int)threadIdx.x) & 63))] : (__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 64) + (((int)threadIdx.x) & 63)) + 64)])) * p2[(((((int)blockIdx.x) & 8191) * 64) + (((int)threadIdx.x) & 63))]));\n  T_transpose_15[((((((((int)blockIdx.x) >> 13) * 4194304) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 8191) * 64)) + (((int)threadIdx.x) & 63)) + 2097152)] = ((p0[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) & 63))] * p1[(((((int)blockIdx.x) & 8191) * 64) + (((int)threadIdx.x) & 63))]) + ((((((int)blockIdx.x) & 1) == 1) ? p0[(((((int)blockIdx.x) >> 1) * 128) + (((int)threadIdx.x) & 63))] : (__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 64) + (((int)threadIdx.x) & 63)) + 64)])) * p2[(((((int)blockIdx.x) & 8191) * 64) + (((int)threadIdx.x) & 63))]));\n  T_transpose_15[((((((((int)blockIdx.x) >> 13) * 4194304) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 8191) * 64)) + (((int)threadIdx.x) & 63)) + 524288)] = ((p0[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) & 63))] * p1[(((((int)blockIdx.x) & 8191) * 64) + (((int)threadIdx.x) & 63))]) + ((((((int)blockIdx.x) & 1) == 1) ? p0[(((((int)blockIdx.x) >> 1) * 128) + (((int)threadIdx.x) & 63))] : (__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 64) + (((int)threadIdx.x) & 63)) + 64)])) * p2[(((((int)blockIdx.x) & 8191) * 64) + (((int)threadIdx.x) & 63))]));\n  T_transpose_15[((((((((int)blockIdx.x) >> 13) * 4194304) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 8191) * 64)) + (((int)threadIdx.x) & 63)) + 2621440)] = ((p0[((((int)blockIdx.x) * 64) + (((int)threadIdx.x) & 63))] * p1[(((((int)blockIdx.x) & 8191) * 64) + (((int)threadIdx.x) & 63))]) + ((((((int)blockIdx.x) & 1) == 1) ? p0[(((((int)blockIdx.x) >> 1) * 128) + (((int)threadIdx.x) & 63))] : (__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 64) + (((int)threadIdx.x) & 63)) + 64)])) * p2[(((((int)blockIdx.x) & 8191) * 64) + (((int)threadIdx.x) & 63))]));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      65536,
      1,
      1
    ],
    "latency": 0.056027431041002274,
    "name": "Group5",
    "gain": 0
  },
  {
    "nodes": [
      9,
      10
    ],
    "node_names": [
      "nn_batch_matmul_9",
      "reshape_divide_10"
    ],
    "group_id": 6,
    "input_desc": [
      [
        "nn_batch_matmul_9",
        9,
        0
      ],
      [
        "nn_batch_matmul_9",
        9,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_divide_10",
        10,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group6(half* __restrict__ input0, half* __restrict__ input1, half* __restrict__ output0) {\n  \n    __shared__ half input0_shared[8192];\n  __shared__ half input1_shared[4096];\n  ALLOCATE_CUTLASS_OBJECT(mediate0_cutlass_warp_mma, cutlass::gemm::warp::GemmTensorOp<\n    cutlass::gemm::GemmShape<64, 32, 32>,\n    cutlass::layout::RowMajorTensorOpMultiplicandCrosswise<16, 32>,\n    cutlass::layout::ColumnMajorTensorOpMultiplicandCrosswise<16, 32>\n>((((int)threadIdx.y) >> 1), (((int)threadIdx.y) & 1), ((int)threadIdx.x)));\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0 = 0; ax0_ax1_fused_0_0_0 < 4; ++ax0_ax1_fused_0_0_0) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(input0_shared + (((((ax0_ax1_fused_0_0_0 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(input0_shared + (((((ax0_ax1_fused_0_0_0 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(input0 + ((((((((int)blockIdx.x) >> 6) * 16384) + (ax0_ax1_fused_0_0_0 * 4096)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)threadIdx.x) & 3) * 8)))), \"n\"(16)\n    );\n  }\n  }\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0_1 = 0; ax0_ax1_fused_0_0_0_1 < 2; ++ax0_ax1_fused_0_0_0_1) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(input1_shared + (((((ax0_ax1_fused_0_0_0_1 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(input1_shared + (((((ax0_ax1_fused_0_0_0_1 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(input1 + (((((((((int)blockIdx.x) >> 11) * 524288) + ((((int)blockIdx.x) & 63) * 8192)) + (ax0_ax1_fused_0_0_0_1 * 4096)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)threadIdx.x) & 3) * 8)))), \"n\"(16)\n    );\n  }\n  }\n__asm__ __volatile__(\"cp.async.commit_group;\");\n\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0_2 = 0; ax0_ax1_fused_0_0_0_2 < 4; ++ax0_ax1_fused_0_0_0_2) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(input0_shared + ((((((ax0_ax1_fused_0_0_0_2 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)) + 4096))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(input0_shared + ((((((ax0_ax1_fused_0_0_0_2 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)) + 4096)))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(input0 + (((((((((int)blockIdx.x) >> 6) * 16384) + (ax0_ax1_fused_0_0_0_2 * 4096)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)threadIdx.x) & 3) * 8)) + 32))), \"n\"(16)\n    );\n  }\n  }\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0_3 = 0; ax0_ax1_fused_0_0_0_3 < 2; ++ax0_ax1_fused_0_0_0_3) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(input1_shared + ((((((ax0_ax1_fused_0_0_0_3 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)) + 2048))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(input1_shared + ((((((ax0_ax1_fused_0_0_0_3 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)) + 2048)))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(input1 + ((((((((((int)blockIdx.x) >> 11) * 524288) + ((((int)blockIdx.x) & 63) * 8192)) + (ax0_ax1_fused_0_0_0_3 * 4096)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)threadIdx.x) & 3) * 8)) + 32))), \"n\"(16)\n    );\n  }\n  }\n__asm__ __volatile__(\"cp.async.commit_group;\");\n\n__asm__ __volatile__(\"cp.async.wait_group 1;\");\n\n  __syncthreads();\n  call_cutlass_mma_prologue(mediate0_cutlass_warp_mma, (&(input0_shared[0])), (&(input1_shared[0])), 32, 32);\n  call_cutlass_mma_body(mediate0_cutlass_warp_mma);\n  for (int k_0 = 0; k_0 < 2; ++k_0) {\n    #pragma unroll\n    for (int ax0_ax1_fused_0_0_0_4 = 0; ax0_ax1_fused_0_0_0_4 < 4; ++ax0_ax1_fused_0_0_0_4) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(input0_shared + ((((((k_0 * 4096) + (ax0_ax1_fused_0_0_0_4 * 1024)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(input0_shared + ((((((k_0 * 4096) + (ax0_ax1_fused_0_0_0_4 * 1024)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(input0 + ((((((((((int)blockIdx.x) >> 6) * 16384) + (ax0_ax1_fused_0_0_0_4 * 4096)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 2) * 128)) + (k_0 * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 64))), \"n\"(16)\n    );\n  }\n    }\n    #pragma unroll\n    for (int ax0_ax1_fused_0_0_0_5 = 0; ax0_ax1_fused_0_0_0_5 < 2; ++ax0_ax1_fused_0_0_0_5) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(input1_shared + ((((((k_0 * 2048) + (ax0_ax1_fused_0_0_0_5 * 1024)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(input1_shared + ((((((k_0 * 2048) + (ax0_ax1_fused_0_0_0_5 * 1024)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(input1 + (((((((((((int)blockIdx.x) >> 11) * 524288) + ((((int)blockIdx.x) & 63) * 8192)) + (ax0_ax1_fused_0_0_0_5 * 4096)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 2) * 128)) + (k_0 * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 64))), \"n\"(16)\n    );\n  }\n    }\n__asm__ __volatile__(\"cp.async.commit_group;\");\n\n__asm__ __volatile__(\"cp.async.wait_group 1;\");\n\n    __syncthreads();\n    call_cutlass_mma_prologue(mediate0_cutlass_warp_mma, (&(input0_shared[(((k_0 + 1) & 1) * 4096)])), (&(input1_shared[(((k_0 + 1) & 1) * 2048)])), 32, 32);\n    call_cutlass_mma_epilogue(mediate0_cutlass_warp_mma);\n    call_cutlass_mma_body(mediate0_cutlass_warp_mma);\n  }\n__asm__ __volatile__(\"cp.async.wait_group 0;\");\n\n  __syncthreads();\n  call_cutlass_mma_prologue(mediate0_cutlass_warp_mma, (&(input0_shared[4096])), (&(input1_shared[2048])), 32, 32);\n  call_cutlass_mma_epilogue(mediate0_cutlass_warp_mma);\n  call_cutlass_mma_body(mediate0_cutlass_warp_mma);\n  call_cutlass_mma_epilogue(mediate0_cutlass_warp_mma);\n  #pragma unroll\n  for (int ax1_0 = 0; ax1_0 < 32; ++ax1_0) {\n    uint1 __1;\n      uint1 __2 = *(uint1*)(mediate0_cutlass_warp_mma + (ax1_0 * 2));\n      uint1 __3 = make_uint1(__pack_half2(__float2half_rn(8.839779e-02f), __float2half_rn(8.839779e-02f)));\n      ((half2*)(&(__1.x)))->x = (((half2*)(&(__2.x)))->x*((half2*)(&(__3.x)))->x);\n      ((half2*)(&(__1.x)))->y = (((half2*)(&(__2.x)))->y*((half2*)(&(__3.x)))->y);\n    *(uint1*)(output0 + (((((((((((int)blockIdx.x) >> 6) * 524288) + ((((int)threadIdx.y) >> 1) * 262144)) + ((ax1_0 & 7) * 32768)) + ((((int)threadIdx.x) >> 2) * 4096)) + ((((int)blockIdx.x) & 63) * 64)) + ((((int)threadIdx.y) & 1) * 32)) + ((ax1_0 >> 3) * 8)) + ((((int)threadIdx.x) & 3) * 2))) = __1;\n  }\n}\n\n",
    "block_size": [
      32,
      4,
      1
    ],
    "grid_size": [
      131072,
      1,
      1
    ],
    "latency": 3.435110569000244,
    "name": "Group6",
    "gain": 2.5924999713897705
  },
  {
    "nodes": [
      11,
      12
    ],
    "node_names": [
      "max_11",
      "subtract_exp_12"
    ],
    "group_id": 7,
    "input_desc": [
      [
        "max_11",
        11,
        0
      ],
      [
        "subtract_exp_12",
        12,
        0
      ]
    ],
    "output_desc": [
      [
        "subtract_exp_12",
        12,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group7(half* __restrict__ input0, half* __restrict__ input1, half* __restrict__ output0) {\n  \n  half mediate0_local[1];\n  __shared__ half input0_shared[8192];\n  mediate0_local[0] = __float2half_rn(-6.550400e+04f);\n  for (int k3_outer = 0; k3_outer < 64; ++k3_outer) {\n    __syncthreads();\n    *(uint4*)(input0_shared + (((int)threadIdx.x) * 8)) = *(uint4*)(input0 + ((((((((int)threadIdx.x) >> 4) * 16777216) + ((((int)blockIdx.x) >> 12) * 8192)) + (((((int)threadIdx.x) & 15) >> 3) * 4096)) + (k3_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)));\n    *(uint4*)(input0_shared + ((((int)threadIdx.x) * 8) + 1024)) = *(uint4*)(input0 + (((((((((int)threadIdx.x) >> 4) * 16777216) + ((((int)blockIdx.x) >> 12) * 8192)) + (((((int)threadIdx.x) & 15) >> 3) * 4096)) + (k3_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 134217728));\n    *(uint4*)(input0_shared + ((((int)threadIdx.x) * 8) + 2048)) = *(uint4*)(input0 + (((((((((int)threadIdx.x) >> 4) * 16777216) + ((((int)blockIdx.x) >> 12) * 8192)) + (((((int)threadIdx.x) & 15) >> 3) * 4096)) + (k3_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 268435456));\n    *(uint4*)(input0_shared + ((((int)threadIdx.x) * 8) + 3072)) = *(uint4*)(input0 + (((((((((int)threadIdx.x) >> 4) * 16777216) + ((((int)blockIdx.x) >> 12) * 8192)) + (((((int)threadIdx.x) & 15) >> 3) * 4096)) + (k3_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 402653184));\n    *(uint4*)(input0_shared + ((((int)threadIdx.x) * 8) + 4096)) = *(uint4*)(input0 + (((((((((int)threadIdx.x) >> 4) * 16777216) + ((((int)blockIdx.x) >> 12) * 8192)) + (((((int)threadIdx.x) & 15) >> 3) * 4096)) + (k3_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 536870912));\n    *(uint4*)(input0_shared + ((((int)threadIdx.x) * 8) + 5120)) = *(uint4*)(input0 + (((((((((int)threadIdx.x) >> 4) * 16777216) + ((((int)blockIdx.x) >> 12) * 8192)) + (((((int)threadIdx.x) & 15) >> 3) * 4096)) + (k3_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 671088640));\n    *(uint4*)(input0_shared + ((((int)threadIdx.x) * 8) + 6144)) = *(uint4*)(input0 + (((((((((int)threadIdx.x) >> 4) * 16777216) + ((((int)blockIdx.x) >> 12) * 8192)) + (((((int)threadIdx.x) & 15) >> 3) * 4096)) + (k3_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 805306368));\n    *(uint4*)(input0_shared + ((((int)threadIdx.x) * 8) + 7168)) = *(uint4*)(input0 + (((((((((int)threadIdx.x) >> 4) * 16777216) + ((((int)blockIdx.x) >> 12) * 8192)) + (((((int)threadIdx.x) & 15) >> 3) * 4096)) + (k3_outer * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 939524096));\n    __syncthreads();\n    for (int k3_inner = 0; k3_inner < 64; ++k3_inner) {\n      mediate0_local[0] = max(mediate0_local[0], input0_shared[((((int)threadIdx.x) * 64) + k3_inner)]);\n    }\n  }\n  output0[(((((((int)threadIdx.x) >> 1) * 16777216) + ((((int)blockIdx.x) >> 12) * 8192)) + ((((int)threadIdx.x) & 1) * 4096)) + (((int)blockIdx.x) & 4095))] = hexp((input1[(((((((int)threadIdx.x) >> 1) * 16777216) + ((((int)blockIdx.x) >> 12) * 8192)) + ((((int)threadIdx.x) & 1) * 4096)) + (((int)blockIdx.x) & 4095))] - mediate0_local[0]));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      2048,
      1,
      1
    ],
    "latency": 2.04451847076416,
    "name": "Group7",
    "gain": 2.0732942819595337
  },
  {
    "nodes": [
      13,
      14
    ],
    "node_names": [
      "sum_13",
      "divide_cast_cast_reshape_14"
    ],
    "group_id": 8,
    "input_desc": [
      [
        "sum_13",
        13,
        0
      ],
      [
        "divide_cast_cast_reshape_14",
        14,
        0
      ]
    ],
    "output_desc": [
      [
        "divide_cast_cast_reshape_14",
        14,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group8(half* __restrict__ input0, half* __restrict__ input1, half* __restrict__ output0) {\n  \n  half mediate0_local[1];\n  __shared__ half input0_shared[64];\n  mediate0_local[0] = __float2half_rn(0.000000e+00f);\n  for (int k3_outer = 0; k3_outer < 64; ++k3_outer) {\n    __syncthreads();\n    if (((int)threadIdx.x) < 8) {\n      *(uint4*)(input0_shared + (((int)threadIdx.x) * 8)) = *(uint4*)(input0 + ((((((int)blockIdx.x) >> 4) * 4096) + (k3_outer * 64)) + (((int)threadIdx.x) * 8)));\n    }\n    __syncthreads();\n    for (int k3_inner = 0; k3_inner < 64; ++k3_inner) {\n      mediate0_local[0] = (mediate0_local[0] + input0_shared[k3_inner]);\n    }\n  }\n  output0[((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2))] = ((half)((float)(input1[((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2))] / mediate0_local[0])));\n  output0[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2)) + 1)] = ((half)((float)(input1[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2)) + 1)] / mediate0_local[0])));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      1024,
      1,
      1
    ],
    "latency": 0.07855542749166489,
    "name": "Group8",
    "gain": 4.054991401731968
  },
  {
    "nodes": [
      15
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_15"
    ],
    "group_id": 9,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_15",
        15,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_15",
        15,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_perfect_quant_linear_cast_15",
        15,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group9(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int T_perfect_quant_linear_shared_warp[64];\n  __shared__ signed char p0_shared[4096];\n  __shared__ signed char B_decode_shared[8192];\n  signed char p1_local[1];\n  signed char B_decode_local[8];\n  signed char p0_shared_warp[32];\n  signed char B_decode_shared_warp[64];\n  __shared__ int T_perfect_quant_linear_shared[3840];\n\n  const int MAX_BLOCK_N = 10;\n  const auto baseBlockIdx = blockIdx.x + gridDim.x *blockIdx.y;\n  const auto totalPanel = (gridDim.x * gridDim.y +MAX_BLOCK_N * gridDim.x - 1) / (MAX_BLOCK_N * gridDim.x);\n  const auto totalBlock = gridDim.x * gridDim.y;\n  const auto panelIdx = baseBlockIdx / (MAX_BLOCK_N *gridDim.x);\n  const auto strideLd = panelIdx + 1 < totalPanel ?MAX_BLOCK_N : (totalBlock - panelIdx * (MAX_BLOCK_N *gridDim.x)) / gridDim.x;\n  const auto bx = (panelIdx & 1) ? gridDim.x -(baseBlockIdx - panelIdx * MAX_BLOCK_N * gridDim.x) /strideLd - 1 : (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) / strideLd;\n  const auto by = (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) % strideLd + panelIdx * MAX_BLOCK_N;\n  const auto bz = blockIdx.z;\n  const dim3 blockIdx(bx, by, bz);\n  \n  for (int i0_2_init = 0; i0_2_init < 2; ++i0_2_init) {\n    for (int i1_2_init = 0; i1_2_init < 4; ++i1_2_init) {\n      for (int i = 0; i < 8; ++i) {\nT_perfect_quant_linear_shared_warp[((i0_2_init * 32) + (i1_2_init * 8)) + i] = 0.0;}\n;\n    }\n  }\n  for (int k_0 = 0; k_0 < 128; ++k_0) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_ax2_ax3_0_fused_0 = 0; ax0_ax1_ax2_ax3_0_fused_0 < 2; ++ax0_ax1_ax2_ax3_0_fused_0) {\n      *(int4*)(p0_shared + ((((ax0_ax1_ax2_ax3_0_fused_0 * 2048) + (((int)threadIdx.y) * 1024)) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.x) * 16))) = *(int4*)(p0 + (((((((((int)blockIdx.y) * 524288) + (ax0_ax1_ax2_ax3_0_fused_0 * 262144)) + (((int)threadIdx.y) * 131072)) + (k_0 * 1024)) + (((int)threadIdx.z) * 512)) + ((((int)threadIdx.x) & 15) * 32)) + ((((int)threadIdx.x) >> 4) * 16)));\n    }\n    for (int ax0_ax1_ax2_ax3_0_fused_0_1 = 0; ax0_ax1_ax2_ax3_0_fused_0_1 < 8; ++ax0_ax1_ax2_ax3_0_fused_0_1) {\n      p1_local[0] = p1[((((((((int)blockIdx.x) * 131072) + (ax0_ax1_ax2_ax3_0_fused_0_1 * 16384)) + (k_0 * 128)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.z) * 32)) + ((int)threadIdx.x))];\n      for (int ax0 = 0; ax0 < 8; ++ax0) {\n        B_decode_local[ax0] = ((p1_local[0] >> ((signed char)ax0)) & (signed char)1);\n      }\n      *(int2*)(B_decode_shared + ((((ax0_ax1_ax2_ax3_0_fused_0_1 * 1024) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.z) * 256)) + (((int)threadIdx.x) * 8))) = *(int2*)(B_decode_local + 0);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 2; ++k_1) {\n      for (int ax0_1 = 0; ax0_1 < 2; ++ax0_1) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(p0_shared[(((((int)threadIdx.y) * 2048) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(p0_shared[(((((int)threadIdx.y) * 2048) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(p0_shared_warp + (ax0_1 * 16)))[0]), \"=r\"(((unsigned *)(p0_shared_warp + (ax0_1 * 16)))[1]), \"=r\"(((unsigned *)(p0_shared_warp + (ax0_1 * 16)))[2]), \"=r\"(((unsigned *)(p0_shared_warp + (ax0_1 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int ax0_2 = 0; ax0_2 < 4; ++ax0_2) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(B_decode_shared[(((((int)threadIdx.z) * 4096) + (ax0_2 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(B_decode_shared[(((((int)threadIdx.z) * 4096) + (ax0_2 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(B_decode_shared_warp + (ax0_2 * 16)))[0]), \"=r\"(((unsigned *)(B_decode_shared_warp + (ax0_2 * 16)))[1]), \"=r\"(((unsigned *)(B_decode_shared_warp + (ax0_2 * 16)))[2]), \"=r\"(((unsigned *)(B_decode_shared_warp + (ax0_2 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int i0_2 = 0; i0_2 < 2; ++i0_2) {\n        for (int i1_2 = 0; i1_2 < 4; ++i1_2) {\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[0]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[1]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[2]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[3])\n      : \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(B_decode_shared_warp + (i1_2 * 16)))[0]), \"r\"(((unsigned *)(B_decode_shared_warp + (i1_2 * 16)))[1]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[0]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[1]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[2]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[3]));\n  }\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[0]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[1]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[2]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[3])\n      : \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(B_decode_shared_warp + ((i1_2 * 16) + 8)))[0]), \"r\"(((unsigned *)(B_decode_shared_warp + ((i1_2 * 16) + 8)))[1]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[0]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[1]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[2]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[3]));\n  }\n        }\n      }\n    }\n  }\n  for (int ax0_3 = 0; ax0_3 < 2; ++ax0_3) {\n    for (int ax1 = 0; ax1 < 4; ++ax1) {\n      __syncthreads();\n      for (int local_id = 0; local_id < 8; ++local_id) {\n(&(T_perfect_quant_linear_shared[((((int)threadIdx.y) * 2560) + (((int)threadIdx.z) * 1024))]))[((((((local_id % 4) / 2) * 8) + (threadIdx.x / 4)) * 16) + ((((local_id / 4) * 8) + ((threadIdx.x % 4) * 2)) + (local_id % 2)))] = T_perfect_quant_linear_shared_warp[((ax0_3 * 32) + (ax1 * 8)) + local_id];\n}\n;\n      __syncthreads();\n      #pragma unroll\n      for (int ax0_ax1_ax2_ax3_fused_0 = 0; ax0_ax1_ax2_ax3_fused_0 < 1; ++ax0_ax1_ax2_ax3_fused_0) {\n        uint4 __1;\n        longlong4 __2 = *(longlong4*)(T_perfect_quant_linear_shared + (((((int)threadIdx.y) * 2560) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.x) * 8)));\n        ((half2*)(&(__1.x)))->x = (half)(((int2*)(&(__2.x)))->x);\n        ((half2*)(&(__1.x)))->y = (half)(((int2*)(&(__2.x)))->y);\n        ((half2*)(&(__1.y)))->x = (half)(((int2*)(&(__2.y)))->x);\n        ((half2*)(&(__1.y)))->y = (half)(((int2*)(&(__2.y)))->y);\n        ((half2*)(&(__1.z)))->x = (half)(((int2*)(&(__2.z)))->x);\n        ((half2*)(&(__1.z)))->y = (half)(((int2*)(&(__2.z)))->y);\n        ((half2*)(&(__1.w)))->x = (half)(((int2*)(&(__2.w)))->x);\n        ((half2*)(&(__1.w)))->y = (half)(((int2*)(&(__2.w)))->y);\n        *(uint4*)(T_cast + (((((((((int)blockIdx.y) * 65536) + (((int)threadIdx.y) * 32768)) + (ax0_3 * 16384)) + (((int)blockIdx.x) * 2048)) + (((int)threadIdx.z) * 1024)) + (ax1 * 256)) + (((int)threadIdx.x) * 8))) = __1;\n      }\n    }\n  }\n}\n\n",
    "block_size": [
      32,
      2,
      2
    ],
    "grid_size": [
      8,
      64,
      1
    ],
    "latency": 0.25886720418930054,
    "name": "Group9",
    "gain": 0
  },
  {
    "nodes": [
      16
    ],
    "node_names": [
      "reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16"
    ],
    "group_id": 10,
    "input_desc": [
      [
        "reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16",
        16,
        0
      ]
    ],
    "output_desc": [
      [
        "reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16",
        16,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group10(half* __restrict__ p0, half* __restrict__ T_transpose_8) {\n  \n  T_transpose_8[((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15))] = p0[((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2))];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 65536)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 16)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 131072)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 32)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 196608)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 48)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 524288)] = p0[((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2))];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 589824)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 16)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 655360)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 32)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 720896)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 48)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1048576)] = p0[((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2))];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1114112)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 16)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1179648)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 32)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1245184)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 48)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1572864)] = p0[((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2))];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1638400)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 16)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1703936)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 32)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1769472)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 48)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 4096)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 1)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 69632)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 17)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 135168)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 33)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 200704)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 49)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 528384)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 1)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 593920)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 17)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 659456)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 33)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 724992)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 49)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1052672)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 1)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1118208)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 17)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1183744)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 33)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1249280)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 49)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1576960)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 1)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1642496)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 17)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1708032)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 33)];\n  T_transpose_8[(((((((((int)blockIdx.x) >> 9) * 2097152) + (((((int)blockIdx.x) & 511) >> 8) * 262144)) + ((((int)threadIdx.x) >> 4) * 8192)) + ((((int)blockIdx.x) & 255) * 16)) + (((int)threadIdx.x) & 15)) + 1773568)] = p0[(((((((((int)blockIdx.x) & 255) * 16384) + ((((int)threadIdx.x) & 15) * 1024)) + ((((int)blockIdx.x) >> 10) * 128)) + (((((int)blockIdx.x) & 511) >> 8) * 64)) + ((((int)threadIdx.x) >> 4) * 2)) + 49)];\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      8192,
      1,
      1
    ],
    "latency": 0.05905066803097725,
    "name": "Group10",
    "gain": 0
  },
  {
    "nodes": [
      17
    ],
    "node_names": [
      "nn_batch_matmul_17"
    ],
    "group_id": 11,
    "input_desc": [
      [
        "nn_batch_matmul_17",
        17,
        0
      ],
      [
        "nn_batch_matmul_17",
        17,
        1
      ]
    ],
    "output_desc": [
      [
        "nn_batch_matmul_17",
        17,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group11(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_batch_matmul_NT) {\n  \n    __shared__ half p0_shared[16384];\n  __shared__ half p1_shared[8192];\n  ALLOCATE_CUTLASS_OBJECT(T_batch_matmul_NT_cutlass_warp_mma, cutlass::gemm::warp::GemmTensorOp<\n    cutlass::gemm::GemmShape<128, 64, 32>,\n    cutlass::layout::RowMajorTensorOpMultiplicandCrosswise<16, 32>,\n    cutlass::layout::ColumnMajorTensorOpMultiplicandCrosswise<16, 32>\n>((((int)threadIdx.y) >> 1), (((int)threadIdx.y) & 1), ((int)threadIdx.x)));\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0 = 0; ax0_ax1_fused_0_0_0 < 8; ++ax0_ax1_fused_0_0_0) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(p0_shared + (((((ax0_ax1_fused_0_0_0 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p0_shared + (((((ax0_ax1_fused_0_0_0 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p0 + (((((((int)blockIdx.x) * 1048576) + (ax0_ax1_fused_0_0_0 * 131072)) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 2) * 4096)) + ((((int)threadIdx.x) & 3) * 8)))), \"n\"(16)\n    );\n  }\n  }\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0_1 = 0; ax0_ax1_fused_0_0_0_1 < 4; ++ax0_ax1_fused_0_0_0_1) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(p1_shared + (((((ax0_ax1_fused_0_0_0_1 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p1_shared + (((((ax0_ax1_fused_0_0_0_1 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p1 + ((((((((int)blockIdx.x) >> 4) * 524288) + (ax0_ax1_fused_0_0_0_1 * 131072)) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 2) * 4096)) + ((((int)threadIdx.x) & 3) * 8)))), \"n\"(16)\n    );\n  }\n  }\n__asm__ __volatile__(\"cp.async.commit_group;\");\n\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0_2 = 0; ax0_ax1_fused_0_0_0_2 < 8; ++ax0_ax1_fused_0_0_0_2) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(p0_shared + ((((((ax0_ax1_fused_0_0_0_2 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)) + 8192))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p0_shared + ((((((ax0_ax1_fused_0_0_0_2 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)) + 8192)))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p0 + ((((((((int)blockIdx.x) * 1048576) + (ax0_ax1_fused_0_0_0_2 * 131072)) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 2) * 4096)) + ((((int)threadIdx.x) & 3) * 8)) + 32))), \"n\"(16)\n    );\n  }\n  }\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0_3 = 0; ax0_ax1_fused_0_0_0_3 < 4; ++ax0_ax1_fused_0_0_0_3) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(p1_shared + ((((((ax0_ax1_fused_0_0_0_3 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)) + 4096))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p1_shared + ((((((ax0_ax1_fused_0_0_0_3 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)) + 4096)))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p1 + (((((((((int)blockIdx.x) >> 4) * 524288) + (ax0_ax1_fused_0_0_0_3 * 131072)) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 2) * 4096)) + ((((int)threadIdx.x) & 3) * 8)) + 32))), \"n\"(16)\n    );\n  }\n  }\n__asm__ __volatile__(\"cp.async.commit_group;\");\n\n__asm__ __volatile__(\"cp.async.wait_group 1;\");\n\n  __syncthreads();\n  call_cutlass_mma_prologue(T_batch_matmul_NT_cutlass_warp_mma, (&(p0_shared[0])), (&(p1_shared[0])), 32, 32);\n  call_cutlass_mma_body(T_batch_matmul_NT_cutlass_warp_mma);\n  for (int k_0 = 0; k_0 < 126; ++k_0) {\n    #pragma unroll\n    for (int ax0_ax1_fused_0_0_0_4 = 0; ax0_ax1_fused_0_0_0_4 < 8; ++ax0_ax1_fused_0_0_0_4) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(p0_shared + (((((((k_0 & 1) * 8192) + (ax0_ax1_fused_0_0_0_4 * 1024)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p0_shared + (((((((k_0 & 1) * 8192) + (ax0_ax1_fused_0_0_0_4 * 1024)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p0 + (((((((((int)blockIdx.x) * 1048576) + (ax0_ax1_fused_0_0_0_4 * 131072)) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 2) * 4096)) + (k_0 * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 64))), \"n\"(16)\n    );\n  }\n    }\n    #pragma unroll\n    for (int ax0_ax1_fused_0_0_0_5 = 0; ax0_ax1_fused_0_0_0_5 < 4; ++ax0_ax1_fused_0_0_0_5) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)(p1_shared + (((((((k_0 & 1) * 4096) + (ax0_ax1_fused_0_0_0_5 * 1024)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p1_shared + (((((((k_0 & 1) * 4096) + (ax0_ax1_fused_0_0_0_5 * 1024)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n#endif\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p1 + ((((((((((int)blockIdx.x) >> 4) * 524288) + (ax0_ax1_fused_0_0_0_5 * 131072)) + (((int)threadIdx.y) * 32768)) + ((((int)threadIdx.x) >> 2) * 4096)) + (k_0 * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 64))), \"n\"(16)\n    );\n  }\n    }\n__asm__ __volatile__(\"cp.async.commit_group;\");\n\n__asm__ __volatile__(\"cp.async.wait_group 1;\");\n\n    __syncthreads();\n    call_cutlass_mma_prologue(T_batch_matmul_NT_cutlass_warp_mma, (&(p0_shared[(((k_0 + 1) & 1) * 8192)])), (&(p1_shared[(((k_0 + 1) & 1) * 4096)])), 32, 32);\n    call_cutlass_mma_epilogue(T_batch_matmul_NT_cutlass_warp_mma);\n    call_cutlass_mma_body(T_batch_matmul_NT_cutlass_warp_mma);\n  }\n__asm__ __volatile__(\"cp.async.wait_group 0;\");\n\n  __syncthreads();\n  call_cutlass_mma_prologue(T_batch_matmul_NT_cutlass_warp_mma, (&(p0_shared[8192])), (&(p1_shared[4096])), 32, 32);\n  call_cutlass_mma_epilogue(T_batch_matmul_NT_cutlass_warp_mma);\n  call_cutlass_mma_body(T_batch_matmul_NT_cutlass_warp_mma);\n  call_cutlass_mma_epilogue(T_batch_matmul_NT_cutlass_warp_mma);\n  #pragma unroll\n  for (int ax1_0 = 0; ax1_0 < 128; ++ax1_0) {\n    *(uint1*)(T_batch_matmul_NT + (((((((((int)blockIdx.x) * 32768) + ((((int)threadIdx.y) >> 1) * 16384)) + ((ax1_0 & 15) * 1024)) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)threadIdx.y) & 1) * 64)) + ((ax1_0 >> 4) * 8)) + ((((int)threadIdx.x) & 3) * 2))) = *(uint1*)(T_batch_matmul_NT_cutlass_warp_mma + (ax1_0 * 2));\n  }\n}\n\n",
    "block_size": [
      32,
      4,
      1
    ],
    "grid_size": [
      1024,
      1,
      1
    ],
    "latency": 1.5020031929016113,
    "name": "Group11",
    "gain": 0
  },
  {
    "nodes": [
      18
    ],
    "node_names": [
      "reshape_transpose_reshape_reshape_cast_cast_reshape_18"
    ],
    "group_id": 12,
    "input_desc": [
      [
        "reshape_transpose_reshape_reshape_cast_cast_reshape_18",
        18,
        0
      ]
    ],
    "output_desc": [
      [
        "reshape_transpose_reshape_reshape_cast_cast_reshape_18",
        18,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group12(half* __restrict__ p0, int8_t* __restrict__ T_reshape_7) {\n  \n  T_reshape_7[(((((((int)blockIdx.x) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4))] = ((signed char)((float)p0[((((((((((((int)blockIdx.x) & 127) >> 1) * 16) + ((((int)threadIdx.x) >> 5) * 4)) + ((((int)blockIdx.x) & 1) * 2)) & 63) * 524288) + ((((int)blockIdx.x) >> 7) * 2048)) + ((((((((((int)blockIdx.x) & 127) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) >> 13) * 128)) + ((((int)threadIdx.x) & 31) * 4))]));\n  T_reshape_7[((((((((int)blockIdx.x) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 128)] = ((signed char)((float)p0[(((((((((((((int)blockIdx.x) & 127) >> 1) * 16) + ((((int)threadIdx.x) >> 5) * 4)) + ((((int)blockIdx.x) & 1) * 2)) + 1) & 63) * 524288) + ((((int)blockIdx.x) >> 7) * 2048)) + (((((((((((int)blockIdx.x) & 127) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 128) >> 13) * 128)) + ((((int)threadIdx.x) & 31) * 4))]));\n  T_reshape_7[((((((((int)blockIdx.x) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 1)] = ((signed char)((float)p0[(((((((((((((int)blockIdx.x) & 127) >> 1) * 16) + ((((int)threadIdx.x) >> 5) * 4)) + ((((int)blockIdx.x) & 1) * 2)) & 63) * 524288) + ((((int)blockIdx.x) >> 7) * 2048)) + (((((((((((int)blockIdx.x) & 127) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 1) >> 13) * 128)) + ((((int)threadIdx.x) & 31) * 4)) + 1)]));\n  T_reshape_7[((((((((int)blockIdx.x) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 129)] = ((signed char)((float)p0[((((((((((((((int)blockIdx.x) & 127) >> 1) * 16) + ((((int)threadIdx.x) >> 5) * 4)) + ((((int)blockIdx.x) & 1) * 2)) + 1) & 63) * 524288) + ((((int)blockIdx.x) >> 7) * 2048)) + (((((((((((int)blockIdx.x) & 127) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 129) >> 13) * 128)) + ((((int)threadIdx.x) & 31) * 4)) + 1)]));\n  T_reshape_7[((((((((int)blockIdx.x) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 2)] = ((signed char)((float)p0[(((((((((((((int)blockIdx.x) & 127) >> 1) * 16) + ((((int)threadIdx.x) >> 5) * 4)) + ((((int)blockIdx.x) & 1) * 2)) & 63) * 524288) + ((((int)blockIdx.x) >> 7) * 2048)) + (((((((((((int)blockIdx.x) & 127) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 2) >> 13) * 128)) + ((((int)threadIdx.x) & 31) * 4)) + 2)]));\n  T_reshape_7[((((((((int)blockIdx.x) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 130)] = ((signed char)((float)p0[((((((((((((((int)blockIdx.x) & 127) >> 1) * 16) + ((((int)threadIdx.x) >> 5) * 4)) + ((((int)blockIdx.x) & 1) * 2)) + 1) & 63) * 524288) + ((((int)blockIdx.x) >> 7) * 2048)) + (((((((((((int)blockIdx.x) & 127) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 130) >> 13) * 128)) + ((((int)threadIdx.x) & 31) * 4)) + 2)]));\n  T_reshape_7[((((((((int)blockIdx.x) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 3)] = ((signed char)((float)p0[(((((((((((((int)blockIdx.x) & 127) >> 1) * 16) + ((((int)threadIdx.x) >> 5) * 4)) + ((((int)blockIdx.x) & 1) * 2)) & 63) * 524288) + ((((int)blockIdx.x) >> 7) * 2048)) + (((((((((((int)blockIdx.x) & 127) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 3) >> 13) * 128)) + ((((int)threadIdx.x) & 31) * 4)) + 3)]));\n  T_reshape_7[((((((((int)blockIdx.x) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 131)] = ((signed char)((float)p0[((((((((((((((int)blockIdx.x) & 127) >> 1) * 16) + ((((int)threadIdx.x) >> 5) * 4)) + ((((int)blockIdx.x) & 1) * 2)) + 1) & 63) * 524288) + ((((int)blockIdx.x) >> 7) * 2048)) + (((((((((((int)blockIdx.x) & 127) >> 1) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 1) * 256)) + ((((int)threadIdx.x) & 31) * 4)) + 131) >> 13) * 128)) + ((((int)threadIdx.x) & 31) * 4)) + 3)]));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      32768,
      1,
      1
    ],
    "latency": 0.06923815608024597,
    "name": "Group12",
    "gain": 0
  },
  {
    "nodes": [
      19,
      20
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_19",
      "reshape_add_20"
    ],
    "group_id": 13,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_19",
        19,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_19",
        19,
        1
      ],
      [
        "reshape_add_20",
        20,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_add_20",
        20,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group13(int8_t* __restrict__ input0, int8_t* __restrict__ input1, half* __restrict__ input2, half* __restrict__ output0) {\n  \n  int mediate1_shared_warp[128];\n  __shared__ signed char input0_shared[8192];\n  __shared__ signed char mediate0_shared[8192];\n  signed char input1_local[1];\n  signed char mediate0_local[8];\n  signed char input0_shared_warp[64];\n  signed char mediate0_shared_warp[64];\n  __shared__ int mediate1_shared[6400];\n\n  const int MAX_BLOCK_N = 10;\n  const auto baseBlockIdx = blockIdx.x + gridDim.x *blockIdx.y;\n  const auto totalPanel = (gridDim.x * gridDim.y +MAX_BLOCK_N * gridDim.x - 1) / (MAX_BLOCK_N * gridDim.x);\n  const auto totalBlock = gridDim.x * gridDim.y;\n  const auto panelIdx = baseBlockIdx / (MAX_BLOCK_N *gridDim.x);\n  const auto strideLd = panelIdx + 1 < totalPanel ?MAX_BLOCK_N : (totalBlock - panelIdx * (MAX_BLOCK_N *gridDim.x)) / gridDim.x;\n  const auto bx = (panelIdx & 1) ? gridDim.x -(baseBlockIdx - panelIdx * MAX_BLOCK_N * gridDim.x) /strideLd - 1 : (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) / strideLd;\n  const auto by = (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) % strideLd + panelIdx * MAX_BLOCK_N;\n  const auto bz = blockIdx.z;\n  const dim3 blockIdx(bx, by, bz);\n  \n  for (int i0_2_init = 0; i0_2_init < 4; ++i0_2_init) {\n    for (int i1_2_init = 0; i1_2_init < 4; ++i1_2_init) {\n      for (int i = 0; i < 8; ++i) {\nmediate1_shared_warp[((i0_2_init * 32) + (i1_2_init * 8)) + i] = 0.0;}\n;\n    }\n  }\n  for (int k_0 = 0; k_0 < 128; ++k_0) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_ax2_ax3_0_fused_0 = 0; ax0_ax1_ax2_ax3_0_fused_0 < 4; ++ax0_ax1_ax2_ax3_0_fused_0) {\n      *(int4*)(input0_shared + ((((ax0_ax1_ax2_ax3_0_fused_0 * 2048) + (((int)threadIdx.y) * 1024)) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.x) * 16))) = *(int4*)(input0 + (((((((((int)blockIdx.y) * 1048576) + (ax0_ax1_ax2_ax3_0_fused_0 * 262144)) + (((int)threadIdx.y) * 131072)) + (k_0 * 1024)) + (((int)threadIdx.z) * 512)) + ((((int)threadIdx.x) & 15) * 32)) + ((((int)threadIdx.x) >> 4) * 16)));\n    }\n    for (int ax0_ax1_ax2_ax3_0_fused_0_1 = 0; ax0_ax1_ax2_ax3_0_fused_0_1 < 8; ++ax0_ax1_ax2_ax3_0_fused_0_1) {\n      input1_local[0] = input1[((((((((int)blockIdx.x) * 131072) + (ax0_ax1_ax2_ax3_0_fused_0_1 * 16384)) + (k_0 * 128)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.z) * 32)) + ((int)threadIdx.x))];\n      for (int ax0 = 0; ax0 < 8; ++ax0) {\n        mediate0_local[ax0] = ((input1_local[0] >> ((signed char)ax0)) & (signed char)1);\n      }\n      *(int2*)(mediate0_shared + ((((ax0_ax1_ax2_ax3_0_fused_0_1 * 1024) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.z) * 256)) + (((int)threadIdx.x) * 8))) = *(int2*)(mediate0_local + 0);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 2; ++k_1) {\n      for (int ax0_1 = 0; ax0_1 < 4; ++ax0_1) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(input0_shared[(((((int)threadIdx.y) * 4096) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(input0_shared[(((((int)threadIdx.y) * 4096) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[0]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[1]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[2]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int ax0_2 = 0; ax0_2 < 4; ++ax0_2) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(mediate0_shared[(((((int)threadIdx.z) * 4096) + (ax0_2 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(mediate0_shared[(((((int)threadIdx.z) * 4096) + (ax0_2 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[0]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[1]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[2]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int i0_2 = 0; i0_2 < 4; ++i0_2) {\n        for (int i1_2 = 0; i1_2 < 4; ++i1_2) {\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[0]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[1]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[2]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[3])\n      : \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(mediate0_shared_warp + (i1_2 * 16)))[0]), \"r\"(((unsigned *)(mediate0_shared_warp + (i1_2 * 16)))[1]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[0]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[1]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[2]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[3]));\n  }\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[0]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[1]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[2]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[3])\n      : \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(mediate0_shared_warp + ((i1_2 * 16) + 8)))[0]), \"r\"(((unsigned *)(mediate0_shared_warp + ((i1_2 * 16) + 8)))[1]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[0]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[1]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[2]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[3]));\n  }\n        }\n      }\n    }\n  }\n  for (int ax0_3 = 0; ax0_3 < 4; ++ax0_3) {\n    for (int ax1 = 0; ax1 < 4; ++ax1) {\n      __syncthreads();\n      for (int local_id = 0; local_id < 8; ++local_id) {\n(&(mediate1_shared[((((int)threadIdx.y) * 5120) + (((int)threadIdx.z) * 1024))]))[((((((local_id % 4) / 2) * 8) + (threadIdx.x / 4)) * 16) + ((((local_id / 4) * 8) + ((threadIdx.x % 4) * 2)) + (local_id % 2)))] = mediate1_shared_warp[((ax0_3 * 32) + (ax1 * 8)) + local_id];\n}\n;\n      __syncthreads();\n      #pragma unroll\n      for (int ax0_ax1_ax2_ax3_fused_0 = 0; ax0_ax1_ax2_ax3_fused_0 < 1; ++ax0_ax1_ax2_ax3_fused_0) {\n        uint4 __1;\n          uint4 __2 = *(uint4*)(input2 + (((((((((int)blockIdx.y) * 1048576) + (((int)threadIdx.y) * 524288)) + (ax0_3 * 131072)) + (((int)blockIdx.x) * 2048)) + (((int)threadIdx.z) * 1024)) + (ax1 * 256)) + (((int)threadIdx.x) * 8)));\n          uint4 __3;\n          longlong4 __4 = *(longlong4*)(mediate1_shared + (((((int)threadIdx.y) * 5120) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.x) * 8)));\n          ((half2*)(&(__3.x)))->x = (half)(((int2*)(&(__4.x)))->x);\n          ((half2*)(&(__3.x)))->y = (half)(((int2*)(&(__4.x)))->y);\n          ((half2*)(&(__3.y)))->x = (half)(((int2*)(&(__4.y)))->x);\n          ((half2*)(&(__3.y)))->y = (half)(((int2*)(&(__4.y)))->y);\n          ((half2*)(&(__3.z)))->x = (half)(((int2*)(&(__4.z)))->x);\n          ((half2*)(&(__3.z)))->y = (half)(((int2*)(&(__4.z)))->y);\n          ((half2*)(&(__3.w)))->x = (half)(((int2*)(&(__4.w)))->x);\n          ((half2*)(&(__3.w)))->y = (half)(((int2*)(&(__4.w)))->y);\n          ((half2*)(&(__1.x)))->x = (((half2*)(&(__2.x)))->x+((half2*)(&(__3.x)))->x);\n          ((half2*)(&(__1.x)))->y = (((half2*)(&(__2.x)))->y+((half2*)(&(__3.x)))->y);\n          ((half2*)(&(__1.y)))->x = (((half2*)(&(__2.y)))->x+((half2*)(&(__3.y)))->x);\n          ((half2*)(&(__1.y)))->y = (((half2*)(&(__2.y)))->y+((half2*)(&(__3.y)))->y);\n          ((half2*)(&(__1.z)))->x = (((half2*)(&(__2.z)))->x+((half2*)(&(__3.z)))->x);\n          ((half2*)(&(__1.z)))->y = (((half2*)(&(__2.z)))->y+((half2*)(&(__3.z)))->y);\n          ((half2*)(&(__1.w)))->x = (((half2*)(&(__2.w)))->x+((half2*)(&(__3.w)))->x);\n          ((half2*)(&(__1.w)))->y = (((half2*)(&(__2.w)))->y+((half2*)(&(__3.w)))->y);\n        *(uint4*)(output0 + (((((((((int)blockIdx.y) * 1048576) + (((int)threadIdx.y) * 524288)) + (ax0_3 * 131072)) + (((int)blockIdx.x) * 2048)) + (((int)threadIdx.z) * 1024)) + (ax1 * 256)) + (((int)threadIdx.x) * 8))) = __1;\n      }\n    }\n  }\n}\n\n",
    "block_size": [
      32,
      2,
      2
    ],
    "grid_size": [
      64,
      32,
      1
    ],
    "latency": 1.7498111724853516,
    "name": "Group13",
    "gain": 0.1103287786245346
  },
  {
    "nodes": [
      21,
      22
    ],
    "node_names": [
      "cast_multiply_21",
      "mean_add_sqrt_divide_22"
    ],
    "group_id": 14,
    "input_desc": [
      [
        "cast_multiply_21",
        21,
        0
      ]
    ],
    "output_desc": [
      [
        "cast_multiply_21",
        21,
        0
      ],
      [
        "mean_add_sqrt_divide_22",
        22,
        0
      ]
    ],
    "code": "__device__ void Group0_0_cast_multiply_0(half* __restrict__ p0, float* __restrict__ output_proxy, float* __restrict__ output_proxy_1, char* shared) {\n  output_proxy[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))] = ((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]);\n  __syncthreads();\n  output_proxy_1[((int)threadIdx.x)] = (((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]) * ((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]));\n  output_proxy_1[(((int)threadIdx.x) + 128)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]));\n  output_proxy_1[(((int)threadIdx.x) + 256)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]));\n  output_proxy_1[(((int)threadIdx.x) + 384)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]));\n  output_proxy_1[(((int)threadIdx.x) + 512)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]));\n  output_proxy_1[(((int)threadIdx.x) + 640)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]));\n  output_proxy_1[(((int)threadIdx.x) + 768)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]));\n  output_proxy_1[(((int)threadIdx.x) + 896)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]));\n  output_proxy_1[(((int)threadIdx.x) + 1024)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]));\n  output_proxy_1[(((int)threadIdx.x) + 1152)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]));\n  output_proxy_1[(((int)threadIdx.x) + 1280)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]));\n  output_proxy_1[(((int)threadIdx.x) + 1408)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]));\n  output_proxy_1[(((int)threadIdx.x) + 1536)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]));\n  output_proxy_1[(((int)threadIdx.x) + 1664)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]));\n  output_proxy_1[(((int)threadIdx.x) + 1792)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]));\n  output_proxy_1[(((int)threadIdx.x) + 1920)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]));\n  output_proxy_1[(((int)threadIdx.x) + 2048)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]));\n  output_proxy_1[(((int)threadIdx.x) + 2176)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]));\n  output_proxy_1[(((int)threadIdx.x) + 2304)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]));\n  output_proxy_1[(((int)threadIdx.x) + 2432)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]));\n  output_proxy_1[(((int)threadIdx.x) + 2560)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]));\n  output_proxy_1[(((int)threadIdx.x) + 2688)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]));\n  output_proxy_1[(((int)threadIdx.x) + 2816)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]));\n  output_proxy_1[(((int)threadIdx.x) + 2944)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]));\n  output_proxy_1[(((int)threadIdx.x) + 3072)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]));\n  output_proxy_1[(((int)threadIdx.x) + 3200)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]));\n  output_proxy_1[(((int)threadIdx.x) + 3328)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]));\n  output_proxy_1[(((int)threadIdx.x) + 3456)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]));\n  output_proxy_1[(((int)threadIdx.x) + 3584)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]));\n  output_proxy_1[(((int)threadIdx.x) + 3712)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]));\n  output_proxy_1[(((int)threadIdx.x) + 3840)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]));\n  output_proxy_1[(((int)threadIdx.x) + 3968)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]));\n  output_proxy_1[(((int)threadIdx.x) + 4096)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]));\n  output_proxy_1[(((int)threadIdx.x) + 4224)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]));\n  output_proxy_1[(((int)threadIdx.x) + 4352)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]));\n  output_proxy_1[(((int)threadIdx.x) + 4480)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]));\n  output_proxy_1[(((int)threadIdx.x) + 4608)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]));\n  output_proxy_1[(((int)threadIdx.x) + 4736)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]));\n  output_proxy_1[(((int)threadIdx.x) + 4864)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]));\n  output_proxy_1[(((int)threadIdx.x) + 4992)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]));\n  output_proxy_1[(((int)threadIdx.x) + 5120)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]));\n  output_proxy_1[(((int)threadIdx.x) + 5248)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]));\n  output_proxy_1[(((int)threadIdx.x) + 5376)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]));\n  output_proxy_1[(((int)threadIdx.x) + 5504)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]));\n  output_proxy_1[(((int)threadIdx.x) + 5632)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]));\n  output_proxy_1[(((int)threadIdx.x) + 5760)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]));\n  output_proxy_1[(((int)threadIdx.x) + 5888)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]));\n  output_proxy_1[(((int)threadIdx.x) + 6016)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]));\n  output_proxy_1[(((int)threadIdx.x) + 6144)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]));\n  output_proxy_1[(((int)threadIdx.x) + 6272)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]));\n  output_proxy_1[(((int)threadIdx.x) + 6400)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]));\n  output_proxy_1[(((int)threadIdx.x) + 6528)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]));\n  output_proxy_1[(((int)threadIdx.x) + 6656)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]));\n  output_proxy_1[(((int)threadIdx.x) + 6784)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]));\n  output_proxy_1[(((int)threadIdx.x) + 6912)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]));\n  output_proxy_1[(((int)threadIdx.x) + 7040)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]));\n  output_proxy_1[(((int)threadIdx.x) + 7168)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]));\n  output_proxy_1[(((int)threadIdx.x) + 7296)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]));\n  output_proxy_1[(((int)threadIdx.x) + 7424)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]));\n  output_proxy_1[(((int)threadIdx.x) + 7552)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]));\n  output_proxy_1[(((int)threadIdx.x) + 7680)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]));\n  output_proxy_1[(((int)threadIdx.x) + 7808)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]));\n  output_proxy_1[(((int)threadIdx.x) + 7936)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]));\n  output_proxy_1[(((int)threadIdx.x) + 8064)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]));\n  __syncthreads();\n}\n\n__device__ void Group0_1_mean_add_sqrt_divide_1(float* __restrict__ p0, float* __restrict__ T_divide_7, char* shared) {\n  float normal_reduce_temp0[1];\n  float* p0_shared = (float*)p0;\n  __shared__ float red_buf0[128];\n  normal_reduce_temp0[0] = 0.000000e+00f;\n  for (int k2_inner_outer = 0; k2_inner_outer < 64; ++k2_inner_outer) {\n    normal_reduce_temp0[0] = (normal_reduce_temp0[0] + p0_shared[((k2_inner_outer * 128) + ((int)threadIdx.x))]);\n  }\n  __syncthreads();\n  ((volatile float*)red_buf0)[((int)threadIdx.x)] = normal_reduce_temp0[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 64)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    float w_16_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_16_0;\n    float w_8_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_8_0;\n    float w_4_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_4_0;\n    float w_2_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_2_0;\n    float w_1_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_1_0;\n  }\n  __syncthreads();\n  T_divide_7[((int)blockIdx.x)] = (1.000000e+00f / sqrtf(((((volatile float*)red_buf0)[0] * 1.220703e-04f) + 1.000000e-05f)));\n}\n\n__global__ void __launch_bounds__(128) Group0(half* input0, float* output0, float* output1) {\n  __shared__ char shared[32768];\n  Group0_0_cast_multiply_0(input0, output0, (float*)(shared+0), shared+0);\n  Group0_1_mean_add_sqrt_divide_1((float*)(shared+0), output1, shared+32768);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      4096,
      1,
      1
    ],
    "latency": 0.13762560486793518,
    "name": "Group0",
    "gain": 0.17578238993883133
  },
  {
    "nodes": [
      23,
      24
    ],
    "node_names": [
      "multiply_cast_multiply_23",
      "reshape_cast_cast_reshape_24"
    ],
    "group_id": 15,
    "input_desc": [
      [
        "multiply_cast_multiply_23",
        23,
        0
      ],
      [
        "multiply_cast_multiply_23",
        23,
        1
      ],
      [
        "multiply_cast_multiply_23",
        23,
        2
      ]
    ],
    "output_desc": [
      [
        "reshape_cast_cast_reshape_24",
        24,
        0
      ]
    ],
    "code": "__device__ void Group15_0_multiply_cast_multiply_23(float* __restrict__ p0, float* __restrict__ p1, half* __restrict__ p2, half* __restrict__ T_multiply_5, char* shared) {\n  __syncthreads();\n  T_multiply_5[(((int)threadIdx.x) * 2)] = (p2[(((((int)blockIdx.x) & 15) * 512) + (((int)threadIdx.x) * 2))] * ((half)(p0[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2))] * p1[(((int)blockIdx.x) >> 4)])));\n  T_multiply_5[((((int)threadIdx.x) * 2) + 256)] = (p2[((((((int)blockIdx.x) & 15) * 512) + (((int)threadIdx.x) * 2)) + 256)] * ((half)(p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 256)] * p1[(((int)blockIdx.x) >> 4)])));\n  T_multiply_5[((((int)threadIdx.x) * 2) + 1)] = (p2[((((((int)blockIdx.x) & 15) * 512) + (((int)threadIdx.x) * 2)) + 1)] * ((half)(p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 1)] * p1[(((int)blockIdx.x) >> 4)])));\n  T_multiply_5[((((int)threadIdx.x) * 2) + 257)] = (p2[((((((int)blockIdx.x) & 15) * 512) + (((int)threadIdx.x) * 2)) + 257)] * ((half)(p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 257)] * p1[(((int)blockIdx.x) >> 4)])));\n  __syncthreads();\n}\n\n__device__ void Group15_1_reshape_cast_cast_reshape_24(half* __restrict__ p0, int8_t* __restrict__ T_reshape_4, char* shared) {\n  half* p0_shared = (half*)p0;\n  T_reshape_4[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4))] = ((signed char)((float)p0_shared[(((int)threadIdx.x) * 4)]));\n  T_reshape_4[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 1)] = ((signed char)((float)p0_shared[((((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 1) & 8191) - ((((int)blockIdx.x) & 15) * 512))]));\n  T_reshape_4[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 2)] = ((signed char)((float)p0_shared[((((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 2) & 8191) - ((((int)blockIdx.x) & 15) * 512))]));\n  T_reshape_4[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 3)] = ((signed char)((float)p0_shared[((((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 3) & 8191) - ((((int)blockIdx.x) & 15) * 512))]));\n}\n\n__global__ void __launch_bounds__(128) Group15(float* input0, float* input1, half* input2, int8_t* output0) {\n  __shared__ char shared[1024];\n  Group15_0_multiply_cast_multiply_23(input0, input1, input2, (half*)(shared+0), shared+0);\n  Group15_1_reshape_cast_cast_reshape_24((half*)(shared+0), output0, shared+1024);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      65536,
      1,
      1
    ],
    "latency": 0.11263999342918396,
    "name": "Group15",
    "gain": 0.08309334516525269
  },
  {
    "nodes": [
      25,
      26
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_25",
      "reshape_26"
    ],
    "group_id": 16,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_25",
        25,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_25",
        25,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_26",
        26,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group16(int8_t* __restrict__ input0, int8_t* __restrict__ input1, half* __restrict__ output0) {\n  \n  int mediate1_shared_warp[112];\n  __shared__ signed char input0_shared[8192];\n  __shared__ signed char mediate0_shared[7168];\n  signed char input1_local[1];\n  signed char mediate0_local[8];\n  signed char input0_shared_warp[32];\n  signed char mediate0_shared_warp[112];\n  __shared__ int mediate1_shared[1792];\n\n  const int MAX_BLOCK_N = 10;\n  const auto baseBlockIdx = blockIdx.x + gridDim.x *blockIdx.y;\n  const auto totalPanel = (gridDim.x * gridDim.y +MAX_BLOCK_N * gridDim.x - 1) / (MAX_BLOCK_N * gridDim.x);\n  const auto totalBlock = gridDim.x * gridDim.y;\n  const auto panelIdx = baseBlockIdx / (MAX_BLOCK_N *gridDim.x);\n  const auto strideLd = panelIdx + 1 < totalPanel ?MAX_BLOCK_N : (totalBlock - panelIdx * (MAX_BLOCK_N *gridDim.x)) / gridDim.x;\n  const auto bx = (panelIdx & 1) ? gridDim.x -(baseBlockIdx - panelIdx * MAX_BLOCK_N * gridDim.x) /strideLd - 1 : (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) / strideLd;\n  const auto by = (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) % strideLd + panelIdx * MAX_BLOCK_N;\n  const auto bz = blockIdx.z;\n  const dim3 blockIdx(bx, by, bz);\n  \n  for (int i0_2_init = 0; i0_2_init < 2; ++i0_2_init) {\n    for (int i1_2_init = 0; i1_2_init < 7; ++i1_2_init) {\n      for (int i = 0; i < 8; ++i) {\nmediate1_shared_warp[((i0_2_init * 56) + (i1_2_init * 8)) + i] = 0.0;}\n;\n    }\n  }\n  for (int k_0 = 0; k_0 < 128; ++k_0) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_ax2_ax3_0_fused_0 = 0; ax0_ax1_ax2_ax3_0_fused_0 < 4; ++ax0_ax1_ax2_ax3_0_fused_0) {\n      *(int4*)(input0_shared + (((ax0_ax1_ax2_ax3_0_fused_0 * 2048) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 16))) = *(int4*)(input0 + (((((((((int)blockIdx.y) * 1048576) + (ax0_ax1_ax2_ax3_0_fused_0 * 262144)) + ((((int)threadIdx.y) >> 1) * 131072)) + (k_0 * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) & 15) * 32)) + ((((int)threadIdx.x) >> 4) * 16)));\n    }\n    for (int ax0_ax1_ax2_ax3_0_fused_0_1 = 0; ax0_ax1_ax2_ax3_0_fused_0_1 < 7; ++ax0_ax1_ax2_ax3_0_fused_0_1) {\n      input1_local[0] = input1[(((((((int)blockIdx.x) * 114688) + (ax0_ax1_ax2_ax3_0_fused_0_1 * 16384)) + (k_0 * 128)) + (((int)threadIdx.y) * 32)) + ((int)threadIdx.x))];\n      for (int ax0 = 0; ax0 < 8; ++ax0) {\n        mediate0_local[ax0] = ((input1_local[0] >> ((signed char)ax0)) & (signed char)1);\n      }\n      *(int2*)(mediate0_shared + (((ax0_ax1_ax2_ax3_0_fused_0_1 * 1024) + (((int)threadIdx.y) * 256)) + (((int)threadIdx.x) * 8))) = *(int2*)(mediate0_local + 0);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 2; ++k_1) {\n      for (int ax0_1 = 0; ax0_1 < 2; ++ax0_1) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(input0_shared[(((((int)threadIdx.y) * 2048) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(input0_shared[(((((int)threadIdx.y) * 2048) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[0]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[1]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[2]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int ax0_2 = 0; ax0_2 < 7; ++ax0_2) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(mediate0_shared[((ax0_2 * 1024) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(mediate0_shared[((ax0_2 * 1024) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[0]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[1]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[2]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int i0_2 = 0; i0_2 < 2; ++i0_2) {\n        for (int i1_2 = 0; i1_2 < 7; ++i1_2) {\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[0]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[1]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[2]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[3])\n      : \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(mediate0_shared_warp + (i1_2 * 16)))[0]), \"r\"(((unsigned *)(mediate0_shared_warp + (i1_2 * 16)))[1]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[0]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[1]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[2]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[3]));\n  }\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[0]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[1]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[2]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[3])\n      : \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(mediate0_shared_warp + ((i1_2 * 16) + 8)))[0]), \"r\"(((unsigned *)(mediate0_shared_warp + ((i1_2 * 16) + 8)))[1]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[0]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[1]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[2]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[3]));\n  }\n        }\n      }\n    }\n  }\n  for (int ax0_3 = 0; ax0_3 < 2; ++ax0_3) {\n    for (int ax1 = 0; ax1 < 7; ++ax1) {\n      __syncthreads();\n      for (int local_id = 0; local_id < 8; ++local_id) {\n(&(mediate1_shared[(((int)threadIdx.y) * 512)]))[((((((local_id % 4) / 2) * 8) + (threadIdx.x / 4)) * 16) + ((((local_id / 4) * 8) + ((threadIdx.x % 4) * 2)) + (local_id % 2)))] = mediate1_shared_warp[((ax0_3 * 56) + (ax1 * 8)) + local_id];\n}\n;\n      __syncthreads();\n      #pragma unroll\n      for (int ax0_ax1_ax2_ax3_fused_0 = 0; ax0_ax1_ax2_ax3_fused_0 < 1; ++ax0_ax1_ax2_ax3_fused_0) {\n        uint4 __1;\n        longlong4 __2 = *(longlong4*)(mediate1_shared + ((((int)threadIdx.y) * 512) + (((int)threadIdx.x) * 8)));\n        ((half2*)(&(__1.x)))->x = (half)(((int2*)(&(__2.x)))->x);\n        ((half2*)(&(__1.x)))->y = (half)(((int2*)(&(__2.x)))->y);\n        ((half2*)(&(__1.y)))->x = (half)(((int2*)(&(__2.y)))->x);\n        ((half2*)(&(__1.y)))->y = (half)(((int2*)(&(__2.y)))->y);\n        ((half2*)(&(__1.z)))->x = (half)(((int2*)(&(__2.z)))->x);\n        ((half2*)(&(__1.z)))->y = (half)(((int2*)(&(__2.z)))->y);\n        ((half2*)(&(__1.w)))->x = (half)(((int2*)(&(__2.w)))->x);\n        ((half2*)(&(__1.w)))->y = (half)(((int2*)(&(__2.w)))->y);\n        *(uint4*)(output0 + ((((((((int)blockIdx.y) * 3670016) + (((int)threadIdx.y) * 917504)) + (ax0_3 * 458752)) + (((int)blockIdx.x) * 1792)) + (ax1 * 256)) + (((int)threadIdx.x) * 8))) = __1;\n      }\n    }\n  }\n}\n\n",
    "block_size": [
      32,
      4,
      1
    ],
    "grid_size": [
      256,
      32,
      1
    ],
    "latency": 5.209497451782227,
    "name": "Group16",
    "gain": 0.0008192062377929688
  },
  {
    "nodes": [
      27
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_27"
    ],
    "group_id": 17,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_27",
        27,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_27",
        27,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_perfect_quant_linear_cast_27",
        27,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group17(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int T_perfect_quant_linear_shared_warp[112];\n  __shared__ signed char p0_shared[8192];\n  __shared__ signed char B_decode_shared[7168];\n  signed char p1_local[1];\n  signed char B_decode_local[8];\n  signed char p0_shared_warp[32];\n  signed char B_decode_shared_warp[112];\n  __shared__ int T_perfect_quant_linear_shared[1792];\n\n  const int MAX_BLOCK_N = 10;\n  const auto baseBlockIdx = blockIdx.x + gridDim.x *blockIdx.y;\n  const auto totalPanel = (gridDim.x * gridDim.y +MAX_BLOCK_N * gridDim.x - 1) / (MAX_BLOCK_N * gridDim.x);\n  const auto totalBlock = gridDim.x * gridDim.y;\n  const auto panelIdx = baseBlockIdx / (MAX_BLOCK_N *gridDim.x);\n  const auto strideLd = panelIdx + 1 < totalPanel ?MAX_BLOCK_N : (totalBlock - panelIdx * (MAX_BLOCK_N *gridDim.x)) / gridDim.x;\n  const auto bx = (panelIdx & 1) ? gridDim.x -(baseBlockIdx - panelIdx * MAX_BLOCK_N * gridDim.x) /strideLd - 1 : (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) / strideLd;\n  const auto by = (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) % strideLd + panelIdx * MAX_BLOCK_N;\n  const auto bz = blockIdx.z;\n  const dim3 blockIdx(bx, by, bz);\n  \n  for (int i0_2_init = 0; i0_2_init < 2; ++i0_2_init) {\n    for (int i1_2_init = 0; i1_2_init < 7; ++i1_2_init) {\n      for (int i = 0; i < 8; ++i) {\nT_perfect_quant_linear_shared_warp[((i0_2_init * 56) + (i1_2_init * 8)) + i] = 0.0;}\n;\n    }\n  }\n  for (int k_0 = 0; k_0 < 128; ++k_0) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_ax2_ax3_0_fused_0 = 0; ax0_ax1_ax2_ax3_0_fused_0 < 4; ++ax0_ax1_ax2_ax3_0_fused_0) {\n      *(int4*)(p0_shared + (((ax0_ax1_ax2_ax3_0_fused_0 * 2048) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.x) * 16))) = *(int4*)(p0 + (((((((((int)blockIdx.y) * 1048576) + (ax0_ax1_ax2_ax3_0_fused_0 * 262144)) + ((((int)threadIdx.y) >> 1) * 131072)) + (k_0 * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) & 15) * 32)) + ((((int)threadIdx.x) >> 4) * 16)));\n    }\n    for (int ax0_ax1_ax2_ax3_0_fused_0_1 = 0; ax0_ax1_ax2_ax3_0_fused_0_1 < 7; ++ax0_ax1_ax2_ax3_0_fused_0_1) {\n      p1_local[0] = p1[(((((((int)blockIdx.x) * 114688) + (ax0_ax1_ax2_ax3_0_fused_0_1 * 16384)) + (k_0 * 128)) + (((int)threadIdx.y) * 32)) + ((int)threadIdx.x))];\n      for (int ax0 = 0; ax0 < 8; ++ax0) {\n        B_decode_local[ax0] = ((p1_local[0] >> ((signed char)ax0)) & (signed char)1);\n      }\n      *(int2*)(B_decode_shared + (((ax0_ax1_ax2_ax3_0_fused_0_1 * 1024) + (((int)threadIdx.y) * 256)) + (((int)threadIdx.x) * 8))) = *(int2*)(B_decode_local + 0);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 2; ++k_1) {\n      for (int ax0_1 = 0; ax0_1 < 2; ++ax0_1) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(p0_shared[(((((int)threadIdx.y) * 2048) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(p0_shared[(((((int)threadIdx.y) * 2048) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(p0_shared_warp + (ax0_1 * 16)))[0]), \"=r\"(((unsigned *)(p0_shared_warp + (ax0_1 * 16)))[1]), \"=r\"(((unsigned *)(p0_shared_warp + (ax0_1 * 16)))[2]), \"=r\"(((unsigned *)(p0_shared_warp + (ax0_1 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int ax0_2 = 0; ax0_2 < 7; ++ax0_2) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(B_decode_shared[((ax0_2 * 1024) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(B_decode_shared[((ax0_2 * 1024) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(B_decode_shared_warp + (ax0_2 * 16)))[0]), \"=r\"(((unsigned *)(B_decode_shared_warp + (ax0_2 * 16)))[1]), \"=r\"(((unsigned *)(B_decode_shared_warp + (ax0_2 * 16)))[2]), \"=r\"(((unsigned *)(B_decode_shared_warp + (ax0_2 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int i0_2 = 0; i0_2 < 2; ++i0_2) {\n        for (int i1_2 = 0; i1_2 < 7; ++i1_2) {\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[0]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[1]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[2]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[3])\n      : \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(B_decode_shared_warp + (i1_2 * 16)))[0]), \"r\"(((unsigned *)(B_decode_shared_warp + (i1_2 * 16)))[1]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[0]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[1]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[2]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + ((i0_2 * 56) + (i1_2 * 8))))[3]));\n  }\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[0]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[1]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[2]), \"=r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[3])\n      : \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(p0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(B_decode_shared_warp + ((i1_2 * 16) + 8)))[0]), \"r\"(((unsigned *)(B_decode_shared_warp + ((i1_2 * 16) + 8)))[1]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[0]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[1]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[2]), \"r\"(((int *)(T_perfect_quant_linear_shared_warp + (((i0_2 * 56) + (i1_2 * 8)) + 4)))[3]));\n  }\n        }\n      }\n    }\n  }\n  for (int ax0_3 = 0; ax0_3 < 2; ++ax0_3) {\n    for (int ax1 = 0; ax1 < 7; ++ax1) {\n      __syncthreads();\n      for (int local_id = 0; local_id < 8; ++local_id) {\n(&(T_perfect_quant_linear_shared[(((int)threadIdx.y) * 512)]))[((((((local_id % 4) / 2) * 8) + (threadIdx.x / 4)) * 16) + ((((local_id / 4) * 8) + ((threadIdx.x % 4) * 2)) + (local_id % 2)))] = T_perfect_quant_linear_shared_warp[((ax0_3 * 56) + (ax1 * 8)) + local_id];\n}\n;\n      __syncthreads();\n      #pragma unroll\n      for (int ax0_ax1_ax2_ax3_fused_0 = 0; ax0_ax1_ax2_ax3_fused_0 < 1; ++ax0_ax1_ax2_ax3_fused_0) {\n        uint4 __1;\n        longlong4 __2 = *(longlong4*)(T_perfect_quant_linear_shared + ((((int)threadIdx.y) * 512) + (((int)threadIdx.x) * 8)));\n        ((half2*)(&(__1.x)))->x = (half)(((int2*)(&(__2.x)))->x);\n        ((half2*)(&(__1.x)))->y = (half)(((int2*)(&(__2.x)))->y);\n        ((half2*)(&(__1.y)))->x = (half)(((int2*)(&(__2.y)))->x);\n        ((half2*)(&(__1.y)))->y = (half)(((int2*)(&(__2.y)))->y);\n        ((half2*)(&(__1.z)))->x = (half)(((int2*)(&(__2.z)))->x);\n        ((half2*)(&(__1.z)))->y = (half)(((int2*)(&(__2.z)))->y);\n        ((half2*)(&(__1.w)))->x = (half)(((int2*)(&(__2.w)))->x);\n        ((half2*)(&(__1.w)))->y = (half)(((int2*)(&(__2.w)))->y);\n        *(uint4*)(T_cast + ((((((((int)blockIdx.y) * 3670016) + (((int)threadIdx.y) * 917504)) + (ax0_3 * 458752)) + (((int)blockIdx.x) * 1792)) + (ax1 * 256)) + (((int)threadIdx.x) * 8))) = __1;\n      }\n    }\n  }\n}\n\n",
    "block_size": [
      32,
      4,
      1
    ],
    "grid_size": [
      256,
      32,
      1
    ],
    "latency": 5.2103166580200195,
    "name": "Group17",
    "gain": 0
  },
  {
    "nodes": [
      28
    ],
    "node_names": [
      "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28"
    ],
    "group_id": 18,
    "input_desc": [
      [
        "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28",
        28,
        0
      ],
      [
        "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28",
        28,
        1
      ]
    ],
    "output_desc": [
      [
        "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28",
        28,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group18(half* __restrict__ p0, half* __restrict__ p1, int8_t* __restrict__ T_reshape_9) {\n  \n  T_reshape_9[(((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4))] = ((signed char)((float)((p0[(((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4))] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4))]))))) * p1[(((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4))])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 128)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 128)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 128)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 128)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 256)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 256)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 256)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 256)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 384)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 384)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 384)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 384)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 1)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 1)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 1)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 1)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 129)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 129)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 129)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 129)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 257)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 257)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 257)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 257)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 385)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 385)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 385)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 385)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 2)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 2)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 2)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 2)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 130)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 130)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 130)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 130)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 258)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 258)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 258)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 258)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 386)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 386)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 386)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 386)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 3)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 3)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 3)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 3)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 131)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 131)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 131)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 131)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 259)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 259)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 259)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 259)])));\n  T_reshape_9[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 387)] = ((signed char)((float)((p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 387)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 387)]))))) * p1[((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)threadIdx.x) & 31) * 4)) + 387)])));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      57344,
      1,
      1
    ],
    "latency": 0.3740159869194031,
    "name": "Group18",
    "gain": 0
  },
  {
    "nodes": [
      29,
      30
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_29",
      "reshape_add_30"
    ],
    "group_id": 19,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_29",
        29,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_29",
        29,
        1
      ],
      [
        "reshape_add_30",
        30,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_add_30",
        30,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group19(int8_t* __restrict__ input0, int8_t* __restrict__ input1, half* __restrict__ input2, half* __restrict__ output0) {\n  \n  int mediate1_shared_warp[128];\n  __shared__ signed char input0_shared[8192];\n  __shared__ signed char mediate0_shared[8192];\n  signed char input1_local[1];\n  signed char mediate0_local[8];\n  signed char input0_shared_warp[64];\n  signed char mediate0_shared_warp[64];\n  __shared__ int mediate1_shared[6400];\n\n  const int MAX_BLOCK_N = 10;\n  const auto baseBlockIdx = blockIdx.x + gridDim.x *blockIdx.y;\n  const auto totalPanel = (gridDim.x * gridDim.y +MAX_BLOCK_N * gridDim.x - 1) / (MAX_BLOCK_N * gridDim.x);\n  const auto totalBlock = gridDim.x * gridDim.y;\n  const auto panelIdx = baseBlockIdx / (MAX_BLOCK_N *gridDim.x);\n  const auto strideLd = panelIdx + 1 < totalPanel ?MAX_BLOCK_N : (totalBlock - panelIdx * (MAX_BLOCK_N *gridDim.x)) / gridDim.x;\n  const auto bx = (panelIdx & 1) ? gridDim.x -(baseBlockIdx - panelIdx * MAX_BLOCK_N * gridDim.x) /strideLd - 1 : (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) / strideLd;\n  const auto by = (baseBlockIdx - panelIdx * MAX_BLOCK_N *gridDim.x) % strideLd + panelIdx * MAX_BLOCK_N;\n  const auto bz = blockIdx.z;\n  const dim3 blockIdx(bx, by, bz);\n  \n  for (int i0_2_init = 0; i0_2_init < 4; ++i0_2_init) {\n    for (int i1_2_init = 0; i1_2_init < 4; ++i1_2_init) {\n      for (int i = 0; i < 8; ++i) {\nmediate1_shared_warp[((i0_2_init * 32) + (i1_2_init * 8)) + i] = 0.0;}\n;\n    }\n  }\n  for (int k_0 = 0; k_0 < 448; ++k_0) {\n    __syncthreads();\n    #pragma unroll\n    for (int ax0_ax1_ax2_ax3_0_fused_0 = 0; ax0_ax1_ax2_ax3_0_fused_0 < 4; ++ax0_ax1_ax2_ax3_0_fused_0) {\n      *(int4*)(input0_shared + ((((ax0_ax1_ax2_ax3_0_fused_0 * 2048) + (((int)threadIdx.y) * 1024)) + (((int)threadIdx.z) * 512)) + (((int)threadIdx.x) * 16))) = *(int4*)(input0 + (((((((((int)blockIdx.y) * 3670016) + (ax0_ax1_ax2_ax3_0_fused_0 * 917504)) + (((int)threadIdx.y) * 458752)) + (k_0 * 1024)) + (((int)threadIdx.z) * 512)) + ((((int)threadIdx.x) & 15) * 32)) + ((((int)threadIdx.x) >> 4) * 16)));\n    }\n    for (int ax0_ax1_ax2_ax3_0_fused_0_1 = 0; ax0_ax1_ax2_ax3_0_fused_0_1 < 8; ++ax0_ax1_ax2_ax3_0_fused_0_1) {\n      input1_local[0] = input1[((((((((int)blockIdx.x) * 458752) + (ax0_ax1_ax2_ax3_0_fused_0_1 * 57344)) + (k_0 * 128)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.z) * 32)) + ((int)threadIdx.x))];\n      for (int ax0 = 0; ax0 < 8; ++ax0) {\n        mediate0_local[ax0] = ((input1_local[0] >> ((signed char)ax0)) & (signed char)1);\n      }\n      *(int2*)(mediate0_shared + ((((ax0_ax1_ax2_ax3_0_fused_0_1 * 1024) + (((int)threadIdx.y) * 512)) + (((int)threadIdx.z) * 256)) + (((int)threadIdx.x) * 8))) = *(int2*)(mediate0_local + 0);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 2; ++k_1) {\n      for (int ax0_1 = 0; ax0_1 < 4; ++ax0_1) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(input0_shared[(((((int)threadIdx.y) * 4096) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(input0_shared[(((((int)threadIdx.y) * 4096) + (ax0_1 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[0]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[1]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[2]), \"=r\"(((unsigned *)(input0_shared_warp + (ax0_1 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int ax0_2 = 0; ax0_2 < 4; ++ax0_2) {\n\n  {\n    unsigned int addr;\n#if TVM_ENBALE_EFFICIENT_SMEM_PTR_CAST\n    addr = static_cast<unsigned int>(__cvta_generic_to_shared((void *)((&(mediate0_shared[(((((int)threadIdx.z) * 4096) + (ax0_2 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16))));\n#else\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)((&(mediate0_shared[(((((int)threadIdx.z) * 4096) + (ax0_2 * 1024)) + (k_1 * 512))])) + (((int)threadIdx.x) * 16)))\n    );\n#endif\n    __asm__ __volatile__(\n      \"ldmatrix.sync.aligned.m8n8.x4.shared.b16\"\n      \"{%0, %1, %2, %3}, [%4];\\n\"\n      : \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[0]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[1]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[2]), \"=r\"(((unsigned *)(mediate0_shared_warp + (ax0_2 * 16)))[3])\n      : \"r\"(addr)\n    );\n  }\n      }\n      for (int i0_2 = 0; i0_2 < 4; ++i0_2) {\n        for (int i1_2 = 0; i1_2 < 4; ++i1_2) {\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[0]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[1]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[2]), \"=r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[3])\n      : \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(mediate0_shared_warp + (i1_2 * 16)))[0]), \"r\"(((unsigned *)(mediate0_shared_warp + (i1_2 * 16)))[1]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[0]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[1]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[2]), \"r\"(((int *)(mediate1_shared_warp + ((i0_2 * 32) + (i1_2 * 8))))[3]));\n  }\n\n  {\n    __asm__ __volatile__(\n      \"mma.sync.aligned.m16n8k32.row.col.s32.s8.s8.s32\"\n      \"{%0, %1, %2, %3}, {%4, %5, %6, %7}, {%8, %9}, {%10, %11, %12, %13};\\n\"\n      :  \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[0]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[1]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[2]), \"=r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[3])\n      : \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[0]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[1]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[2]), \"r\"(((unsigned *)(input0_shared_warp + (i0_2 * 16)))[3]), \"r\"(((unsigned *)(mediate0_shared_warp + ((i1_2 * 16) + 8)))[0]), \"r\"(((unsigned *)(mediate0_shared_warp + ((i1_2 * 16) + 8)))[1]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[0]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[1]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[2]), \"r\"(((int *)(mediate1_shared_warp + (((i0_2 * 32) + (i1_2 * 8)) + 4)))[3]));\n  }\n        }\n      }\n    }\n  }\n  for (int ax0_3 = 0; ax0_3 < 4; ++ax0_3) {\n    for (int ax1 = 0; ax1 < 4; ++ax1) {\n      __syncthreads();\n      for (int local_id = 0; local_id < 8; ++local_id) {\n(&(mediate1_shared[((((int)threadIdx.y) * 5120) + (((int)threadIdx.z) * 1024))]))[((((((local_id % 4) / 2) * 8) + (threadIdx.x / 4)) * 16) + ((((local_id / 4) * 8) + ((threadIdx.x % 4) * 2)) + (local_id % 2)))] = mediate1_shared_warp[((ax0_3 * 32) + (ax1 * 8)) + local_id];\n}\n;\n      __syncthreads();\n      #pragma unroll\n      for (int ax0_ax1_ax2_ax3_fused_0 = 0; ax0_ax1_ax2_ax3_fused_0 < 1; ++ax0_ax1_ax2_ax3_fused_0) {\n        uint4 __1;\n          uint4 __2 = *(uint4*)(input2 + (((((((((int)blockIdx.y) * 1048576) + (((int)threadIdx.y) * 524288)) + (ax0_3 * 131072)) + (((int)blockIdx.x) * 2048)) + (((int)threadIdx.z) * 1024)) + (ax1 * 256)) + (((int)threadIdx.x) * 8)));\n          uint4 __3;\n          longlong4 __4 = *(longlong4*)(mediate1_shared + (((((int)threadIdx.y) * 5120) + (((int)threadIdx.z) * 1024)) + (((int)threadIdx.x) * 8)));\n          ((half2*)(&(__3.x)))->x = (half)(((int2*)(&(__4.x)))->x);\n          ((half2*)(&(__3.x)))->y = (half)(((int2*)(&(__4.x)))->y);\n          ((half2*)(&(__3.y)))->x = (half)(((int2*)(&(__4.y)))->x);\n          ((half2*)(&(__3.y)))->y = (half)(((int2*)(&(__4.y)))->y);\n          ((half2*)(&(__3.z)))->x = (half)(((int2*)(&(__4.z)))->x);\n          ((half2*)(&(__3.z)))->y = (half)(((int2*)(&(__4.z)))->y);\n          ((half2*)(&(__3.w)))->x = (half)(((int2*)(&(__4.w)))->x);\n          ((half2*)(&(__3.w)))->y = (half)(((int2*)(&(__4.w)))->y);\n          ((half2*)(&(__1.x)))->x = (((half2*)(&(__2.x)))->x+((half2*)(&(__3.x)))->x);\n          ((half2*)(&(__1.x)))->y = (((half2*)(&(__2.x)))->y+((half2*)(&(__3.x)))->y);\n          ((half2*)(&(__1.y)))->x = (((half2*)(&(__2.y)))->x+((half2*)(&(__3.y)))->x);\n          ((half2*)(&(__1.y)))->y = (((half2*)(&(__2.y)))->y+((half2*)(&(__3.y)))->y);\n          ((half2*)(&(__1.z)))->x = (((half2*)(&(__2.z)))->x+((half2*)(&(__3.z)))->x);\n          ((half2*)(&(__1.z)))->y = (((half2*)(&(__2.z)))->y+((half2*)(&(__3.z)))->y);\n          ((half2*)(&(__1.w)))->x = (((half2*)(&(__2.w)))->x+((half2*)(&(__3.w)))->x);\n          ((half2*)(&(__1.w)))->y = (((half2*)(&(__2.w)))->y+((half2*)(&(__3.w)))->y);\n        *(uint4*)(output0 + (((((((((int)blockIdx.y) * 1048576) + (((int)threadIdx.y) * 524288)) + (ax0_3 * 131072)) + (((int)blockIdx.x) * 2048)) + (((int)threadIdx.z) * 1024)) + (ax1 * 256)) + (((int)threadIdx.x) * 8))) = __1;\n      }\n    }\n  }\n}\n\n",
    "block_size": [
      32,
      2,
      2
    ],
    "grid_size": [
      64,
      32,
      1
    ],
    "latency": 6.131097316741943,
    "name": "Group19",
    "gain": 0.11360584199428558
  }
]