[
  [
    27,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2].cast(`float32`);\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 8192]} })  ",
    "Convert",
    [
      [
        26,
        0
      ]
    ]
  ],
  [
    37,
    " - einstein_v2(\" output0[N0, N1] = input0[0] where N0 in 1, N1 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        10,
        0
      ]
    ]
  ],
  [
    45,
    " - einstein_v2(\" output0[N0, N1] = input0[N1] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [8192]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        0,
        0
      ]
    ]
  ],
  [
    28,
    " - einstein_v2(\" output0[N0] = input0[0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        8,
        0
      ]
    ]
  ],
  [
    152,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[N0] where N1 in 4096, N2 in 8192; output0[N0, N1, N2] = input1[N0, N1, N2].call(`pow`, [mediate0[N0, N1, N2]]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096, 8192]} }) ## @:  ",
    "Broadcast_Power",
    [
      [
        28,
        0
      ],
      [
        27,
        0
      ]
    ]
  ],
  [
    151,
    " - einstein_v2(\" mediate0[N0] = input0[0] where N0 in 1;   mediate1[N0, N1] = mediate0[N0] where N1 in 4096; mediate2[N0, N1] +=! input1[N0, N1, N2];output0[N0, N1] = mediate2[N0, N1] / mediate1[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096, 8192]} }) ## @:  ",
    "Sum_Reshape_Broadcast_Divide",
    [
      [
        32,
        0
      ],
      [
        152,
        0
      ]
    ]
  ],
  [
    154,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[N0, N2] where N1 in 4096;  mediate1[N0, N1, N2] = input1[N0, N2] where N1 in 4096;  mediate2[N0, N1, N2] = input2[0, N1] where N0 in 1, N2 in 1;   mediate3[N0, N1, N2] = mediate2[N0, N1, N2] + mediate1[N0, N1, N2]; mediate4[N0, N1, N2] = mediate3[N0, N1, N2].call(`sqrt`); mediate5[N0, N1] = mediate4[0, N1, 0] where N0 in 1;   mediate6[N0, N1, N2] = mediate5[N0, N1] where N2 in 8192; mediate7[N0, N1, N2] = input3[N0, N1, N2] / mediate6[N0, N1, N2];mediate8[N0, N1, N2] = mediate7[N0, N1, N2].cast(`float16`);output0[N0, N1, N2] = mediate0[N0, N1, N2] * mediate8[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 8192]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 1]} ,  \"input2\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} ,  \"input3\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096, 8192]} }) ## @:  ",
    "Reshape_Broadcast_Add_Sqrt_Reshape_Broadcast_Divide_Convert_Broadcast_Multiply",
    [
      [
        45,
        0
      ],
      [
        37,
        0
      ],
      [
        151,
        0
      ],
      [
        27,
        0
      ]
    ]
  ],
  [
    92,
    " - einstein_v2(\" output0[S0, N, M] +=! input0[S0, N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 1024]} }) ## @: tensorCoreConfig=(1, 2) ",
    "Dot",
    [
      [
        154,
        0
      ],
      [
        3,
        0
      ]
    ]
  ],
  [
    148,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[0, N1, ((N2) * 128 + N3)] where N0 in 1, N2 in 8, N3 in 128;   mediate1[N0, N2, N1, N3] = mediate0[N0, N1, N2, N3] ;  mediate2[N0, N1, N2, N3, N4] = mediate1[0, N1, N3, N4] where N0 in 1, N2 in 1;   mediate3[N0, N1, N2, N3] = mediate2[0, N1, 0, N2, N3] where N0 in 1;   mediate4[N0, N1, N2, N3, N4] = mediate3[N0, N1, N3, N4] where N2 in 8;  mediate5[N0, N1, N2, N3] = mediate4[0, N1 / 8 % 8, N1 / 1 % 8, N2, N3] where N0 in 1, N1 in 64;   mediate6[N0, N1, N2, N3] = mediate5[0, N1, N2, N3] where N0 in 1;   output0[N0, N1, N2, N3] = mediate6[N0, N1, N2, N3] ;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 1024]} }) ## @:  ",
    "Reshape_Reshape_Reshape_Reshape_Broadcast_Reshape_Reshape_Broadcast",
    [
      [
        92,
        0
      ]
    ]
  ],
  [
    48,
    " - einstein_v2(\" output0[S0, N, M] +=! input0[S0, N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 1024]} }) ## @: tensorCoreConfig=(1, 2) ",
    "Dot",
    [
      [
        154,
        0
      ],
      [
        2,
        0
      ]
    ]
  ],
  [
    157,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[0, 0, N1, N2] where N0 in 1;   mediate1[N0, N1, N2, N3] = mediate0[N0, N2, N3] where N1 in 8;  mediate2[N0, N1, N2, N3] = input1[0, N1, ((N2) * 128 + N3)] where N0 in 1, N2 in 8, N3 in 128;   output0[N0, N2, N1, N3] = mediate2[N0, N1, N2, N3] ; output1[N0, N1, N2, N3] = output0[N0, N1, N2, N3] * mediate1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 4096, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 1024]} }, extra_outputs=[\"output0\", \"output1\"]) ## @:  ",
    "Reshape_Reshape_Reshape_Broadcast_Multiply",
    [
      [
        24,
        0
      ],
      [
        48,
        0
      ]
    ]
  ],
  [
    53,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 + 0] where N0 in 1 , N1 in 8 , N2 in 4096 , N3 in 64; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 8, 4096, 128]} })  ",
    "Slice",
    [
      [
        157,
        0
      ]
    ]
  ],
  [
    159,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 + 64] where N0 in 1 , N1 in 8 , N2 in 4096 , N3 in 64; output0[N0, N1, N2, N3] = -mediate0[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 8, 4096, 128]} }) ## @:  ",
    "Slice_Negative",
    [
      [
        157,
        0
      ]
    ]
  ],
  [
    158,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[0, 0, N1, N2] where N0 in 1;   mediate1[N0, N1, N2, N3] = mediate0[N0, N2, N3] where N1 in 8;  mediate2[N0, N1, N2, N3] =  input1[N0, N1, N2, N3 - 0].when(N3 < 64, input2[N0, N1, N2, N3 - 64])  where N3 in 128; output0[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3] * mediate1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 4096, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 8, 4096, 64]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [1, 8, 4096, 64]} }) ## @:  ",
    "Concat_Reshape_Broadcast_Multiply",
    [
      [
        16,
        0
      ],
      [
        159,
        0
      ],
      [
        53,
        0
      ]
    ]
  ],
  [
    150,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3];  mediate1[N0, N1, N2, N3, N4] = mediate0[0, N1, N3, N4] where N0 in 1, N2 in 1;   mediate2[N0, N1, N2, N3] = mediate1[0, N1, 0, N2, N3] where N0 in 1;   mediate3[N0, N1, N2, N3, N4] = mediate2[N0, N1, N3, N4] where N2 in 8;  mediate4[N0, N1, N2, N3] = mediate3[0, N1 / 8 % 8, N1 / 1 % 8, N2, N3] where N0 in 1, N1 in 64;   mediate5[N0, N1, N3, N2] = mediate4[N0, N1, N2, N3] ;  mediate6[N0, N1, N2, N3] = mediate5[0, N1, N2, N3] where N0 in 1;   output0[N0, N1, N2, N3] = mediate6[N0, N1, N2, N3] ;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 8, 4096, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 8, 4096, 128]} }) ## @:  ",
    "Add_Reshape_Reshape_Broadcast_Reshape_Reshape_Reshape_Broadcast",
    [
      [
        157,
        1
      ],
      [
        158,
        0
      ]
    ]
  ],
  [
    68,
    " - einstein_v2(\" output0[S0, N, M] +=! input0[S0, N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 8192]} }) ## @: tensorCoreConfig=(1, 2) ",
    "Dot",
    [
      [
        154,
        0
      ],
      [
        1,
        0
      ]
    ]
  ],
  [
    147,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[0, 0, N1, N2] where N0 in 1;   mediate1[N0, N1, N2, N3] = mediate0[N0, N2, N3] where N1 in 64;  mediate2[N0, N1, N2, N3] = input1[0, N1, ((N2) * 128 + N3)] where N0 in 1, N2 in 64, N3 in 128;   output0[N0, N2, N1, N3] = mediate2[N0, N1, N2, N3] ; output1[N0, N1, N2, N3] = output0[N0, N1, N2, N3] * mediate1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 4096, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 8192]} }, extra_outputs=[\"output0\", \"output1\"]) ## @:  ",
    "Reshape_Reshape_Reshape_Broadcast_Multiply",
    [
      [
        14,
        0
      ],
      [
        68,
        0
      ]
    ]
  ],
  [
    73,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 + 0] where N0 in 1 , N1 in 64 , N2 in 4096 , N3 in 64; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 128]} })  ",
    "Slice",
    [
      [
        147,
        0
      ]
    ]
  ],
  [
    155,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 + 64] where N0 in 1 , N1 in 64 , N2 in 4096 , N3 in 64; output0[N0, N1, N2, N3] = -mediate0[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 128]} }) ## @:  ",
    "Slice_Negative",
    [
      [
        147,
        0
      ]
    ]
  ],
  [
    153,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[0, 0, N1, N2] where N0 in 1;   mediate1[N0, N1, N2, N3] = mediate0[N0, N2, N3] where N1 in 64;  mediate2[N0, N1, N2, N3] =  input1[N0, N1, N2, N3 - 0].when(N3 < 64, input2[N0, N1, N2, N3 - 64])  where N3 in 128; output0[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3] * mediate1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 4096, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 64]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 64]} }) ## @:  ",
    "Concat_Reshape_Broadcast_Multiply",
    [
      [
        23,
        0
      ],
      [
        155,
        0
      ],
      [
        73,
        0
      ]
    ]
  ],
  [
    156,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3];  mediate1[N0, N1, N2, N3] = mediate0[0, N1, N2, N3] where N0 in 1;   output0[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3] ;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 128]} }) ## @:  ",
    "Add_Reshape_Broadcast",
    [
      [
        147,
        1
      ],
      [
        153,
        0
      ]
    ]
  ],
  [
    149,
    " - einstein_v2(\" mediate0[N0] = input0[0] where N0 in 1;   mediate1[N0, N1, N2, N3] = mediate0[N0] where N1 in 64, N2 in 4096, N3 in 4096;  mediate2[B0, B1, N, M] +=! input1[B0, B1, N, K] * input2[B0, B1, K, M];  mediate3[N0, N1, N2, N3] = mediate2[0, N1, N2, N3] where N0 in 1;  output0[N0, N1, N2, N3] = mediate3[N0, N1, N2, N3] / mediate1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 128]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 128, 4096]} }) ## @:  tensorCoreConfig=(2, 3) ",
    "BatchMatMul_Reshape_Reshape_Broadcast_Divide",
    [
      [
        15,
        0
      ],
      [
        156,
        0
      ],
      [
        150,
        0
      ]
    ]
  ],
  [
    139,
    " - einstein_v2(\" output0[N0, N1, N2] >=! input0[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 4096]} })  ",
    "SoftmaxBasic",
    [
      [
        149,
        0
      ]
    ]
  ],
  [
    140,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = (input0[N0, N1, N2, N3] - input1[N0, N1, N2]).call(`exp`); \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 4096]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096]} })  ",
    "SoftmaxBasic",
    [
      [
        149,
        0
      ],
      [
        139,
        0
      ]
    ]
  ],
  [
    141,
    " - einstein_v2(\" output0[N0, N1, N2] +=! input0[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 4096]} })  ",
    "SoftmaxBasic",
    [
      [
        140,
        0
      ]
    ]
  ],
  [
    161,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] / input1[N0, N1, N2];  mediate1[N0, N1, N2, N3] = mediate0[0, N1, N2, N3] where N0 in 1;   output0[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3] ;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 4096]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096]} }) ## @:  ",
    "Reshape_Broadcast_SoftmaxBasic",
    [
      [
        140,
        0
      ],
      [
        141,
        0
      ]
    ]
  ],
  [
    162,
    " - einstein_v2(\" mediate0[B0, B1, N, M] +=! input0[B0, B1, N, K] * input1[B0, B1, K, M];  output0[N0, N1, N2, N3] = mediate0[0, N1, N2, N3] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 4096]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 128]} }) ## @:  tensorCoreConfig=(2, 3) ",
    "BatchMatMul_Reshape",
    [
      [
        161,
        0
      ],
      [
        148,
        0
      ]
    ]
  ],
  [
    160,
    " - einstein_v2(\" mediate0[N0, N2, N1, N3] = input0[N0, N1, N2, N3] ;  output0[N0, N1, N2] = mediate0[0, N1, N2 / 128 % 64, N2 / 1 % 128] where N0 in 1, N2 in 8192;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 64, 4096, 128]} }) ## @:  ",
    "Reshape_Reshape",
    [
      [
        162,
        0
      ]
    ]
  ],
  [
    163,
    " - einstein_v2(\" mediate0[N0] = input0[0] where N0 in 1;   mediate1[N0, N1, N2] = mediate0[N0] where N1 in 4096, N2 in 8192;  mediate2[S0, N, M] +=! input1[S0, N, K] * input2[K, M];  output0[N0, N1, N2] = input3[N0, N1, N2] + mediate2[N0, N1, N2]; output1[N0, N1, N2] = output0[N0, N1, N2].cast(`float32`);output2[N0, N1, N2] = output1[N0, N1, N2].call(`pow`, [mediate1[N0, N1, N2]]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 8192]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 8192]} ,  \"input3\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 8192]} }, extra_outputs=[\"output0\", \"output1\", \"output2\"]) ## @:  tensorCoreConfig=(1, 2) ",
    "Dot_Add_Convert_Reshape_Broadcast_Power",
    [
      [
        8,
        0
      ],
      [
        160,
        0
      ],
      [
        4,
        0
      ],
      [
        26,
        0
      ]
    ]
  ],
  [
    145,
    " - einstein_v2(\" mediate0[N0] = input0[0] where N0 in 1;   mediate1[N0, N1] = mediate0[N0] where N1 in 4096; mediate2[N0, N1] +=! input1[N0, N1, N2];output0[N0, N1] = mediate2[N0, N1] / mediate1[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096, 8192]} }) ## @:  ",
    "Sum_Reshape_Broadcast_Divide",
    [
      [
        115,
        0
      ],
      [
        163,
        2
      ]
    ]
  ],
  [
    146,
    " - einstein_v2(\" mediate0[N0, N1] = input0[N1] where N0 in 1;   mediate1[N0, N1, N2] = mediate0[N0, N2] where N1 in 4096;  mediate2[N0, N1] = input1[0] where N0 in 1, N1 in 1;   mediate3[N0, N1, N2] = mediate2[N0, N2] where N1 in 4096;  mediate4[N0, N1, N2] = input2[0, N1] where N0 in 1, N2 in 1;   mediate5[N0, N1, N2] = mediate4[N0, N1, N2] + mediate3[N0, N1, N2]; mediate6[N0, N1, N2] = mediate5[N0, N1, N2].call(`sqrt`); mediate7[N0, N1] = mediate6[0, N1, 0] where N0 in 1;   mediate8[N0, N1, N2] = mediate7[N0, N1] where N2 in 8192; mediate9[N0, N1, N2] = input3[N0, N1, N2] / mediate8[N0, N1, N2];mediate10[N0, N1, N2] = mediate9[N0, N1, N2].cast(`float16`);output0[N0, N1, N2] = mediate1[N0, N1, N2] * mediate10[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [8192]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input2\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096]} ,  \"input3\" : { \"dtype\" : \"float32\", \"shape\" : [1, 4096, 8192]} }) ## @:  ",
    "Reshape_Reshape_Broadcast_Add_Sqrt_Reshape_Broadcast_Divide_Convert_Reshape_Broadcast_Multiply",
    [
      [
        0,
        0
      ],
      [
        10,
        0
      ],
      [
        145,
        0
      ],
      [
        163,
        1
      ]
    ]
  ],
  [
    131,
    " - einstein_v2(\" output0[S0, N, M] +=! input0[S0, N, K] * input1[K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 28672]} }) ## @: tensorCoreConfig=(1, 2) ",
    "Dot",
    [
      [
        146,
        0
      ],
      [
        6,
        0
      ]
    ]
  ],
  [
    144,
    " - einstein_v2(\" mediate0[S0, N, M] +=! input0[S0, N, K] * input1[K, M]; mediate1[N0, N1, N2] = const(1).cast(mediate0[N0, N1, N2].dtype()) / (const(1).cast(mediate0[N0, N1, N2].dtype()) + (-mediate0[N0, N1, N2]).call(`exp`));output0[N0, N1, N2] = mediate0[N0, N1, N2] * mediate1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 28672]} }) ## @:  tensorCoreConfig=(1, 2) ",
    "Dot_Sigmoid_Multiply",
    [
      [
        146,
        0
      ],
      [
        5,
        0
      ]
    ]
  ],
  [
    135,
    " - einstein_v2(\"output0[N0, N1, N2] = input0[N0, N1, N2] * input1[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 28672]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 28672]} })  ",
    "Multiply",
    [
      [
        144,
        0
      ],
      [
        131,
        0
      ]
    ]
  ],
  [
    143,
    " - einstein_v2(\" mediate0[S0, N, M] +=! input0[S0, N, K] * input1[K, M];  output0[N0, N1, N2] = input2[N0, N1, N2] + mediate0[N0, N1, N2]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 28672]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [28672, 8192]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [1, 4096, 8192]} }) ## @:  tensorCoreConfig=(1, 2) ",
    "Dot_Add",
    [
      [
        135,
        0
      ],
      [
        7,
        0
      ],
      [
        163,
        0
      ]
    ]
  ],
  [
    138,
    "",
    "Result",
    [
      [
        143,
        0
      ]
    ]
  ]
]