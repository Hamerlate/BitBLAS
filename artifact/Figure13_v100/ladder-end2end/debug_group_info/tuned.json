[
  {
    "nodes": [
      0,
      1
    ],
    "node_names": [
      "cast_multiply_0",
      "mean_add_sqrt_divide_1"
    ],
    "group_id": 0,
    "input_desc": [
      [
        "cast_multiply_0",
        0,
        0
      ]
    ],
    "output_desc": [
      [
        "cast_multiply_0",
        0,
        0
      ],
      [
        "mean_add_sqrt_divide_1",
        1,
        0
      ]
    ],
    "code": "__device__ void Group0_0_cast_multiply_0(half* __restrict__ p0, float* __restrict__ output_proxy, float* __restrict__ output_proxy_1, char* shared) {\n  output_proxy[((int)threadIdx.x)] = ((float)p0[((int)threadIdx.x)]);\n  output_proxy[(((int)threadIdx.x) + 128)] = ((float)p0[(((int)threadIdx.x) + 128)]);\n  output_proxy[(((int)threadIdx.x) + 256)] = ((float)p0[(((int)threadIdx.x) + 256)]);\n  output_proxy[(((int)threadIdx.x) + 384)] = ((float)p0[(((int)threadIdx.x) + 384)]);\n  output_proxy[(((int)threadIdx.x) + 512)] = ((float)p0[(((int)threadIdx.x) + 512)]);\n  output_proxy[(((int)threadIdx.x) + 640)] = ((float)p0[(((int)threadIdx.x) + 640)]);\n  output_proxy[(((int)threadIdx.x) + 768)] = ((float)p0[(((int)threadIdx.x) + 768)]);\n  output_proxy[(((int)threadIdx.x) + 896)] = ((float)p0[(((int)threadIdx.x) + 896)]);\n  output_proxy[(((int)threadIdx.x) + 1024)] = ((float)p0[(((int)threadIdx.x) + 1024)]);\n  output_proxy[(((int)threadIdx.x) + 1152)] = ((float)p0[(((int)threadIdx.x) + 1152)]);\n  output_proxy[(((int)threadIdx.x) + 1280)] = ((float)p0[(((int)threadIdx.x) + 1280)]);\n  output_proxy[(((int)threadIdx.x) + 1408)] = ((float)p0[(((int)threadIdx.x) + 1408)]);\n  output_proxy[(((int)threadIdx.x) + 1536)] = ((float)p0[(((int)threadIdx.x) + 1536)]);\n  output_proxy[(((int)threadIdx.x) + 1664)] = ((float)p0[(((int)threadIdx.x) + 1664)]);\n  output_proxy[(((int)threadIdx.x) + 1792)] = ((float)p0[(((int)threadIdx.x) + 1792)]);\n  output_proxy[(((int)threadIdx.x) + 1920)] = ((float)p0[(((int)threadIdx.x) + 1920)]);\n  output_proxy[(((int)threadIdx.x) + 2048)] = ((float)p0[(((int)threadIdx.x) + 2048)]);\n  output_proxy[(((int)threadIdx.x) + 2176)] = ((float)p0[(((int)threadIdx.x) + 2176)]);\n  output_proxy[(((int)threadIdx.x) + 2304)] = ((float)p0[(((int)threadIdx.x) + 2304)]);\n  output_proxy[(((int)threadIdx.x) + 2432)] = ((float)p0[(((int)threadIdx.x) + 2432)]);\n  output_proxy[(((int)threadIdx.x) + 2560)] = ((float)p0[(((int)threadIdx.x) + 2560)]);\n  output_proxy[(((int)threadIdx.x) + 2688)] = ((float)p0[(((int)threadIdx.x) + 2688)]);\n  output_proxy[(((int)threadIdx.x) + 2816)] = ((float)p0[(((int)threadIdx.x) + 2816)]);\n  output_proxy[(((int)threadIdx.x) + 2944)] = ((float)p0[(((int)threadIdx.x) + 2944)]);\n  output_proxy[(((int)threadIdx.x) + 3072)] = ((float)p0[(((int)threadIdx.x) + 3072)]);\n  output_proxy[(((int)threadIdx.x) + 3200)] = ((float)p0[(((int)threadIdx.x) + 3200)]);\n  output_proxy[(((int)threadIdx.x) + 3328)] = ((float)p0[(((int)threadIdx.x) + 3328)]);\n  output_proxy[(((int)threadIdx.x) + 3456)] = ((float)p0[(((int)threadIdx.x) + 3456)]);\n  output_proxy[(((int)threadIdx.x) + 3584)] = ((float)p0[(((int)threadIdx.x) + 3584)]);\n  output_proxy[(((int)threadIdx.x) + 3712)] = ((float)p0[(((int)threadIdx.x) + 3712)]);\n  output_proxy[(((int)threadIdx.x) + 3840)] = ((float)p0[(((int)threadIdx.x) + 3840)]);\n  output_proxy[(((int)threadIdx.x) + 3968)] = ((float)p0[(((int)threadIdx.x) + 3968)]);\n  output_proxy[(((int)threadIdx.x) + 4096)] = ((float)p0[(((int)threadIdx.x) + 4096)]);\n  output_proxy[(((int)threadIdx.x) + 4224)] = ((float)p0[(((int)threadIdx.x) + 4224)]);\n  output_proxy[(((int)threadIdx.x) + 4352)] = ((float)p0[(((int)threadIdx.x) + 4352)]);\n  output_proxy[(((int)threadIdx.x) + 4480)] = ((float)p0[(((int)threadIdx.x) + 4480)]);\n  output_proxy[(((int)threadIdx.x) + 4608)] = ((float)p0[(((int)threadIdx.x) + 4608)]);\n  output_proxy[(((int)threadIdx.x) + 4736)] = ((float)p0[(((int)threadIdx.x) + 4736)]);\n  output_proxy[(((int)threadIdx.x) + 4864)] = ((float)p0[(((int)threadIdx.x) + 4864)]);\n  output_proxy[(((int)threadIdx.x) + 4992)] = ((float)p0[(((int)threadIdx.x) + 4992)]);\n  output_proxy[(((int)threadIdx.x) + 5120)] = ((float)p0[(((int)threadIdx.x) + 5120)]);\n  output_proxy[(((int)threadIdx.x) + 5248)] = ((float)p0[(((int)threadIdx.x) + 5248)]);\n  output_proxy[(((int)threadIdx.x) + 5376)] = ((float)p0[(((int)threadIdx.x) + 5376)]);\n  output_proxy[(((int)threadIdx.x) + 5504)] = ((float)p0[(((int)threadIdx.x) + 5504)]);\n  output_proxy[(((int)threadIdx.x) + 5632)] = ((float)p0[(((int)threadIdx.x) + 5632)]);\n  output_proxy[(((int)threadIdx.x) + 5760)] = ((float)p0[(((int)threadIdx.x) + 5760)]);\n  output_proxy[(((int)threadIdx.x) + 5888)] = ((float)p0[(((int)threadIdx.x) + 5888)]);\n  output_proxy[(((int)threadIdx.x) + 6016)] = ((float)p0[(((int)threadIdx.x) + 6016)]);\n  output_proxy[(((int)threadIdx.x) + 6144)] = ((float)p0[(((int)threadIdx.x) + 6144)]);\n  output_proxy[(((int)threadIdx.x) + 6272)] = ((float)p0[(((int)threadIdx.x) + 6272)]);\n  output_proxy[(((int)threadIdx.x) + 6400)] = ((float)p0[(((int)threadIdx.x) + 6400)]);\n  output_proxy[(((int)threadIdx.x) + 6528)] = ((float)p0[(((int)threadIdx.x) + 6528)]);\n  output_proxy[(((int)threadIdx.x) + 6656)] = ((float)p0[(((int)threadIdx.x) + 6656)]);\n  output_proxy[(((int)threadIdx.x) + 6784)] = ((float)p0[(((int)threadIdx.x) + 6784)]);\n  output_proxy[(((int)threadIdx.x) + 6912)] = ((float)p0[(((int)threadIdx.x) + 6912)]);\n  output_proxy[(((int)threadIdx.x) + 7040)] = ((float)p0[(((int)threadIdx.x) + 7040)]);\n  output_proxy[(((int)threadIdx.x) + 7168)] = ((float)p0[(((int)threadIdx.x) + 7168)]);\n  output_proxy[(((int)threadIdx.x) + 7296)] = ((float)p0[(((int)threadIdx.x) + 7296)]);\n  output_proxy[(((int)threadIdx.x) + 7424)] = ((float)p0[(((int)threadIdx.x) + 7424)]);\n  output_proxy[(((int)threadIdx.x) + 7552)] = ((float)p0[(((int)threadIdx.x) + 7552)]);\n  output_proxy[(((int)threadIdx.x) + 7680)] = ((float)p0[(((int)threadIdx.x) + 7680)]);\n  output_proxy[(((int)threadIdx.x) + 7808)] = ((float)p0[(((int)threadIdx.x) + 7808)]);\n  output_proxy[(((int)threadIdx.x) + 7936)] = ((float)p0[(((int)threadIdx.x) + 7936)]);\n  output_proxy[(((int)threadIdx.x) + 8064)] = ((float)p0[(((int)threadIdx.x) + 8064)]);\n  __syncthreads();\n  output_proxy_1[((int)threadIdx.x)] = (((float)p0[((int)threadIdx.x)]) * ((float)p0[((int)threadIdx.x)]));\n  output_proxy_1[(((int)threadIdx.x) + 128)] = (((float)p0[(((int)threadIdx.x) + 128)]) * ((float)p0[(((int)threadIdx.x) + 128)]));\n  output_proxy_1[(((int)threadIdx.x) + 256)] = (((float)p0[(((int)threadIdx.x) + 256)]) * ((float)p0[(((int)threadIdx.x) + 256)]));\n  output_proxy_1[(((int)threadIdx.x) + 384)] = (((float)p0[(((int)threadIdx.x) + 384)]) * ((float)p0[(((int)threadIdx.x) + 384)]));\n  output_proxy_1[(((int)threadIdx.x) + 512)] = (((float)p0[(((int)threadIdx.x) + 512)]) * ((float)p0[(((int)threadIdx.x) + 512)]));\n  output_proxy_1[(((int)threadIdx.x) + 640)] = (((float)p0[(((int)threadIdx.x) + 640)]) * ((float)p0[(((int)threadIdx.x) + 640)]));\n  output_proxy_1[(((int)threadIdx.x) + 768)] = (((float)p0[(((int)threadIdx.x) + 768)]) * ((float)p0[(((int)threadIdx.x) + 768)]));\n  output_proxy_1[(((int)threadIdx.x) + 896)] = (((float)p0[(((int)threadIdx.x) + 896)]) * ((float)p0[(((int)threadIdx.x) + 896)]));\n  output_proxy_1[(((int)threadIdx.x) + 1024)] = (((float)p0[(((int)threadIdx.x) + 1024)]) * ((float)p0[(((int)threadIdx.x) + 1024)]));\n  output_proxy_1[(((int)threadIdx.x) + 1152)] = (((float)p0[(((int)threadIdx.x) + 1152)]) * ((float)p0[(((int)threadIdx.x) + 1152)]));\n  output_proxy_1[(((int)threadIdx.x) + 1280)] = (((float)p0[(((int)threadIdx.x) + 1280)]) * ((float)p0[(((int)threadIdx.x) + 1280)]));\n  output_proxy_1[(((int)threadIdx.x) + 1408)] = (((float)p0[(((int)threadIdx.x) + 1408)]) * ((float)p0[(((int)threadIdx.x) + 1408)]));\n  output_proxy_1[(((int)threadIdx.x) + 1536)] = (((float)p0[(((int)threadIdx.x) + 1536)]) * ((float)p0[(((int)threadIdx.x) + 1536)]));\n  output_proxy_1[(((int)threadIdx.x) + 1664)] = (((float)p0[(((int)threadIdx.x) + 1664)]) * ((float)p0[(((int)threadIdx.x) + 1664)]));\n  output_proxy_1[(((int)threadIdx.x) + 1792)] = (((float)p0[(((int)threadIdx.x) + 1792)]) * ((float)p0[(((int)threadIdx.x) + 1792)]));\n  output_proxy_1[(((int)threadIdx.x) + 1920)] = (((float)p0[(((int)threadIdx.x) + 1920)]) * ((float)p0[(((int)threadIdx.x) + 1920)]));\n  output_proxy_1[(((int)threadIdx.x) + 2048)] = (((float)p0[(((int)threadIdx.x) + 2048)]) * ((float)p0[(((int)threadIdx.x) + 2048)]));\n  output_proxy_1[(((int)threadIdx.x) + 2176)] = (((float)p0[(((int)threadIdx.x) + 2176)]) * ((float)p0[(((int)threadIdx.x) + 2176)]));\n  output_proxy_1[(((int)threadIdx.x) + 2304)] = (((float)p0[(((int)threadIdx.x) + 2304)]) * ((float)p0[(((int)threadIdx.x) + 2304)]));\n  output_proxy_1[(((int)threadIdx.x) + 2432)] = (((float)p0[(((int)threadIdx.x) + 2432)]) * ((float)p0[(((int)threadIdx.x) + 2432)]));\n  output_proxy_1[(((int)threadIdx.x) + 2560)] = (((float)p0[(((int)threadIdx.x) + 2560)]) * ((float)p0[(((int)threadIdx.x) + 2560)]));\n  output_proxy_1[(((int)threadIdx.x) + 2688)] = (((float)p0[(((int)threadIdx.x) + 2688)]) * ((float)p0[(((int)threadIdx.x) + 2688)]));\n  output_proxy_1[(((int)threadIdx.x) + 2816)] = (((float)p0[(((int)threadIdx.x) + 2816)]) * ((float)p0[(((int)threadIdx.x) + 2816)]));\n  output_proxy_1[(((int)threadIdx.x) + 2944)] = (((float)p0[(((int)threadIdx.x) + 2944)]) * ((float)p0[(((int)threadIdx.x) + 2944)]));\n  output_proxy_1[(((int)threadIdx.x) + 3072)] = (((float)p0[(((int)threadIdx.x) + 3072)]) * ((float)p0[(((int)threadIdx.x) + 3072)]));\n  output_proxy_1[(((int)threadIdx.x) + 3200)] = (((float)p0[(((int)threadIdx.x) + 3200)]) * ((float)p0[(((int)threadIdx.x) + 3200)]));\n  output_proxy_1[(((int)threadIdx.x) + 3328)] = (((float)p0[(((int)threadIdx.x) + 3328)]) * ((float)p0[(((int)threadIdx.x) + 3328)]));\n  output_proxy_1[(((int)threadIdx.x) + 3456)] = (((float)p0[(((int)threadIdx.x) + 3456)]) * ((float)p0[(((int)threadIdx.x) + 3456)]));\n  output_proxy_1[(((int)threadIdx.x) + 3584)] = (((float)p0[(((int)threadIdx.x) + 3584)]) * ((float)p0[(((int)threadIdx.x) + 3584)]));\n  output_proxy_1[(((int)threadIdx.x) + 3712)] = (((float)p0[(((int)threadIdx.x) + 3712)]) * ((float)p0[(((int)threadIdx.x) + 3712)]));\n  output_proxy_1[(((int)threadIdx.x) + 3840)] = (((float)p0[(((int)threadIdx.x) + 3840)]) * ((float)p0[(((int)threadIdx.x) + 3840)]));\n  output_proxy_1[(((int)threadIdx.x) + 3968)] = (((float)p0[(((int)threadIdx.x) + 3968)]) * ((float)p0[(((int)threadIdx.x) + 3968)]));\n  output_proxy_1[(((int)threadIdx.x) + 4096)] = (((float)p0[(((int)threadIdx.x) + 4096)]) * ((float)p0[(((int)threadIdx.x) + 4096)]));\n  output_proxy_1[(((int)threadIdx.x) + 4224)] = (((float)p0[(((int)threadIdx.x) + 4224)]) * ((float)p0[(((int)threadIdx.x) + 4224)]));\n  output_proxy_1[(((int)threadIdx.x) + 4352)] = (((float)p0[(((int)threadIdx.x) + 4352)]) * ((float)p0[(((int)threadIdx.x) + 4352)]));\n  output_proxy_1[(((int)threadIdx.x) + 4480)] = (((float)p0[(((int)threadIdx.x) + 4480)]) * ((float)p0[(((int)threadIdx.x) + 4480)]));\n  output_proxy_1[(((int)threadIdx.x) + 4608)] = (((float)p0[(((int)threadIdx.x) + 4608)]) * ((float)p0[(((int)threadIdx.x) + 4608)]));\n  output_proxy_1[(((int)threadIdx.x) + 4736)] = (((float)p0[(((int)threadIdx.x) + 4736)]) * ((float)p0[(((int)threadIdx.x) + 4736)]));\n  output_proxy_1[(((int)threadIdx.x) + 4864)] = (((float)p0[(((int)threadIdx.x) + 4864)]) * ((float)p0[(((int)threadIdx.x) + 4864)]));\n  output_proxy_1[(((int)threadIdx.x) + 4992)] = (((float)p0[(((int)threadIdx.x) + 4992)]) * ((float)p0[(((int)threadIdx.x) + 4992)]));\n  output_proxy_1[(((int)threadIdx.x) + 5120)] = (((float)p0[(((int)threadIdx.x) + 5120)]) * ((float)p0[(((int)threadIdx.x) + 5120)]));\n  output_proxy_1[(((int)threadIdx.x) + 5248)] = (((float)p0[(((int)threadIdx.x) + 5248)]) * ((float)p0[(((int)threadIdx.x) + 5248)]));\n  output_proxy_1[(((int)threadIdx.x) + 5376)] = (((float)p0[(((int)threadIdx.x) + 5376)]) * ((float)p0[(((int)threadIdx.x) + 5376)]));\n  output_proxy_1[(((int)threadIdx.x) + 5504)] = (((float)p0[(((int)threadIdx.x) + 5504)]) * ((float)p0[(((int)threadIdx.x) + 5504)]));\n  output_proxy_1[(((int)threadIdx.x) + 5632)] = (((float)p0[(((int)threadIdx.x) + 5632)]) * ((float)p0[(((int)threadIdx.x) + 5632)]));\n  output_proxy_1[(((int)threadIdx.x) + 5760)] = (((float)p0[(((int)threadIdx.x) + 5760)]) * ((float)p0[(((int)threadIdx.x) + 5760)]));\n  output_proxy_1[(((int)threadIdx.x) + 5888)] = (((float)p0[(((int)threadIdx.x) + 5888)]) * ((float)p0[(((int)threadIdx.x) + 5888)]));\n  output_proxy_1[(((int)threadIdx.x) + 6016)] = (((float)p0[(((int)threadIdx.x) + 6016)]) * ((float)p0[(((int)threadIdx.x) + 6016)]));\n  output_proxy_1[(((int)threadIdx.x) + 6144)] = (((float)p0[(((int)threadIdx.x) + 6144)]) * ((float)p0[(((int)threadIdx.x) + 6144)]));\n  output_proxy_1[(((int)threadIdx.x) + 6272)] = (((float)p0[(((int)threadIdx.x) + 6272)]) * ((float)p0[(((int)threadIdx.x) + 6272)]));\n  output_proxy_1[(((int)threadIdx.x) + 6400)] = (((float)p0[(((int)threadIdx.x) + 6400)]) * ((float)p0[(((int)threadIdx.x) + 6400)]));\n  output_proxy_1[(((int)threadIdx.x) + 6528)] = (((float)p0[(((int)threadIdx.x) + 6528)]) * ((float)p0[(((int)threadIdx.x) + 6528)]));\n  output_proxy_1[(((int)threadIdx.x) + 6656)] = (((float)p0[(((int)threadIdx.x) + 6656)]) * ((float)p0[(((int)threadIdx.x) + 6656)]));\n  output_proxy_1[(((int)threadIdx.x) + 6784)] = (((float)p0[(((int)threadIdx.x) + 6784)]) * ((float)p0[(((int)threadIdx.x) + 6784)]));\n  output_proxy_1[(((int)threadIdx.x) + 6912)] = (((float)p0[(((int)threadIdx.x) + 6912)]) * ((float)p0[(((int)threadIdx.x) + 6912)]));\n  output_proxy_1[(((int)threadIdx.x) + 7040)] = (((float)p0[(((int)threadIdx.x) + 7040)]) * ((float)p0[(((int)threadIdx.x) + 7040)]));\n  output_proxy_1[(((int)threadIdx.x) + 7168)] = (((float)p0[(((int)threadIdx.x) + 7168)]) * ((float)p0[(((int)threadIdx.x) + 7168)]));\n  output_proxy_1[(((int)threadIdx.x) + 7296)] = (((float)p0[(((int)threadIdx.x) + 7296)]) * ((float)p0[(((int)threadIdx.x) + 7296)]));\n  output_proxy_1[(((int)threadIdx.x) + 7424)] = (((float)p0[(((int)threadIdx.x) + 7424)]) * ((float)p0[(((int)threadIdx.x) + 7424)]));\n  output_proxy_1[(((int)threadIdx.x) + 7552)] = (((float)p0[(((int)threadIdx.x) + 7552)]) * ((float)p0[(((int)threadIdx.x) + 7552)]));\n  output_proxy_1[(((int)threadIdx.x) + 7680)] = (((float)p0[(((int)threadIdx.x) + 7680)]) * ((float)p0[(((int)threadIdx.x) + 7680)]));\n  output_proxy_1[(((int)threadIdx.x) + 7808)] = (((float)p0[(((int)threadIdx.x) + 7808)]) * ((float)p0[(((int)threadIdx.x) + 7808)]));\n  output_proxy_1[(((int)threadIdx.x) + 7936)] = (((float)p0[(((int)threadIdx.x) + 7936)]) * ((float)p0[(((int)threadIdx.x) + 7936)]));\n  output_proxy_1[(((int)threadIdx.x) + 8064)] = (((float)p0[(((int)threadIdx.x) + 8064)]) * ((float)p0[(((int)threadIdx.x) + 8064)]));\n  __syncthreads();\n}\n\n__device__ void Group0_1_mean_add_sqrt_divide_1(float* __restrict__ p0, float* __restrict__ T_divide_7, char* shared) {\n  float normal_reduce_temp0[1];\n  float* p0_shared = (float*)p0;\n  __shared__ float red_buf0[128];\n  normal_reduce_temp0[0] = 0.000000e+00f;\n  for (int k2_inner_outer = 0; k2_inner_outer < 64; ++k2_inner_outer) {\n    normal_reduce_temp0[0] = (normal_reduce_temp0[0] + p0_shared[((k2_inner_outer * 128) + ((int)threadIdx.x))]);\n  }\n  __syncthreads();\n  ((volatile float*)red_buf0)[((int)threadIdx.x)] = normal_reduce_temp0[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 64)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    float w_16_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_16_0;\n    float w_8_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_8_0;\n    float w_4_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_4_0;\n    float w_2_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_2_0;\n    float w_1_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_1_0;\n  }\n  __syncthreads();\n  T_divide_7[0] = (1.000000e+00f / sqrtf(((((volatile float*)red_buf0)[0] * 1.220703e-04f) + 1.000000e-05f)));\n}\n\n__global__ void __launch_bounds__(128) Group0(half* input0, float* output0, float* output1) {\n  __shared__ char shared[32768];\n  Group0_0_cast_multiply_0(input0, output0, (float*)(shared+0), shared+0);\n  Group0_1_mean_add_sqrt_divide_1((float*)(shared+0), output1, shared+32768);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      1,
      1,
      1
    ],
    "latency": 0.005119999870657921,
    "name": "Group0",
    "gain": 0.002238870831206441
  },
  {
    "nodes": [
      2
    ],
    "node_names": [
      "multiply_cast_multiply_reshape_cast_cast_reshape_2"
    ],
    "group_id": 1,
    "input_desc": [
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        0
      ],
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        1
      ],
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        2
      ]
    ],
    "output_desc": [
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group1(float* __restrict__ p0, float* __restrict__ p1, half* __restrict__ p2, int8_t* __restrict__ T_reshape_9) {\n  \n  T_reshape_9[((((int)blockIdx.x) * 128) + ((int)threadIdx.x))] = ((signed char)((float)(p2[((((int)blockIdx.x) * 128) + ((int)threadIdx.x))] * ((half)(p0[((((int)blockIdx.x) * 128) + ((int)threadIdx.x))] * p1[0])))));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      64,
      1,
      1
    ],
    "latency": 0.0027989333029836416,
    "name": "Group1",
    "gain": 0
  },
  {
    "nodes": [
      3
    ],
    "node_names": [
      "ladder_quant_linear_cast_3"
    ],
    "group_id": 2,
    "input_desc": [
      [
        "ladder_quant_linear_cast_3",
        3,
        0
      ],
      [
        "ladder_quant_linear_cast_3",
        3,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_quant_linear_cast_3",
        3,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group2(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int in_thread_T_quant_linear_local[1];\n  signed char p0_local[16];\n  signed char p1_local[2];\n  signed char B_decode_local[16];\n  __shared__ int red_buf0[128];\n  in_thread_T_quant_linear_local[0] = 0;\n  for (int k_0 = 0; k_0 < 8; ++k_0) {\n    *(int4*)(p0_local + 0) = *(int4*)(p0 + ((k_0 * 1024) + (((int)threadIdx.x) * 16)));\n    *(char2*)(p1_local + 0) = *(char2*)(p1 + ((((((int)blockIdx.x) * 2048) + (((int)threadIdx.y) * 1024)) + (k_0 * 128)) + (((int)threadIdx.x) * 2)));\n    for (int ax1 = 0; ax1 < 16; ++ax1) {\n      B_decode_local[ax1] = ((p1_local[(ax1 >> 3)] >> ((signed char)(ax1 & 7))) & (signed char)1);\n    }\n    for (int k_2_0 = 0; k_2_0 < 4; ++k_2_0) {\n      in_thread_T_quant_linear_local[0] = __dp4a(*(int *)&p0_local[((k_2_0 * 4))],*(int *)&B_decode_local[((k_2_0 * 4))], in_thread_T_quant_linear_local[0]);\n    }\n  }\n  __syncthreads();\n  ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = in_thread_T_quant_linear_local[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    int w_16_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 16)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_16_0;\n    int w_8_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 8)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_8_0;\n    int w_4_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 4)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_4_0;\n    int w_2_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 2)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_2_0;\n    int w_1_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 1)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_1_0;\n  }\n  __syncthreads();\n  T_cast[((((int)blockIdx.x) * 2) + ((int)threadIdx.y))] = ((half)((volatile int*)red_buf0)[(((int)threadIdx.y) * 64)]);\n}\n\n",
    "block_size": [
      64,
      2,
      1
    ],
    "grid_size": [
      4096,
      1,
      1
    ],
    "latency": 0.02943200059235096,
    "name": "Group2",
    "gain": 0
  },
  {
    "nodes": [
      4
    ],
    "node_names": [
      "reshape_reshape_transpose_4"
    ],
    "group_id": 3,
    "input_desc": [
      [
        "reshape_reshape_transpose_4",
        4,
        0
      ]
    ],
    "output_desc": [
      [
        "reshape_reshape_transpose_4",
        4,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group3(half* __restrict__ p0, half* __restrict__ T_transpose) {\n  \n  T_transpose[((((int)blockIdx.x) * 128) + ((int)threadIdx.x))] = p0[((((int)blockIdx.x) * 128) + ((int)threadIdx.x))];\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      64,
      1,
      1
    ],
    "latency": 0.002457600086927414,
    "name": "Group3",
    "gain": 0
  },
  {
    "nodes": [
      5
    ],
    "node_names": [
      "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5"
    ],
    "group_id": 4,
    "input_desc": [
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        0
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        1
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        2
      ]
    ],
    "output_desc": [
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group4(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ p2, half* __restrict__ T_reshape) {\n  \n  T_reshape[(((((((int)blockIdx.x) >> 3) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + (((int)threadIdx.x) & 15))] = ((p0[(((((((int)blockIdx.x) >> 3) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + (((int)threadIdx.x) & 15))] * p1[(((((int)blockIdx.x) & 7) * 16) + (((int)threadIdx.x) & 15))]) + (((4 <= (((int)blockIdx.x) & 7)) ? p0[((((((((int)blockIdx.x) >> 3) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + (((int)threadIdx.x) & 15)) - 64)] : (__float2half_rn(0.000000e+00f) - p0[((((((((int)blockIdx.x) >> 3) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + (((int)threadIdx.x) & 15)) + 64)])) * p2[(((((int)blockIdx.x) & 7) * 16) + (((int)threadIdx.x) & 15))]));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      64,
      1,
      1
    ],
    "latency": 0.002647999906912446,
    "name": "Group4",
    "gain": 0
  },
  {
    "nodes": [
      6
    ],
    "node_names": [
      "ladder_quant_linear_cast_6"
    ],
    "group_id": 5,
    "input_desc": [
      [
        "ladder_quant_linear_cast_6",
        6,
        0
      ],
      [
        "ladder_quant_linear_cast_6",
        6,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_quant_linear_cast_6",
        6,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group5(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int in_thread_T_quant_linear_local[1];\n  signed char p0_local[16];\n  signed char p1_local[2];\n  signed char B_decode_local[16];\n  __shared__ int red_buf0[128];\n  in_thread_T_quant_linear_local[0] = 0;\n  for (int k_0 = 0; k_0 < 8; ++k_0) {\n    *(int4*)(p0_local + 0) = *(int4*)(p0 + ((k_0 * 1024) + (((int)threadIdx.x) * 16)));\n    *(char2*)(p1_local + 0) = *(char2*)(p1 + ((((((int)blockIdx.x) * 2048) + (((int)threadIdx.y) * 1024)) + (k_0 * 128)) + (((int)threadIdx.x) * 2)));\n    for (int ax1 = 0; ax1 < 16; ++ax1) {\n      B_decode_local[ax1] = ((p1_local[(ax1 >> 3)] >> ((signed char)(ax1 & 7))) & (signed char)1);\n    }\n    for (int k_2_0 = 0; k_2_0 < 4; ++k_2_0) {\n      in_thread_T_quant_linear_local[0] = __dp4a(*(int *)&p0_local[((k_2_0 * 4))],*(int *)&B_decode_local[((k_2_0 * 4))], in_thread_T_quant_linear_local[0]);\n    }\n  }\n  __syncthreads();\n  ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = in_thread_T_quant_linear_local[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    int w_16_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 16)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_16_0;\n    int w_8_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 8)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_8_0;\n    int w_4_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 4)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_4_0;\n    int w_2_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 2)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_2_0;\n    int w_1_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 1)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_1_0;\n  }\n  __syncthreads();\n  T_cast[((((int)blockIdx.x) * 2) + ((int)threadIdx.y))] = ((half)((volatile int*)red_buf0)[(((int)threadIdx.y) * 64)]);\n}\n\n",
    "block_size": [
      64,
      2,
      1
    ],
    "grid_size": [
      512,
      1,
      1
    ],
    "latency": 0.007679999805986881,
    "name": "Group5",
    "gain": 0
  },
  {
    "nodes": [
      7
    ],
    "node_names": [
      "reshape_reshape_transpose_7"
    ],
    "group_id": 6,
    "input_desc": [
      [
        "reshape_reshape_transpose_7",
        7,
        0
      ]
    ],
    "output_desc": [
      [
        "reshape_reshape_transpose_7",
        7,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(64) Group6(half* __restrict__ p0, half* __restrict__ T_transpose) {\n  \n  T_transpose[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = p0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))];\n}\n\n",
    "block_size": [
      64,
      1,
      1
    ],
    "grid_size": [
      16,
      1,
      1
    ],
    "latency": 0.002391466638073325,
    "name": "Group6",
    "gain": 0
  },
  {
    "nodes": [
      8,
      9,
      10,
      11,
      12,
      13,
      14
    ],
    "node_names": [
      "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
      "nn_batch_matmul_9",
      "reshape_divide_10",
      "max_11",
      "subtract_exp_12",
      "sum_13",
      "divide_cast_cast_reshape_14"
    ],
    "group_id": 7,
    "input_desc": [
      [
        "nn_batch_matmul_9",
        9,
        0
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
        8,
        0
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
        8,
        1
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
        8,
        2
      ]
    ],
    "output_desc": [
      [
        "divide_cast_cast_reshape_14",
        14,
        0
      ]
    ],
    "code": "__device__ void Group7_0_multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ p2, half* __restrict__ T_transpose_15, char* shared) {\n  __syncthreads();\n  T_transpose_15[(((int)threadIdx.x) * 2)] = ((p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p1[(((int)threadIdx.x) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)]) * p2[(((int)threadIdx.x) * 2)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 16)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p1[((((int)threadIdx.x) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)]) * p2[((((int)threadIdx.x) * 2) + 16)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 32)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p1[((((int)threadIdx.x) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)]) * p2[((((int)threadIdx.x) * 2) + 32)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 48)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p1[((((int)threadIdx.x) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)]) * p2[((((int)threadIdx.x) * 2) + 48)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 64)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)] * p1[((((int)threadIdx.x) * 2) + 64)]) + (p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p2[((((int)threadIdx.x) * 2) + 64)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 80)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)] * p1[((((int)threadIdx.x) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p2[((((int)threadIdx.x) * 2) + 80)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 96)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)] * p1[((((int)threadIdx.x) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p2[((((int)threadIdx.x) * 2) + 96)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 112)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)] * p1[((((int)threadIdx.x) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p2[((((int)threadIdx.x) * 2) + 112)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 128)] = ((p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p1[(((int)threadIdx.x) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)]) * p2[(((int)threadIdx.x) * 2)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 144)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p1[((((int)threadIdx.x) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)]) * p2[((((int)threadIdx.x) * 2) + 16)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 160)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p1[((((int)threadIdx.x) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)]) * p2[((((int)threadIdx.x) * 2) + 32)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 176)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p1[((((int)threadIdx.x) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)]) * p2[((((int)threadIdx.x) * 2) + 48)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 192)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)] * p1[((((int)threadIdx.x) * 2) + 64)]) + (p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p2[((((int)threadIdx.x) * 2) + 64)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 208)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)] * p1[((((int)threadIdx.x) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p2[((((int)threadIdx.x) * 2) + 80)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 224)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)] * p1[((((int)threadIdx.x) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p2[((((int)threadIdx.x) * 2) + 96)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 240)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)] * p1[((((int)threadIdx.x) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p2[((((int)threadIdx.x) * 2) + 112)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 256)] = ((p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p1[(((int)threadIdx.x) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)]) * p2[(((int)threadIdx.x) * 2)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 272)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p1[((((int)threadIdx.x) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)]) * p2[((((int)threadIdx.x) * 2) + 16)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 288)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p1[((((int)threadIdx.x) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)]) * p2[((((int)threadIdx.x) * 2) + 32)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 304)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p1[((((int)threadIdx.x) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)]) * p2[((((int)threadIdx.x) * 2) + 48)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 320)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)] * p1[((((int)threadIdx.x) * 2) + 64)]) + (p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p2[((((int)threadIdx.x) * 2) + 64)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 336)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)] * p1[((((int)threadIdx.x) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p2[((((int)threadIdx.x) * 2) + 80)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 352)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)] * p1[((((int)threadIdx.x) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p2[((((int)threadIdx.x) * 2) + 96)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 368)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)] * p1[((((int)threadIdx.x) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p2[((((int)threadIdx.x) * 2) + 112)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 384)] = ((p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p1[(((int)threadIdx.x) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)]) * p2[(((int)threadIdx.x) * 2)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 400)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p1[((((int)threadIdx.x) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)]) * p2[((((int)threadIdx.x) * 2) + 16)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 416)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p1[((((int)threadIdx.x) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)]) * p2[((((int)threadIdx.x) * 2) + 32)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 432)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p1[((((int)threadIdx.x) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)]) * p2[((((int)threadIdx.x) * 2) + 48)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 448)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)] * p1[((((int)threadIdx.x) * 2) + 64)]) + (p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p2[((((int)threadIdx.x) * 2) + 64)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 464)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)] * p1[((((int)threadIdx.x) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p2[((((int)threadIdx.x) * 2) + 80)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 480)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)] * p1[((((int)threadIdx.x) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p2[((((int)threadIdx.x) * 2) + 96)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 496)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)] * p1[((((int)threadIdx.x) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p2[((((int)threadIdx.x) * 2) + 112)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 512)] = ((p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p1[(((int)threadIdx.x) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)]) * p2[(((int)threadIdx.x) * 2)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 528)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p1[((((int)threadIdx.x) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)]) * p2[((((int)threadIdx.x) * 2) + 16)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 544)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p1[((((int)threadIdx.x) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)]) * p2[((((int)threadIdx.x) * 2) + 32)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 560)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p1[((((int)threadIdx.x) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)]) * p2[((((int)threadIdx.x) * 2) + 48)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 576)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)] * p1[((((int)threadIdx.x) * 2) + 64)]) + (p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p2[((((int)threadIdx.x) * 2) + 64)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 592)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)] * p1[((((int)threadIdx.x) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p2[((((int)threadIdx.x) * 2) + 80)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 608)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)] * p1[((((int)threadIdx.x) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p2[((((int)threadIdx.x) * 2) + 96)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 624)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)] * p1[((((int)threadIdx.x) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p2[((((int)threadIdx.x) * 2) + 112)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 640)] = ((p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p1[(((int)threadIdx.x) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)]) * p2[(((int)threadIdx.x) * 2)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 656)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p1[((((int)threadIdx.x) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)]) * p2[((((int)threadIdx.x) * 2) + 16)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 672)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p1[((((int)threadIdx.x) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)]) * p2[((((int)threadIdx.x) * 2) + 32)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 688)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p1[((((int)threadIdx.x) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)]) * p2[((((int)threadIdx.x) * 2) + 48)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 704)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)] * p1[((((int)threadIdx.x) * 2) + 64)]) + (p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p2[((((int)threadIdx.x) * 2) + 64)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 720)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)] * p1[((((int)threadIdx.x) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p2[((((int)threadIdx.x) * 2) + 80)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 736)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)] * p1[((((int)threadIdx.x) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p2[((((int)threadIdx.x) * 2) + 96)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 752)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)] * p1[((((int)threadIdx.x) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p2[((((int)threadIdx.x) * 2) + 112)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 768)] = ((p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p1[(((int)threadIdx.x) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)]) * p2[(((int)threadIdx.x) * 2)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 784)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p1[((((int)threadIdx.x) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)]) * p2[((((int)threadIdx.x) * 2) + 16)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 800)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p1[((((int)threadIdx.x) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)]) * p2[((((int)threadIdx.x) * 2) + 32)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 816)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p1[((((int)threadIdx.x) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)]) * p2[((((int)threadIdx.x) * 2) + 48)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 832)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)] * p1[((((int)threadIdx.x) * 2) + 64)]) + (p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p2[((((int)threadIdx.x) * 2) + 64)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 848)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)] * p1[((((int)threadIdx.x) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p2[((((int)threadIdx.x) * 2) + 80)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 864)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)] * p1[((((int)threadIdx.x) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p2[((((int)threadIdx.x) * 2) + 96)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 880)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)] * p1[((((int)threadIdx.x) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p2[((((int)threadIdx.x) * 2) + 112)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 896)] = ((p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p1[(((int)threadIdx.x) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)]) * p2[(((int)threadIdx.x) * 2)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 912)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p1[((((int)threadIdx.x) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)]) * p2[((((int)threadIdx.x) * 2) + 16)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 928)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p1[((((int)threadIdx.x) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)]) * p2[((((int)threadIdx.x) * 2) + 32)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 944)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p1[((((int)threadIdx.x) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)]) * p2[((((int)threadIdx.x) * 2) + 48)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 960)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 64)] * p1[((((int)threadIdx.x) * 2) + 64)]) + (p0[((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2))] * p2[((((int)threadIdx.x) * 2) + 64)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 976)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 80)] * p1[((((int)threadIdx.x) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 16)] * p2[((((int)threadIdx.x) * 2) + 80)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 992)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 96)] * p1[((((int)threadIdx.x) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 32)] * p2[((((int)threadIdx.x) * 2) + 96)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 1008)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 112)] * p1[((((int)threadIdx.x) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 48)] * p2[((((int)threadIdx.x) * 2) + 112)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 1)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p1[((((int)threadIdx.x) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)]) * p2[((((int)threadIdx.x) * 2) + 1)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 17)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p1[((((int)threadIdx.x) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)]) * p2[((((int)threadIdx.x) * 2) + 17)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 33)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p1[((((int)threadIdx.x) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)]) * p2[((((int)threadIdx.x) * 2) + 33)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 49)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p1[((((int)threadIdx.x) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)]) * p2[((((int)threadIdx.x) * 2) + 49)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 65)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)] * p1[((((int)threadIdx.x) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p2[((((int)threadIdx.x) * 2) + 65)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 81)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)] * p1[((((int)threadIdx.x) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p2[((((int)threadIdx.x) * 2) + 81)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 97)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)] * p1[((((int)threadIdx.x) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p2[((((int)threadIdx.x) * 2) + 97)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 113)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)] * p1[((((int)threadIdx.x) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p2[((((int)threadIdx.x) * 2) + 113)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 129)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p1[((((int)threadIdx.x) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)]) * p2[((((int)threadIdx.x) * 2) + 1)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 145)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p1[((((int)threadIdx.x) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)]) * p2[((((int)threadIdx.x) * 2) + 17)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 161)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p1[((((int)threadIdx.x) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)]) * p2[((((int)threadIdx.x) * 2) + 33)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 177)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p1[((((int)threadIdx.x) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)]) * p2[((((int)threadIdx.x) * 2) + 49)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 193)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)] * p1[((((int)threadIdx.x) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p2[((((int)threadIdx.x) * 2) + 65)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 209)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)] * p1[((((int)threadIdx.x) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p2[((((int)threadIdx.x) * 2) + 81)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 225)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)] * p1[((((int)threadIdx.x) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p2[((((int)threadIdx.x) * 2) + 97)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 241)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)] * p1[((((int)threadIdx.x) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p2[((((int)threadIdx.x) * 2) + 113)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 257)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p1[((((int)threadIdx.x) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)]) * p2[((((int)threadIdx.x) * 2) + 1)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 273)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p1[((((int)threadIdx.x) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)]) * p2[((((int)threadIdx.x) * 2) + 17)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 289)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p1[((((int)threadIdx.x) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)]) * p2[((((int)threadIdx.x) * 2) + 33)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 305)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p1[((((int)threadIdx.x) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)]) * p2[((((int)threadIdx.x) * 2) + 49)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 321)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)] * p1[((((int)threadIdx.x) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p2[((((int)threadIdx.x) * 2) + 65)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 337)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)] * p1[((((int)threadIdx.x) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p2[((((int)threadIdx.x) * 2) + 81)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 353)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)] * p1[((((int)threadIdx.x) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p2[((((int)threadIdx.x) * 2) + 97)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 369)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)] * p1[((((int)threadIdx.x) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p2[((((int)threadIdx.x) * 2) + 113)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 385)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p1[((((int)threadIdx.x) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)]) * p2[((((int)threadIdx.x) * 2) + 1)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 401)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p1[((((int)threadIdx.x) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)]) * p2[((((int)threadIdx.x) * 2) + 17)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 417)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p1[((((int)threadIdx.x) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)]) * p2[((((int)threadIdx.x) * 2) + 33)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 433)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p1[((((int)threadIdx.x) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)]) * p2[((((int)threadIdx.x) * 2) + 49)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 449)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)] * p1[((((int)threadIdx.x) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p2[((((int)threadIdx.x) * 2) + 65)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 465)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)] * p1[((((int)threadIdx.x) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p2[((((int)threadIdx.x) * 2) + 81)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 481)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)] * p1[((((int)threadIdx.x) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p2[((((int)threadIdx.x) * 2) + 97)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 497)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)] * p1[((((int)threadIdx.x) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p2[((((int)threadIdx.x) * 2) + 113)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 513)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p1[((((int)threadIdx.x) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)]) * p2[((((int)threadIdx.x) * 2) + 1)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 529)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p1[((((int)threadIdx.x) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)]) * p2[((((int)threadIdx.x) * 2) + 17)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 545)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p1[((((int)threadIdx.x) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)]) * p2[((((int)threadIdx.x) * 2) + 33)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 561)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p1[((((int)threadIdx.x) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)]) * p2[((((int)threadIdx.x) * 2) + 49)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 577)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)] * p1[((((int)threadIdx.x) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p2[((((int)threadIdx.x) * 2) + 65)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 593)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)] * p1[((((int)threadIdx.x) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p2[((((int)threadIdx.x) * 2) + 81)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 609)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)] * p1[((((int)threadIdx.x) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p2[((((int)threadIdx.x) * 2) + 97)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 625)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)] * p1[((((int)threadIdx.x) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p2[((((int)threadIdx.x) * 2) + 113)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 641)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p1[((((int)threadIdx.x) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)]) * p2[((((int)threadIdx.x) * 2) + 1)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 657)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p1[((((int)threadIdx.x) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)]) * p2[((((int)threadIdx.x) * 2) + 17)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 673)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p1[((((int)threadIdx.x) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)]) * p2[((((int)threadIdx.x) * 2) + 33)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 689)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p1[((((int)threadIdx.x) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)]) * p2[((((int)threadIdx.x) * 2) + 49)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 705)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)] * p1[((((int)threadIdx.x) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p2[((((int)threadIdx.x) * 2) + 65)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 721)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)] * p1[((((int)threadIdx.x) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p2[((((int)threadIdx.x) * 2) + 81)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 737)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)] * p1[((((int)threadIdx.x) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p2[((((int)threadIdx.x) * 2) + 97)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 753)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)] * p1[((((int)threadIdx.x) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p2[((((int)threadIdx.x) * 2) + 113)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 769)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p1[((((int)threadIdx.x) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)]) * p2[((((int)threadIdx.x) * 2) + 1)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 785)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p1[((((int)threadIdx.x) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)]) * p2[((((int)threadIdx.x) * 2) + 17)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 801)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p1[((((int)threadIdx.x) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)]) * p2[((((int)threadIdx.x) * 2) + 33)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 817)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p1[((((int)threadIdx.x) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)]) * p2[((((int)threadIdx.x) * 2) + 49)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 833)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)] * p1[((((int)threadIdx.x) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p2[((((int)threadIdx.x) * 2) + 65)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 849)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)] * p1[((((int)threadIdx.x) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p2[((((int)threadIdx.x) * 2) + 81)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 865)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)] * p1[((((int)threadIdx.x) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p2[((((int)threadIdx.x) * 2) + 97)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 881)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)] * p1[((((int)threadIdx.x) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p2[((((int)threadIdx.x) * 2) + 113)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 897)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p1[((((int)threadIdx.x) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)]) * p2[((((int)threadIdx.x) * 2) + 1)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 913)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p1[((((int)threadIdx.x) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)]) * p2[((((int)threadIdx.x) * 2) + 17)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 929)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p1[((((int)threadIdx.x) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)]) * p2[((((int)threadIdx.x) * 2) + 33)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 945)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p1[((((int)threadIdx.x) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)]) * p2[((((int)threadIdx.x) * 2) + 49)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 961)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 65)] * p1[((((int)threadIdx.x) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 1)] * p2[((((int)threadIdx.x) * 2) + 65)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 977)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 81)] * p1[((((int)threadIdx.x) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 17)] * p2[((((int)threadIdx.x) * 2) + 81)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 993)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 97)] * p1[((((int)threadIdx.x) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 33)] * p2[((((int)threadIdx.x) * 2) + 97)]));\n  T_transpose_15[((((int)threadIdx.x) * 2) + 1009)] = ((p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 113)] * p1[((((int)threadIdx.x) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 128) + (((int)threadIdx.x) * 2)) + 49)] * p2[((((int)threadIdx.x) * 2) + 113)]));\n  __syncthreads();\n}\n\n__device__ void Group7_1_nn_batch_matmul_9(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_batch_matmul_NT, char* shared) {\n  half* p1_shared = (half*)p1;\n  half T_batch_matmul_NT_local[1];\n  half* p0_shared = (half*)(shared+0);\n  p1_shared[((int)threadIdx.x)] = p1[((int)threadIdx.x)];\n  p1_shared[(((int)threadIdx.x) + 8)] = p1[(((int)threadIdx.x) + 8)];\n  p1_shared[(((int)threadIdx.x) + 16)] = p1[(((int)threadIdx.x) + 16)];\n  p1_shared[(((int)threadIdx.x) + 24)] = p1[(((int)threadIdx.x) + 24)];\n  p1_shared[(((int)threadIdx.x) + 32)] = p1[(((int)threadIdx.x) + 32)];\n  p1_shared[(((int)threadIdx.x) + 40)] = p1[(((int)threadIdx.x) + 40)];\n  p1_shared[(((int)threadIdx.x) + 48)] = p1[(((int)threadIdx.x) + 48)];\n  p1_shared[(((int)threadIdx.x) + 56)] = p1[(((int)threadIdx.x) + 56)];\n  p1_shared[(((int)threadIdx.x) + 64)] = p1[(((int)threadIdx.x) + 64)];\n  p1_shared[(((int)threadIdx.x) + 72)] = p1[(((int)threadIdx.x) + 72)];\n  p1_shared[(((int)threadIdx.x) + 80)] = p1[(((int)threadIdx.x) + 80)];\n  p1_shared[(((int)threadIdx.x) + 88)] = p1[(((int)threadIdx.x) + 88)];\n  p1_shared[(((int)threadIdx.x) + 96)] = p1[(((int)threadIdx.x) + 96)];\n  p1_shared[(((int)threadIdx.x) + 104)] = p1[(((int)threadIdx.x) + 104)];\n  p1_shared[(((int)threadIdx.x) + 112)] = p1[(((int)threadIdx.x) + 112)];\n  p1_shared[(((int)threadIdx.x) + 120)] = p1[(((int)threadIdx.x) + 120)];\n  p1_shared[(((int)threadIdx.x) + 128)] = p1[(((int)threadIdx.x) + 128)];\n  p1_shared[(((int)threadIdx.x) + 136)] = p1[(((int)threadIdx.x) + 136)];\n  p1_shared[(((int)threadIdx.x) + 144)] = p1[(((int)threadIdx.x) + 144)];\n  p1_shared[(((int)threadIdx.x) + 152)] = p1[(((int)threadIdx.x) + 152)];\n  p1_shared[(((int)threadIdx.x) + 160)] = p1[(((int)threadIdx.x) + 160)];\n  p1_shared[(((int)threadIdx.x) + 168)] = p1[(((int)threadIdx.x) + 168)];\n  p1_shared[(((int)threadIdx.x) + 176)] = p1[(((int)threadIdx.x) + 176)];\n  p1_shared[(((int)threadIdx.x) + 184)] = p1[(((int)threadIdx.x) + 184)];\n  p1_shared[(((int)threadIdx.x) + 192)] = p1[(((int)threadIdx.x) + 192)];\n  p1_shared[(((int)threadIdx.x) + 200)] = p1[(((int)threadIdx.x) + 200)];\n  p1_shared[(((int)threadIdx.x) + 208)] = p1[(((int)threadIdx.x) + 208)];\n  p1_shared[(((int)threadIdx.x) + 216)] = p1[(((int)threadIdx.x) + 216)];\n  p1_shared[(((int)threadIdx.x) + 224)] = p1[(((int)threadIdx.x) + 224)];\n  p1_shared[(((int)threadIdx.x) + 232)] = p1[(((int)threadIdx.x) + 232)];\n  p1_shared[(((int)threadIdx.x) + 240)] = p1[(((int)threadIdx.x) + 240)];\n  p1_shared[(((int)threadIdx.x) + 248)] = p1[(((int)threadIdx.x) + 248)];\n  p1_shared[(((int)threadIdx.x) + 256)] = p1[(((int)threadIdx.x) + 256)];\n  p1_shared[(((int)threadIdx.x) + 264)] = p1[(((int)threadIdx.x) + 264)];\n  p1_shared[(((int)threadIdx.x) + 272)] = p1[(((int)threadIdx.x) + 272)];\n  p1_shared[(((int)threadIdx.x) + 280)] = p1[(((int)threadIdx.x) + 280)];\n  p1_shared[(((int)threadIdx.x) + 288)] = p1[(((int)threadIdx.x) + 288)];\n  p1_shared[(((int)threadIdx.x) + 296)] = p1[(((int)threadIdx.x) + 296)];\n  p1_shared[(((int)threadIdx.x) + 304)] = p1[(((int)threadIdx.x) + 304)];\n  p1_shared[(((int)threadIdx.x) + 312)] = p1[(((int)threadIdx.x) + 312)];\n  p1_shared[(((int)threadIdx.x) + 320)] = p1[(((int)threadIdx.x) + 320)];\n  p1_shared[(((int)threadIdx.x) + 328)] = p1[(((int)threadIdx.x) + 328)];\n  p1_shared[(((int)threadIdx.x) + 336)] = p1[(((int)threadIdx.x) + 336)];\n  p1_shared[(((int)threadIdx.x) + 344)] = p1[(((int)threadIdx.x) + 344)];\n  p1_shared[(((int)threadIdx.x) + 352)] = p1[(((int)threadIdx.x) + 352)];\n  p1_shared[(((int)threadIdx.x) + 360)] = p1[(((int)threadIdx.x) + 360)];\n  p1_shared[(((int)threadIdx.x) + 368)] = p1[(((int)threadIdx.x) + 368)];\n  p1_shared[(((int)threadIdx.x) + 376)] = p1[(((int)threadIdx.x) + 376)];\n  p1_shared[(((int)threadIdx.x) + 384)] = p1[(((int)threadIdx.x) + 384)];\n  p1_shared[(((int)threadIdx.x) + 392)] = p1[(((int)threadIdx.x) + 392)];\n  p1_shared[(((int)threadIdx.x) + 400)] = p1[(((int)threadIdx.x) + 400)];\n  p1_shared[(((int)threadIdx.x) + 408)] = p1[(((int)threadIdx.x) + 408)];\n  p1_shared[(((int)threadIdx.x) + 416)] = p1[(((int)threadIdx.x) + 416)];\n  p1_shared[(((int)threadIdx.x) + 424)] = p1[(((int)threadIdx.x) + 424)];\n  p1_shared[(((int)threadIdx.x) + 432)] = p1[(((int)threadIdx.x) + 432)];\n  p1_shared[(((int)threadIdx.x) + 440)] = p1[(((int)threadIdx.x) + 440)];\n  p1_shared[(((int)threadIdx.x) + 448)] = p1[(((int)threadIdx.x) + 448)];\n  p1_shared[(((int)threadIdx.x) + 456)] = p1[(((int)threadIdx.x) + 456)];\n  p1_shared[(((int)threadIdx.x) + 464)] = p1[(((int)threadIdx.x) + 464)];\n  p1_shared[(((int)threadIdx.x) + 472)] = p1[(((int)threadIdx.x) + 472)];\n  p1_shared[(((int)threadIdx.x) + 480)] = p1[(((int)threadIdx.x) + 480)];\n  p1_shared[(((int)threadIdx.x) + 488)] = p1[(((int)threadIdx.x) + 488)];\n  p1_shared[(((int)threadIdx.x) + 496)] = p1[(((int)threadIdx.x) + 496)];\n  p1_shared[(((int)threadIdx.x) + 504)] = p1[(((int)threadIdx.x) + 504)];\n  p1_shared[(((int)threadIdx.x) + 512)] = p1[(((int)threadIdx.x) + 512)];\n  p1_shared[(((int)threadIdx.x) + 520)] = p1[(((int)threadIdx.x) + 520)];\n  p1_shared[(((int)threadIdx.x) + 528)] = p1[(((int)threadIdx.x) + 528)];\n  p1_shared[(((int)threadIdx.x) + 536)] = p1[(((int)threadIdx.x) + 536)];\n  p1_shared[(((int)threadIdx.x) + 544)] = p1[(((int)threadIdx.x) + 544)];\n  p1_shared[(((int)threadIdx.x) + 552)] = p1[(((int)threadIdx.x) + 552)];\n  p1_shared[(((int)threadIdx.x) + 560)] = p1[(((int)threadIdx.x) + 560)];\n  p1_shared[(((int)threadIdx.x) + 568)] = p1[(((int)threadIdx.x) + 568)];\n  p1_shared[(((int)threadIdx.x) + 576)] = p1[(((int)threadIdx.x) + 576)];\n  p1_shared[(((int)threadIdx.x) + 584)] = p1[(((int)threadIdx.x) + 584)];\n  p1_shared[(((int)threadIdx.x) + 592)] = p1[(((int)threadIdx.x) + 592)];\n  p1_shared[(((int)threadIdx.x) + 600)] = p1[(((int)threadIdx.x) + 600)];\n  p1_shared[(((int)threadIdx.x) + 608)] = p1[(((int)threadIdx.x) + 608)];\n  p1_shared[(((int)threadIdx.x) + 616)] = p1[(((int)threadIdx.x) + 616)];\n  p1_shared[(((int)threadIdx.x) + 624)] = p1[(((int)threadIdx.x) + 624)];\n  p1_shared[(((int)threadIdx.x) + 632)] = p1[(((int)threadIdx.x) + 632)];\n  p1_shared[(((int)threadIdx.x) + 640)] = p1[(((int)threadIdx.x) + 640)];\n  p1_shared[(((int)threadIdx.x) + 648)] = p1[(((int)threadIdx.x) + 648)];\n  p1_shared[(((int)threadIdx.x) + 656)] = p1[(((int)threadIdx.x) + 656)];\n  p1_shared[(((int)threadIdx.x) + 664)] = p1[(((int)threadIdx.x) + 664)];\n  p1_shared[(((int)threadIdx.x) + 672)] = p1[(((int)threadIdx.x) + 672)];\n  p1_shared[(((int)threadIdx.x) + 680)] = p1[(((int)threadIdx.x) + 680)];\n  p1_shared[(((int)threadIdx.x) + 688)] = p1[(((int)threadIdx.x) + 688)];\n  p1_shared[(((int)threadIdx.x) + 696)] = p1[(((int)threadIdx.x) + 696)];\n  p1_shared[(((int)threadIdx.x) + 704)] = p1[(((int)threadIdx.x) + 704)];\n  p1_shared[(((int)threadIdx.x) + 712)] = p1[(((int)threadIdx.x) + 712)];\n  p1_shared[(((int)threadIdx.x) + 720)] = p1[(((int)threadIdx.x) + 720)];\n  p1_shared[(((int)threadIdx.x) + 728)] = p1[(((int)threadIdx.x) + 728)];\n  p1_shared[(((int)threadIdx.x) + 736)] = p1[(((int)threadIdx.x) + 736)];\n  p1_shared[(((int)threadIdx.x) + 744)] = p1[(((int)threadIdx.x) + 744)];\n  p1_shared[(((int)threadIdx.x) + 752)] = p1[(((int)threadIdx.x) + 752)];\n  p1_shared[(((int)threadIdx.x) + 760)] = p1[(((int)threadIdx.x) + 760)];\n  p1_shared[(((int)threadIdx.x) + 768)] = p1[(((int)threadIdx.x) + 768)];\n  p1_shared[(((int)threadIdx.x) + 776)] = p1[(((int)threadIdx.x) + 776)];\n  p1_shared[(((int)threadIdx.x) + 784)] = p1[(((int)threadIdx.x) + 784)];\n  p1_shared[(((int)threadIdx.x) + 792)] = p1[(((int)threadIdx.x) + 792)];\n  p1_shared[(((int)threadIdx.x) + 800)] = p1[(((int)threadIdx.x) + 800)];\n  p1_shared[(((int)threadIdx.x) + 808)] = p1[(((int)threadIdx.x) + 808)];\n  p1_shared[(((int)threadIdx.x) + 816)] = p1[(((int)threadIdx.x) + 816)];\n  p1_shared[(((int)threadIdx.x) + 824)] = p1[(((int)threadIdx.x) + 824)];\n  p1_shared[(((int)threadIdx.x) + 832)] = p1[(((int)threadIdx.x) + 832)];\n  p1_shared[(((int)threadIdx.x) + 840)] = p1[(((int)threadIdx.x) + 840)];\n  p1_shared[(((int)threadIdx.x) + 848)] = p1[(((int)threadIdx.x) + 848)];\n  p1_shared[(((int)threadIdx.x) + 856)] = p1[(((int)threadIdx.x) + 856)];\n  p1_shared[(((int)threadIdx.x) + 864)] = p1[(((int)threadIdx.x) + 864)];\n  p1_shared[(((int)threadIdx.x) + 872)] = p1[(((int)threadIdx.x) + 872)];\n  p1_shared[(((int)threadIdx.x) + 880)] = p1[(((int)threadIdx.x) + 880)];\n  p1_shared[(((int)threadIdx.x) + 888)] = p1[(((int)threadIdx.x) + 888)];\n  p1_shared[(((int)threadIdx.x) + 896)] = p1[(((int)threadIdx.x) + 896)];\n  p1_shared[(((int)threadIdx.x) + 904)] = p1[(((int)threadIdx.x) + 904)];\n  p1_shared[(((int)threadIdx.x) + 912)] = p1[(((int)threadIdx.x) + 912)];\n  p1_shared[(((int)threadIdx.x) + 920)] = p1[(((int)threadIdx.x) + 920)];\n  p1_shared[(((int)threadIdx.x) + 928)] = p1[(((int)threadIdx.x) + 928)];\n  p1_shared[(((int)threadIdx.x) + 936)] = p1[(((int)threadIdx.x) + 936)];\n  p1_shared[(((int)threadIdx.x) + 944)] = p1[(((int)threadIdx.x) + 944)];\n  p1_shared[(((int)threadIdx.x) + 952)] = p1[(((int)threadIdx.x) + 952)];\n  p1_shared[(((int)threadIdx.x) + 960)] = p1[(((int)threadIdx.x) + 960)];\n  p1_shared[(((int)threadIdx.x) + 968)] = p1[(((int)threadIdx.x) + 968)];\n  p1_shared[(((int)threadIdx.x) + 976)] = p1[(((int)threadIdx.x) + 976)];\n  p1_shared[(((int)threadIdx.x) + 984)] = p1[(((int)threadIdx.x) + 984)];\n  p1_shared[(((int)threadIdx.x) + 992)] = p1[(((int)threadIdx.x) + 992)];\n  p1_shared[(((int)threadIdx.x) + 1000)] = p1[(((int)threadIdx.x) + 1000)];\n  p1_shared[(((int)threadIdx.x) + 1008)] = p1[(((int)threadIdx.x) + 1008)];\n  p1_shared[(((int)threadIdx.x) + 1016)] = p1[(((int)threadIdx.x) + 1016)];\n  T_batch_matmul_NT_local[0] = __float2half_rn(0.000000e+00f);\n  *(uint4*)(p0_shared + (((int)threadIdx.x) * 8)) = *(uint4*)(p0 + ((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 64)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 64));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 128)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 128));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 192)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 192));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 256)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 256));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 320)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 320));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 384)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 384));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 448)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 448));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 512)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 512));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 576)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 576));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 640)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 640));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 704)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 704));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 768)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 768));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 832)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 832));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 896)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 896));\n  *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 960)) = *(uint4*)(p0 + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 960));\n  __syncthreads();\n  for (int k_1 = 0; k_1 < 128; ++k_1) {\n    T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (p0_shared[((((int)threadIdx.x) * 128) + k_1)] * p1_shared[((((int)threadIdx.x) * 128) + k_1)]));\n  }\n  __syncthreads();\n  T_batch_matmul_NT[((int)threadIdx.x)] = T_batch_matmul_NT_local[0];\n  __syncthreads();\n}\n\n__device__ void Group7_2_reshape_divide_10(half* __restrict__ p0, half* __restrict__ T_divide, char* shared) {\n  half* p0_shared = (half*)p0;\n  half p0_shared_local[1];\n  p0_shared_local[0] = p0_shared[((int)threadIdx.x)];\n  __syncthreads();\n  T_divide[((int)threadIdx.x)] = (p0_shared_local[0] * __float2half_rn(8.839779e-02f));\n  __syncthreads();\n}\n\n__device__ void Group7_3_max_11(half* __restrict__ p0, half* __restrict__ p0_red, char* shared) {\n  half* p0_shared = (half*)p0;\n  half p0_red_local[1];\n  p0_shared[((int)threadIdx.x)] = p0[((int)threadIdx.x)];\n  p0_red_local[0] = __float2half_rn(-6.550400e+04f);\n  p0_red_local[0] = max(p0_red_local[0], p0_shared[((int)threadIdx.x)]);\n  __syncthreads();\n  p0_red[((int)threadIdx.x)] = p0_red_local[0];\n  __syncthreads();\n}\n\n__device__ void Group7_4_subtract_exp_12(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_exp, char* shared) {\n  half* p0_shared = (half*)p0;\n  half p0_shared_local[1];\n  half* p1_shared = (half*)p1;\n  half p1_shared_local[1];\n  p0_shared_local[0] = p0_shared[((int)threadIdx.x)];\n  p1_shared_local[0] = p1_shared[((int)threadIdx.x)];\n  __syncthreads();\n  T_exp[((int)threadIdx.x)] = hexp((p0_shared_local[0] - p1_shared_local[0]));\n  __syncthreads();\n}\n\n__device__ void Group7_5_sum_13(half* __restrict__ p0, half* __restrict__ p0_red, char* shared) {\n  half* p0_shared = (half*)p0;\n  half p0_red_local[1];\n  p0_shared[((int)threadIdx.x)] = p0[((int)threadIdx.x)];\n  p0_red_local[0] = __float2half_rn(0.000000e+00f);\n  p0_red_local[0] = (p0_red_local[0] + p0_shared[((int)threadIdx.x)]);\n  __syncthreads();\n  p0_red[((int)threadIdx.x)] = p0_red_local[0];\n  __syncthreads();\n}\n\n__device__ void Group7_6_divide_cast_cast_reshape_14(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_reshape, char* shared) {\n  half* p0_shared = (half*)p0;\n  half* p1_shared = (half*)p1;\n  T_reshape[((((int)blockIdx.x) * 8) + ((int)threadIdx.x))] = ((half)((float)(p0_shared[((int)threadIdx.x)] / p1_shared[((int)threadIdx.x)])));\n}\n\n__global__ void __launch_bounds__(8) Group7(half* input0, half* input1, half* input2, half* input3, half* output0) {\n  __shared__ char shared[4096];\n  Group7_0_multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8(input1, input2, input3, (half*)(shared+0), shared+0);\n  Group7_1_nn_batch_matmul_9(input0, (half*)(shared+0), (half*)(shared+0), shared+2048);\n  Group7_2_reshape_divide_10((half*)(shared+0), (half*)(shared+0), shared+32);\n  Group7_3_max_11((half*)(shared+0), (half*)(shared+32), shared+32);\n  Group7_4_subtract_exp_12((half*)(shared+0), (half*)(shared+32), (half*)(shared+0), shared+64);\n  Group7_5_sum_13((half*)(shared+0), (half*)(shared+32), shared+32);\n  Group7_6_divide_cast_cast_reshape_14((half*)(shared+0), (half*)(shared+32), output0, shared+64);\n}\n",
    "block_size": [
      8,
      1,
      1
    ],
    "grid_size": [
      8,
      1,
      1
    ],
    "latency": 0.0053183999843895435,
    "name": "Group7",
    "gain": 0.01256387890316546
  },
  {
    "nodes": [
      15
    ],
    "node_names": [
      "ladder_quant_linear_cast_15"
    ],
    "group_id": 8,
    "input_desc": [
      [
        "ladder_quant_linear_cast_15",
        15,
        0
      ],
      [
        "ladder_quant_linear_cast_15",
        15,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_quant_linear_cast_15",
        15,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group5(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int in_thread_T_quant_linear_local[1];\n  signed char p0_local[16];\n  signed char p1_local[2];\n  signed char B_decode_local[16];\n  __shared__ int red_buf0[128];\n  in_thread_T_quant_linear_local[0] = 0;\n  for (int k_0 = 0; k_0 < 8; ++k_0) {\n    *(int4*)(p0_local + 0) = *(int4*)(p0 + ((k_0 * 1024) + (((int)threadIdx.x) * 16)));\n    *(char2*)(p1_local + 0) = *(char2*)(p1 + ((((((int)blockIdx.x) * 2048) + (((int)threadIdx.y) * 1024)) + (k_0 * 128)) + (((int)threadIdx.x) * 2)));\n    for (int ax1 = 0; ax1 < 16; ++ax1) {\n      B_decode_local[ax1] = ((p1_local[(ax1 >> 3)] >> ((signed char)(ax1 & 7))) & (signed char)1);\n    }\n    for (int k_2_0 = 0; k_2_0 < 4; ++k_2_0) {\n      in_thread_T_quant_linear_local[0] = __dp4a(*(int *)&p0_local[((k_2_0 * 4))],*(int *)&B_decode_local[((k_2_0 * 4))], in_thread_T_quant_linear_local[0]);\n    }\n  }\n  __syncthreads();\n  ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = in_thread_T_quant_linear_local[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    int w_16_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 16)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_16_0;\n    int w_8_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 8)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_8_0;\n    int w_4_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 4)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_4_0;\n    int w_2_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 2)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_2_0;\n    int w_1_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 1)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_1_0;\n  }\n  __syncthreads();\n  T_cast[((((int)blockIdx.x) * 2) + ((int)threadIdx.y))] = ((half)((volatile int*)red_buf0)[(((int)threadIdx.y) * 64)]);\n}\n\n",
    "block_size": [
      64,
      2,
      1
    ],
    "grid_size": [
      512,
      1,
      1
    ],
    "latency": 0.007679999805986881,
    "name": "Group5",
    "gain": 0
  },
  {
    "nodes": [
      16,
      17,
      18
    ],
    "node_names": [
      "reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16",
      "nn_batch_matmul_17",
      "reshape_transpose_reshape_reshape_cast_cast_reshape_18"
    ],
    "group_id": 9,
    "input_desc": [
      [
        "nn_batch_matmul_17",
        17,
        0
      ],
      [
        "reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16",
        16,
        0
      ]
    ],
    "output_desc": [
      [
        "reshape_transpose_reshape_reshape_cast_cast_reshape_18",
        18,
        0
      ]
    ],
    "code": "__device__ void Group9_0_reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16(half* __restrict__ p0, half* __restrict__ T_transpose_8, char* shared) {\n  __syncthreads();\n  T_transpose_8[((int)threadIdx.x)] = p0[(((((int)blockIdx.x) >> 2) * 128) + ((int)threadIdx.x))];\n  T_transpose_8[(((int)threadIdx.x) + 128)] = p0[(((((int)blockIdx.x) >> 2) * 128) + ((int)threadIdx.x))];\n  __syncthreads();\n}\n\n__device__ void Group9_1_nn_batch_matmul_17(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_batch_matmul_NT, char* shared) {\n  half* p1_shared = (half*)p1;\n  half T_batch_matmul_NT_local[2];\n  half* p0_shared = (half*)(shared+0);\n  p1_shared[((int)threadIdx.x)] = p1[((int)threadIdx.x)];\n  p1_shared[(((int)threadIdx.x) + 128)] = p1[(((int)threadIdx.x) + 128)];\n  for (int j_1_1_init = 0; j_1_1_init < 2; ++j_1_1_init) {\n    T_batch_matmul_NT_local[j_1_1_init] = __float2half_rn(0.000000e+00f);\n  }\n  if (((int)threadIdx.x) < 2) {\n    p0_shared[((int)threadIdx.x)] = p0[((((int)blockIdx.x) * 2) + ((int)threadIdx.x))];\n  }\n  __syncthreads();\n  for (int j_1_1 = 0; j_1_1 < 2; ++j_1_1) {\n    T_batch_matmul_NT_local[j_1_1] = (T_batch_matmul_NT_local[j_1_1] + (p0_shared[(((int)threadIdx.x) >> 6)] * p1_shared[((((int)threadIdx.x) * 2) + j_1_1)]));\n  }\n  __syncthreads();\n  for (int ax0 = 0; ax0 < 2; ++ax0) {\n    T_batch_matmul_NT[((((int)threadIdx.x) * 2) + ax0)] = T_batch_matmul_NT_local[ax0];\n  }\n  __syncthreads();\n}\n\n__device__ void Group9_2_reshape_transpose_reshape_reshape_cast_cast_reshape_18(half* __restrict__ p0, int8_t* __restrict__ T_reshape_7, char* shared) {\n  half* p0_shared = (half*)p0;\n  T_reshape_7[((((int)blockIdx.x) * 256) + ((int)threadIdx.x))] = ((signed char)((float)p0_shared[((int)threadIdx.x)]));\n  T_reshape_7[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) + 128)] = ((signed char)((float)p0_shared[(((int)threadIdx.x) + 128)]));\n}\n\n__global__ void __launch_bounds__(128) Group9(half* input0, half* input1, int8_t* output0) {\n  __shared__ char shared[544];\n  Group9_0_reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16(input1, (half*)(shared+0), shared+0);\n  Group9_1_nn_batch_matmul_17(input0, (half*)(shared+0), (half*)(shared+0), shared+512);\n  Group9_2_reshape_transpose_reshape_reshape_cast_cast_reshape_18((half*)(shared+0), output0, shared+512);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      32,
      1,
      1
    ],
    "latency": 0.0028829090297222137,
    "name": "Group9",
    "gain": 0.005178401712328196
  },
  {
    "nodes": [
      19
    ],
    "node_names": [
      "ladder_quant_linear_cast_19"
    ],
    "group_id": 10,
    "input_desc": [
      [
        "ladder_quant_linear_cast_19",
        19,
        0
      ],
      [
        "ladder_quant_linear_cast_19",
        19,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_quant_linear_cast_19",
        19,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group2(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int in_thread_T_quant_linear_local[1];\n  signed char p0_local[16];\n  signed char p1_local[2];\n  signed char B_decode_local[16];\n  __shared__ int red_buf0[128];\n  in_thread_T_quant_linear_local[0] = 0;\n  for (int k_0 = 0; k_0 < 8; ++k_0) {\n    *(int4*)(p0_local + 0) = *(int4*)(p0 + ((k_0 * 1024) + (((int)threadIdx.x) * 16)));\n    *(char2*)(p1_local + 0) = *(char2*)(p1 + ((((((int)blockIdx.x) * 2048) + (((int)threadIdx.y) * 1024)) + (k_0 * 128)) + (((int)threadIdx.x) * 2)));\n    for (int ax1 = 0; ax1 < 16; ++ax1) {\n      B_decode_local[ax1] = ((p1_local[(ax1 >> 3)] >> ((signed char)(ax1 & 7))) & (signed char)1);\n    }\n    for (int k_2_0 = 0; k_2_0 < 4; ++k_2_0) {\n      in_thread_T_quant_linear_local[0] = __dp4a(*(int *)&p0_local[((k_2_0 * 4))],*(int *)&B_decode_local[((k_2_0 * 4))], in_thread_T_quant_linear_local[0]);\n    }\n  }\n  __syncthreads();\n  ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = in_thread_T_quant_linear_local[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    int w_16_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 16)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_16_0;\n    int w_8_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 8)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_8_0;\n    int w_4_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 4)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_4_0;\n    int w_2_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 2)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_2_0;\n    int w_1_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 1)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_1_0;\n  }\n  __syncthreads();\n  T_cast[((((int)blockIdx.x) * 2) + ((int)threadIdx.y))] = ((half)((volatile int*)red_buf0)[(((int)threadIdx.y) * 64)]);\n}\n\n",
    "block_size": [
      64,
      2,
      1
    ],
    "grid_size": [
      4096,
      1,
      1
    ],
    "latency": 0.02943200059235096,
    "name": "Group2",
    "gain": 0
  },
  {
    "nodes": [
      20
    ],
    "node_names": [
      "reshape_add_20"
    ],
    "group_id": 11,
    "input_desc": [
      [
        "reshape_add_20",
        20,
        0
      ],
      [
        "reshape_add_20",
        20,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_add_20",
        20,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group11(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_add) {\n  \n  T_add[((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2))] = (p1[((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2))] + p0[((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2))]);\n  T_add[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2)) + 1)] = (p1[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2)) + 1)] + p0[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2)) + 1)]);\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      32,
      1,
      1
    ],
    "latency": 0.0027544614858925343,
    "name": "Group11",
    "gain": 0
  },
  {
    "nodes": [
      21,
      22
    ],
    "node_names": [
      "cast_multiply_21",
      "mean_add_sqrt_divide_22"
    ],
    "group_id": 12,
    "input_desc": [
      [
        "cast_multiply_21",
        21,
        0
      ]
    ],
    "output_desc": [
      [
        "cast_multiply_21",
        21,
        0
      ],
      [
        "mean_add_sqrt_divide_22",
        22,
        0
      ]
    ],
    "code": "__device__ void Group0_0_cast_multiply_0(half* __restrict__ p0, float* __restrict__ output_proxy, float* __restrict__ output_proxy_1, char* shared) {\n  output_proxy[((int)threadIdx.x)] = ((float)p0[((int)threadIdx.x)]);\n  output_proxy[(((int)threadIdx.x) + 128)] = ((float)p0[(((int)threadIdx.x) + 128)]);\n  output_proxy[(((int)threadIdx.x) + 256)] = ((float)p0[(((int)threadIdx.x) + 256)]);\n  output_proxy[(((int)threadIdx.x) + 384)] = ((float)p0[(((int)threadIdx.x) + 384)]);\n  output_proxy[(((int)threadIdx.x) + 512)] = ((float)p0[(((int)threadIdx.x) + 512)]);\n  output_proxy[(((int)threadIdx.x) + 640)] = ((float)p0[(((int)threadIdx.x) + 640)]);\n  output_proxy[(((int)threadIdx.x) + 768)] = ((float)p0[(((int)threadIdx.x) + 768)]);\n  output_proxy[(((int)threadIdx.x) + 896)] = ((float)p0[(((int)threadIdx.x) + 896)]);\n  output_proxy[(((int)threadIdx.x) + 1024)] = ((float)p0[(((int)threadIdx.x) + 1024)]);\n  output_proxy[(((int)threadIdx.x) + 1152)] = ((float)p0[(((int)threadIdx.x) + 1152)]);\n  output_proxy[(((int)threadIdx.x) + 1280)] = ((float)p0[(((int)threadIdx.x) + 1280)]);\n  output_proxy[(((int)threadIdx.x) + 1408)] = ((float)p0[(((int)threadIdx.x) + 1408)]);\n  output_proxy[(((int)threadIdx.x) + 1536)] = ((float)p0[(((int)threadIdx.x) + 1536)]);\n  output_proxy[(((int)threadIdx.x) + 1664)] = ((float)p0[(((int)threadIdx.x) + 1664)]);\n  output_proxy[(((int)threadIdx.x) + 1792)] = ((float)p0[(((int)threadIdx.x) + 1792)]);\n  output_proxy[(((int)threadIdx.x) + 1920)] = ((float)p0[(((int)threadIdx.x) + 1920)]);\n  output_proxy[(((int)threadIdx.x) + 2048)] = ((float)p0[(((int)threadIdx.x) + 2048)]);\n  output_proxy[(((int)threadIdx.x) + 2176)] = ((float)p0[(((int)threadIdx.x) + 2176)]);\n  output_proxy[(((int)threadIdx.x) + 2304)] = ((float)p0[(((int)threadIdx.x) + 2304)]);\n  output_proxy[(((int)threadIdx.x) + 2432)] = ((float)p0[(((int)threadIdx.x) + 2432)]);\n  output_proxy[(((int)threadIdx.x) + 2560)] = ((float)p0[(((int)threadIdx.x) + 2560)]);\n  output_proxy[(((int)threadIdx.x) + 2688)] = ((float)p0[(((int)threadIdx.x) + 2688)]);\n  output_proxy[(((int)threadIdx.x) + 2816)] = ((float)p0[(((int)threadIdx.x) + 2816)]);\n  output_proxy[(((int)threadIdx.x) + 2944)] = ((float)p0[(((int)threadIdx.x) + 2944)]);\n  output_proxy[(((int)threadIdx.x) + 3072)] = ((float)p0[(((int)threadIdx.x) + 3072)]);\n  output_proxy[(((int)threadIdx.x) + 3200)] = ((float)p0[(((int)threadIdx.x) + 3200)]);\n  output_proxy[(((int)threadIdx.x) + 3328)] = ((float)p0[(((int)threadIdx.x) + 3328)]);\n  output_proxy[(((int)threadIdx.x) + 3456)] = ((float)p0[(((int)threadIdx.x) + 3456)]);\n  output_proxy[(((int)threadIdx.x) + 3584)] = ((float)p0[(((int)threadIdx.x) + 3584)]);\n  output_proxy[(((int)threadIdx.x) + 3712)] = ((float)p0[(((int)threadIdx.x) + 3712)]);\n  output_proxy[(((int)threadIdx.x) + 3840)] = ((float)p0[(((int)threadIdx.x) + 3840)]);\n  output_proxy[(((int)threadIdx.x) + 3968)] = ((float)p0[(((int)threadIdx.x) + 3968)]);\n  output_proxy[(((int)threadIdx.x) + 4096)] = ((float)p0[(((int)threadIdx.x) + 4096)]);\n  output_proxy[(((int)threadIdx.x) + 4224)] = ((float)p0[(((int)threadIdx.x) + 4224)]);\n  output_proxy[(((int)threadIdx.x) + 4352)] = ((float)p0[(((int)threadIdx.x) + 4352)]);\n  output_proxy[(((int)threadIdx.x) + 4480)] = ((float)p0[(((int)threadIdx.x) + 4480)]);\n  output_proxy[(((int)threadIdx.x) + 4608)] = ((float)p0[(((int)threadIdx.x) + 4608)]);\n  output_proxy[(((int)threadIdx.x) + 4736)] = ((float)p0[(((int)threadIdx.x) + 4736)]);\n  output_proxy[(((int)threadIdx.x) + 4864)] = ((float)p0[(((int)threadIdx.x) + 4864)]);\n  output_proxy[(((int)threadIdx.x) + 4992)] = ((float)p0[(((int)threadIdx.x) + 4992)]);\n  output_proxy[(((int)threadIdx.x) + 5120)] = ((float)p0[(((int)threadIdx.x) + 5120)]);\n  output_proxy[(((int)threadIdx.x) + 5248)] = ((float)p0[(((int)threadIdx.x) + 5248)]);\n  output_proxy[(((int)threadIdx.x) + 5376)] = ((float)p0[(((int)threadIdx.x) + 5376)]);\n  output_proxy[(((int)threadIdx.x) + 5504)] = ((float)p0[(((int)threadIdx.x) + 5504)]);\n  output_proxy[(((int)threadIdx.x) + 5632)] = ((float)p0[(((int)threadIdx.x) + 5632)]);\n  output_proxy[(((int)threadIdx.x) + 5760)] = ((float)p0[(((int)threadIdx.x) + 5760)]);\n  output_proxy[(((int)threadIdx.x) + 5888)] = ((float)p0[(((int)threadIdx.x) + 5888)]);\n  output_proxy[(((int)threadIdx.x) + 6016)] = ((float)p0[(((int)threadIdx.x) + 6016)]);\n  output_proxy[(((int)threadIdx.x) + 6144)] = ((float)p0[(((int)threadIdx.x) + 6144)]);\n  output_proxy[(((int)threadIdx.x) + 6272)] = ((float)p0[(((int)threadIdx.x) + 6272)]);\n  output_proxy[(((int)threadIdx.x) + 6400)] = ((float)p0[(((int)threadIdx.x) + 6400)]);\n  output_proxy[(((int)threadIdx.x) + 6528)] = ((float)p0[(((int)threadIdx.x) + 6528)]);\n  output_proxy[(((int)threadIdx.x) + 6656)] = ((float)p0[(((int)threadIdx.x) + 6656)]);\n  output_proxy[(((int)threadIdx.x) + 6784)] = ((float)p0[(((int)threadIdx.x) + 6784)]);\n  output_proxy[(((int)threadIdx.x) + 6912)] = ((float)p0[(((int)threadIdx.x) + 6912)]);\n  output_proxy[(((int)threadIdx.x) + 7040)] = ((float)p0[(((int)threadIdx.x) + 7040)]);\n  output_proxy[(((int)threadIdx.x) + 7168)] = ((float)p0[(((int)threadIdx.x) + 7168)]);\n  output_proxy[(((int)threadIdx.x) + 7296)] = ((float)p0[(((int)threadIdx.x) + 7296)]);\n  output_proxy[(((int)threadIdx.x) + 7424)] = ((float)p0[(((int)threadIdx.x) + 7424)]);\n  output_proxy[(((int)threadIdx.x) + 7552)] = ((float)p0[(((int)threadIdx.x) + 7552)]);\n  output_proxy[(((int)threadIdx.x) + 7680)] = ((float)p0[(((int)threadIdx.x) + 7680)]);\n  output_proxy[(((int)threadIdx.x) + 7808)] = ((float)p0[(((int)threadIdx.x) + 7808)]);\n  output_proxy[(((int)threadIdx.x) + 7936)] = ((float)p0[(((int)threadIdx.x) + 7936)]);\n  output_proxy[(((int)threadIdx.x) + 8064)] = ((float)p0[(((int)threadIdx.x) + 8064)]);\n  __syncthreads();\n  output_proxy_1[((int)threadIdx.x)] = (((float)p0[((int)threadIdx.x)]) * ((float)p0[((int)threadIdx.x)]));\n  output_proxy_1[(((int)threadIdx.x) + 128)] = (((float)p0[(((int)threadIdx.x) + 128)]) * ((float)p0[(((int)threadIdx.x) + 128)]));\n  output_proxy_1[(((int)threadIdx.x) + 256)] = (((float)p0[(((int)threadIdx.x) + 256)]) * ((float)p0[(((int)threadIdx.x) + 256)]));\n  output_proxy_1[(((int)threadIdx.x) + 384)] = (((float)p0[(((int)threadIdx.x) + 384)]) * ((float)p0[(((int)threadIdx.x) + 384)]));\n  output_proxy_1[(((int)threadIdx.x) + 512)] = (((float)p0[(((int)threadIdx.x) + 512)]) * ((float)p0[(((int)threadIdx.x) + 512)]));\n  output_proxy_1[(((int)threadIdx.x) + 640)] = (((float)p0[(((int)threadIdx.x) + 640)]) * ((float)p0[(((int)threadIdx.x) + 640)]));\n  output_proxy_1[(((int)threadIdx.x) + 768)] = (((float)p0[(((int)threadIdx.x) + 768)]) * ((float)p0[(((int)threadIdx.x) + 768)]));\n  output_proxy_1[(((int)threadIdx.x) + 896)] = (((float)p0[(((int)threadIdx.x) + 896)]) * ((float)p0[(((int)threadIdx.x) + 896)]));\n  output_proxy_1[(((int)threadIdx.x) + 1024)] = (((float)p0[(((int)threadIdx.x) + 1024)]) * ((float)p0[(((int)threadIdx.x) + 1024)]));\n  output_proxy_1[(((int)threadIdx.x) + 1152)] = (((float)p0[(((int)threadIdx.x) + 1152)]) * ((float)p0[(((int)threadIdx.x) + 1152)]));\n  output_proxy_1[(((int)threadIdx.x) + 1280)] = (((float)p0[(((int)threadIdx.x) + 1280)]) * ((float)p0[(((int)threadIdx.x) + 1280)]));\n  output_proxy_1[(((int)threadIdx.x) + 1408)] = (((float)p0[(((int)threadIdx.x) + 1408)]) * ((float)p0[(((int)threadIdx.x) + 1408)]));\n  output_proxy_1[(((int)threadIdx.x) + 1536)] = (((float)p0[(((int)threadIdx.x) + 1536)]) * ((float)p0[(((int)threadIdx.x) + 1536)]));\n  output_proxy_1[(((int)threadIdx.x) + 1664)] = (((float)p0[(((int)threadIdx.x) + 1664)]) * ((float)p0[(((int)threadIdx.x) + 1664)]));\n  output_proxy_1[(((int)threadIdx.x) + 1792)] = (((float)p0[(((int)threadIdx.x) + 1792)]) * ((float)p0[(((int)threadIdx.x) + 1792)]));\n  output_proxy_1[(((int)threadIdx.x) + 1920)] = (((float)p0[(((int)threadIdx.x) + 1920)]) * ((float)p0[(((int)threadIdx.x) + 1920)]));\n  output_proxy_1[(((int)threadIdx.x) + 2048)] = (((float)p0[(((int)threadIdx.x) + 2048)]) * ((float)p0[(((int)threadIdx.x) + 2048)]));\n  output_proxy_1[(((int)threadIdx.x) + 2176)] = (((float)p0[(((int)threadIdx.x) + 2176)]) * ((float)p0[(((int)threadIdx.x) + 2176)]));\n  output_proxy_1[(((int)threadIdx.x) + 2304)] = (((float)p0[(((int)threadIdx.x) + 2304)]) * ((float)p0[(((int)threadIdx.x) + 2304)]));\n  output_proxy_1[(((int)threadIdx.x) + 2432)] = (((float)p0[(((int)threadIdx.x) + 2432)]) * ((float)p0[(((int)threadIdx.x) + 2432)]));\n  output_proxy_1[(((int)threadIdx.x) + 2560)] = (((float)p0[(((int)threadIdx.x) + 2560)]) * ((float)p0[(((int)threadIdx.x) + 2560)]));\n  output_proxy_1[(((int)threadIdx.x) + 2688)] = (((float)p0[(((int)threadIdx.x) + 2688)]) * ((float)p0[(((int)threadIdx.x) + 2688)]));\n  output_proxy_1[(((int)threadIdx.x) + 2816)] = (((float)p0[(((int)threadIdx.x) + 2816)]) * ((float)p0[(((int)threadIdx.x) + 2816)]));\n  output_proxy_1[(((int)threadIdx.x) + 2944)] = (((float)p0[(((int)threadIdx.x) + 2944)]) * ((float)p0[(((int)threadIdx.x) + 2944)]));\n  output_proxy_1[(((int)threadIdx.x) + 3072)] = (((float)p0[(((int)threadIdx.x) + 3072)]) * ((float)p0[(((int)threadIdx.x) + 3072)]));\n  output_proxy_1[(((int)threadIdx.x) + 3200)] = (((float)p0[(((int)threadIdx.x) + 3200)]) * ((float)p0[(((int)threadIdx.x) + 3200)]));\n  output_proxy_1[(((int)threadIdx.x) + 3328)] = (((float)p0[(((int)threadIdx.x) + 3328)]) * ((float)p0[(((int)threadIdx.x) + 3328)]));\n  output_proxy_1[(((int)threadIdx.x) + 3456)] = (((float)p0[(((int)threadIdx.x) + 3456)]) * ((float)p0[(((int)threadIdx.x) + 3456)]));\n  output_proxy_1[(((int)threadIdx.x) + 3584)] = (((float)p0[(((int)threadIdx.x) + 3584)]) * ((float)p0[(((int)threadIdx.x) + 3584)]));\n  output_proxy_1[(((int)threadIdx.x) + 3712)] = (((float)p0[(((int)threadIdx.x) + 3712)]) * ((float)p0[(((int)threadIdx.x) + 3712)]));\n  output_proxy_1[(((int)threadIdx.x) + 3840)] = (((float)p0[(((int)threadIdx.x) + 3840)]) * ((float)p0[(((int)threadIdx.x) + 3840)]));\n  output_proxy_1[(((int)threadIdx.x) + 3968)] = (((float)p0[(((int)threadIdx.x) + 3968)]) * ((float)p0[(((int)threadIdx.x) + 3968)]));\n  output_proxy_1[(((int)threadIdx.x) + 4096)] = (((float)p0[(((int)threadIdx.x) + 4096)]) * ((float)p0[(((int)threadIdx.x) + 4096)]));\n  output_proxy_1[(((int)threadIdx.x) + 4224)] = (((float)p0[(((int)threadIdx.x) + 4224)]) * ((float)p0[(((int)threadIdx.x) + 4224)]));\n  output_proxy_1[(((int)threadIdx.x) + 4352)] = (((float)p0[(((int)threadIdx.x) + 4352)]) * ((float)p0[(((int)threadIdx.x) + 4352)]));\n  output_proxy_1[(((int)threadIdx.x) + 4480)] = (((float)p0[(((int)threadIdx.x) + 4480)]) * ((float)p0[(((int)threadIdx.x) + 4480)]));\n  output_proxy_1[(((int)threadIdx.x) + 4608)] = (((float)p0[(((int)threadIdx.x) + 4608)]) * ((float)p0[(((int)threadIdx.x) + 4608)]));\n  output_proxy_1[(((int)threadIdx.x) + 4736)] = (((float)p0[(((int)threadIdx.x) + 4736)]) * ((float)p0[(((int)threadIdx.x) + 4736)]));\n  output_proxy_1[(((int)threadIdx.x) + 4864)] = (((float)p0[(((int)threadIdx.x) + 4864)]) * ((float)p0[(((int)threadIdx.x) + 4864)]));\n  output_proxy_1[(((int)threadIdx.x) + 4992)] = (((float)p0[(((int)threadIdx.x) + 4992)]) * ((float)p0[(((int)threadIdx.x) + 4992)]));\n  output_proxy_1[(((int)threadIdx.x) + 5120)] = (((float)p0[(((int)threadIdx.x) + 5120)]) * ((float)p0[(((int)threadIdx.x) + 5120)]));\n  output_proxy_1[(((int)threadIdx.x) + 5248)] = (((float)p0[(((int)threadIdx.x) + 5248)]) * ((float)p0[(((int)threadIdx.x) + 5248)]));\n  output_proxy_1[(((int)threadIdx.x) + 5376)] = (((float)p0[(((int)threadIdx.x) + 5376)]) * ((float)p0[(((int)threadIdx.x) + 5376)]));\n  output_proxy_1[(((int)threadIdx.x) + 5504)] = (((float)p0[(((int)threadIdx.x) + 5504)]) * ((float)p0[(((int)threadIdx.x) + 5504)]));\n  output_proxy_1[(((int)threadIdx.x) + 5632)] = (((float)p0[(((int)threadIdx.x) + 5632)]) * ((float)p0[(((int)threadIdx.x) + 5632)]));\n  output_proxy_1[(((int)threadIdx.x) + 5760)] = (((float)p0[(((int)threadIdx.x) + 5760)]) * ((float)p0[(((int)threadIdx.x) + 5760)]));\n  output_proxy_1[(((int)threadIdx.x) + 5888)] = (((float)p0[(((int)threadIdx.x) + 5888)]) * ((float)p0[(((int)threadIdx.x) + 5888)]));\n  output_proxy_1[(((int)threadIdx.x) + 6016)] = (((float)p0[(((int)threadIdx.x) + 6016)]) * ((float)p0[(((int)threadIdx.x) + 6016)]));\n  output_proxy_1[(((int)threadIdx.x) + 6144)] = (((float)p0[(((int)threadIdx.x) + 6144)]) * ((float)p0[(((int)threadIdx.x) + 6144)]));\n  output_proxy_1[(((int)threadIdx.x) + 6272)] = (((float)p0[(((int)threadIdx.x) + 6272)]) * ((float)p0[(((int)threadIdx.x) + 6272)]));\n  output_proxy_1[(((int)threadIdx.x) + 6400)] = (((float)p0[(((int)threadIdx.x) + 6400)]) * ((float)p0[(((int)threadIdx.x) + 6400)]));\n  output_proxy_1[(((int)threadIdx.x) + 6528)] = (((float)p0[(((int)threadIdx.x) + 6528)]) * ((float)p0[(((int)threadIdx.x) + 6528)]));\n  output_proxy_1[(((int)threadIdx.x) + 6656)] = (((float)p0[(((int)threadIdx.x) + 6656)]) * ((float)p0[(((int)threadIdx.x) + 6656)]));\n  output_proxy_1[(((int)threadIdx.x) + 6784)] = (((float)p0[(((int)threadIdx.x) + 6784)]) * ((float)p0[(((int)threadIdx.x) + 6784)]));\n  output_proxy_1[(((int)threadIdx.x) + 6912)] = (((float)p0[(((int)threadIdx.x) + 6912)]) * ((float)p0[(((int)threadIdx.x) + 6912)]));\n  output_proxy_1[(((int)threadIdx.x) + 7040)] = (((float)p0[(((int)threadIdx.x) + 7040)]) * ((float)p0[(((int)threadIdx.x) + 7040)]));\n  output_proxy_1[(((int)threadIdx.x) + 7168)] = (((float)p0[(((int)threadIdx.x) + 7168)]) * ((float)p0[(((int)threadIdx.x) + 7168)]));\n  output_proxy_1[(((int)threadIdx.x) + 7296)] = (((float)p0[(((int)threadIdx.x) + 7296)]) * ((float)p0[(((int)threadIdx.x) + 7296)]));\n  output_proxy_1[(((int)threadIdx.x) + 7424)] = (((float)p0[(((int)threadIdx.x) + 7424)]) * ((float)p0[(((int)threadIdx.x) + 7424)]));\n  output_proxy_1[(((int)threadIdx.x) + 7552)] = (((float)p0[(((int)threadIdx.x) + 7552)]) * ((float)p0[(((int)threadIdx.x) + 7552)]));\n  output_proxy_1[(((int)threadIdx.x) + 7680)] = (((float)p0[(((int)threadIdx.x) + 7680)]) * ((float)p0[(((int)threadIdx.x) + 7680)]));\n  output_proxy_1[(((int)threadIdx.x) + 7808)] = (((float)p0[(((int)threadIdx.x) + 7808)]) * ((float)p0[(((int)threadIdx.x) + 7808)]));\n  output_proxy_1[(((int)threadIdx.x) + 7936)] = (((float)p0[(((int)threadIdx.x) + 7936)]) * ((float)p0[(((int)threadIdx.x) + 7936)]));\n  output_proxy_1[(((int)threadIdx.x) + 8064)] = (((float)p0[(((int)threadIdx.x) + 8064)]) * ((float)p0[(((int)threadIdx.x) + 8064)]));\n  __syncthreads();\n}\n\n__device__ void Group0_1_mean_add_sqrt_divide_1(float* __restrict__ p0, float* __restrict__ T_divide_7, char* shared) {\n  float normal_reduce_temp0[1];\n  float* p0_shared = (float*)p0;\n  __shared__ float red_buf0[128];\n  normal_reduce_temp0[0] = 0.000000e+00f;\n  for (int k2_inner_outer = 0; k2_inner_outer < 64; ++k2_inner_outer) {\n    normal_reduce_temp0[0] = (normal_reduce_temp0[0] + p0_shared[((k2_inner_outer * 128) + ((int)threadIdx.x))]);\n  }\n  __syncthreads();\n  ((volatile float*)red_buf0)[((int)threadIdx.x)] = normal_reduce_temp0[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 64)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    float w_16_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_16_0;\n    float w_8_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_8_0;\n    float w_4_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_4_0;\n    float w_2_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_2_0;\n    float w_1_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_1_0;\n  }\n  __syncthreads();\n  T_divide_7[0] = (1.000000e+00f / sqrtf(((((volatile float*)red_buf0)[0] * 1.220703e-04f) + 1.000000e-05f)));\n}\n\n__global__ void __launch_bounds__(128) Group0(half* input0, float* output0, float* output1) {\n  __shared__ char shared[32768];\n  Group0_0_cast_multiply_0(input0, output0, (float*)(shared+0), shared+0);\n  Group0_1_mean_add_sqrt_divide_1((float*)(shared+0), output1, shared+32768);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      1,
      1,
      1
    ],
    "latency": 0.005119999870657921,
    "name": "Group0",
    "gain": 0.002238870831206441
  },
  {
    "nodes": [
      23,
      24
    ],
    "node_names": [
      "multiply_cast_multiply_23",
      "reshape_cast_cast_reshape_24"
    ],
    "group_id": 13,
    "input_desc": [
      [
        "multiply_cast_multiply_23",
        23,
        0
      ],
      [
        "multiply_cast_multiply_23",
        23,
        1
      ],
      [
        "multiply_cast_multiply_23",
        23,
        2
      ]
    ],
    "output_desc": [
      [
        "reshape_cast_cast_reshape_24",
        24,
        0
      ]
    ],
    "code": "__device__ void Group13_0_multiply_cast_multiply_23(float* __restrict__ p0, float* __restrict__ p1, half* __restrict__ p2, half* __restrict__ T_multiply_5, char* shared) {\n  __syncthreads();\n  T_multiply_5[(((int)threadIdx.x) * 2)] = (p2[((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2))] * ((half)(p0[((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2))] * p1[0])));\n  T_multiply_5[((((int)threadIdx.x) * 2) + 1)] = (p2[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2)) + 1)] * ((half)(p0[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2)) + 1)] * p1[0])));\n  __syncthreads();\n}\n\n__device__ void Group13_1_reshape_cast_cast_reshape_24(half* __restrict__ p0, int8_t* __restrict__ T_reshape_4, char* shared) {\n  half* p0_shared = (half*)p0;\n  T_reshape_4[((((int)blockIdx.x) * 256) + ((int)threadIdx.x))] = ((signed char)((float)p0_shared[((int)threadIdx.x)]));\n  T_reshape_4[(((((int)blockIdx.x) * 256) + ((int)threadIdx.x)) + 128)] = ((signed char)((float)p0_shared[(((int)threadIdx.x) + 128)]));\n}\n\n__global__ void __launch_bounds__(128) Group13(float* input0, float* input1, half* input2, int8_t* output0) {\n  __shared__ char shared[512];\n  Group13_0_multiply_cast_multiply_23(input0, input1, input2, (half*)(shared+0), shared+0);\n  Group13_1_reshape_cast_cast_reshape_24((half*)(shared+0), output0, shared+512);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      32,
      1,
      1
    ],
    "latency": 0.002898666774854064,
    "name": "Group13",
    "gain": 0.002440761774778366
  },
  {
    "nodes": [
      25,
      26
    ],
    "node_names": [
      "ladder_quant_linear_cast_25",
      "reshape_26"
    ],
    "group_id": 14,
    "input_desc": [
      [
        "ladder_quant_linear_cast_25",
        25,
        0
      ],
      [
        "ladder_quant_linear_cast_25",
        25,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_26",
        26,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group14(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int in_thread_T_quant_linear_local[1];\n  signed char p0_local[16];\n  signed char p1_local[2];\n  signed char B_decode_local[16];\n  __shared__ int red_buf0[128];\n  in_thread_T_quant_linear_local[0] = 0;\n  for (int k_0 = 0; k_0 < 8; ++k_0) {\n    *(int4*)(p0_local + 0) = *(int4*)(p0 + ((k_0 * 1024) + (((int)threadIdx.x) * 16)));\n    *(char2*)(p1_local + 0) = *(char2*)(p1 + ((((((int)blockIdx.x) * 2048) + (((int)threadIdx.y) * 1024)) + (k_0 * 128)) + (((int)threadIdx.x) * 2)));\n    for (int ax1 = 0; ax1 < 16; ++ax1) {\n      B_decode_local[ax1] = ((p1_local[(ax1 >> 3)] >> ((signed char)(ax1 & 7))) & (signed char)1);\n    }\n    for (int k_2_0 = 0; k_2_0 < 4; ++k_2_0) {\n      in_thread_T_quant_linear_local[0] = __dp4a(*(int *)&p0_local[((k_2_0 * 4))],*(int *)&B_decode_local[((k_2_0 * 4))], in_thread_T_quant_linear_local[0]);\n    }\n  }\n  __syncthreads();\n  ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = in_thread_T_quant_linear_local[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    int w_16_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 16)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_16_0;\n    int w_8_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 8)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_8_0;\n    int w_4_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 4)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_4_0;\n    int w_2_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 2)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_2_0;\n    int w_1_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 1)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_1_0;\n  }\n  __syncthreads();\n  T_cast[((((int)blockIdx.x) * 2) + ((int)threadIdx.y))] = ((half)((volatile int*)red_buf0)[(((int)threadIdx.y) * 64)]);\n}\n\n",
    "block_size": [
      64,
      2,
      1
    ],
    "grid_size": [
      14336,
      1,
      1
    ],
    "latency": 0.08780000358819962,
    "name": "Group14",
    "gain": 0.0
  },
  {
    "nodes": [
      27
    ],
    "node_names": [
      "ladder_quant_linear_cast_27"
    ],
    "group_id": 15,
    "input_desc": [
      [
        "ladder_quant_linear_cast_27",
        27,
        0
      ],
      [
        "ladder_quant_linear_cast_27",
        27,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_quant_linear_cast_27",
        27,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group14(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int in_thread_T_quant_linear_local[1];\n  signed char p0_local[16];\n  signed char p1_local[2];\n  signed char B_decode_local[16];\n  __shared__ int red_buf0[128];\n  in_thread_T_quant_linear_local[0] = 0;\n  for (int k_0 = 0; k_0 < 8; ++k_0) {\n    *(int4*)(p0_local + 0) = *(int4*)(p0 + ((k_0 * 1024) + (((int)threadIdx.x) * 16)));\n    *(char2*)(p1_local + 0) = *(char2*)(p1 + ((((((int)blockIdx.x) * 2048) + (((int)threadIdx.y) * 1024)) + (k_0 * 128)) + (((int)threadIdx.x) * 2)));\n    for (int ax1 = 0; ax1 < 16; ++ax1) {\n      B_decode_local[ax1] = ((p1_local[(ax1 >> 3)] >> ((signed char)(ax1 & 7))) & (signed char)1);\n    }\n    for (int k_2_0 = 0; k_2_0 < 4; ++k_2_0) {\n      in_thread_T_quant_linear_local[0] = __dp4a(*(int *)&p0_local[((k_2_0 * 4))],*(int *)&B_decode_local[((k_2_0 * 4))], in_thread_T_quant_linear_local[0]);\n    }\n  }\n  __syncthreads();\n  ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = in_thread_T_quant_linear_local[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    int w_16_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 16)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_16_0;\n    int w_8_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 8)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_8_0;\n    int w_4_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 4)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_4_0;\n    int w_2_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 2)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_2_0;\n    int w_1_0 = (((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] + ((volatile int*)red_buf0)[(((((int)threadIdx.y) * 64) + ((int)threadIdx.x)) + 1)]);\n    ((volatile int*)red_buf0)[((((int)threadIdx.y) * 64) + ((int)threadIdx.x))] = w_1_0;\n  }\n  __syncthreads();\n  T_cast[((((int)blockIdx.x) * 2) + ((int)threadIdx.y))] = ((half)((volatile int*)red_buf0)[(((int)threadIdx.y) * 64)]);\n}\n\n",
    "block_size": [
      64,
      2,
      1
    ],
    "grid_size": [
      14336,
      1,
      1
    ],
    "latency": 0.08780000358819962,
    "name": "Group14",
    "gain": 0
  },
  {
    "nodes": [
      28
    ],
    "node_names": [
      "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28"
    ],
    "group_id": 16,
    "input_desc": [
      [
        "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28",
        28,
        0
      ],
      [
        "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28",
        28,
        1
      ]
    ],
    "output_desc": [
      [
        "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28",
        28,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group16(half* __restrict__ p0, half* __restrict__ p1, int8_t* __restrict__ T_reshape_9) {\n  \n  T_reshape_9[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4))] = ((signed char)((float)((p0[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4))] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4))]))))) * p1[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4))])));\n  T_reshape_9[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 1)] = ((signed char)((float)((p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 1)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 1)]))))) * p1[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 1)])));\n  T_reshape_9[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 2)] = ((signed char)((float)((p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 2)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 2)]))))) * p1[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 2)])));\n  T_reshape_9[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 3)] = ((signed char)((float)((p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 3)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 3)]))))) * p1[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 3)])));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      56,
      1,
      1
    ],
    "latency": 0.0030719998758286238,
    "name": "Group16",
    "gain": 0
  },
  {
    "nodes": [
      29
    ],
    "node_names": [
      "ladder_quant_linear_cast_29"
    ],
    "group_id": 17,
    "input_desc": [
      [
        "ladder_quant_linear_cast_29",
        29,
        0
      ],
      [
        "ladder_quant_linear_cast_29",
        29,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_quant_linear_cast_29",
        29,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group17(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int in_thread_T_quant_linear_local[1];\n  signed char p0_local[8];\n  signed char p1_local[1];\n  signed char B_decode_local[8];\n  __shared__ int red_buf0[128];\n  in_thread_T_quant_linear_local[0] = 0;\n  for (int k_0 = 0; k_0 < 28; ++k_0) {\n    *(int2*)(p0_local + 0) = *(int2*)(p0 + ((k_0 * 1024) + (((int)threadIdx.x) * 8)));\n    p1_local[0] = p1[(((((int)blockIdx.x) * 3584) + (k_0 * 128)) + ((int)threadIdx.x))];\n    for (int ax1 = 0; ax1 < 8; ++ax1) {\n      B_decode_local[ax1] = ((p1_local[0] >> ((signed char)ax1)) & (signed char)1);\n    }\n    for (int k_2_0 = 0; k_2_0 < 2; ++k_2_0) {\n      in_thread_T_quant_linear_local[0] = __dp4a(*(int *)&p0_local[((k_2_0 * 4))],*(int *)&B_decode_local[((k_2_0 * 4))], in_thread_T_quant_linear_local[0]);\n    }\n  }\n  __syncthreads();\n  ((volatile int*)red_buf0)[((int)threadIdx.x)] = in_thread_T_quant_linear_local[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile int*)red_buf0)[((int)threadIdx.x)] = (((volatile int*)red_buf0)[((int)threadIdx.x)] + ((volatile int*)red_buf0)[(((int)threadIdx.x) + 64)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile int*)red_buf0)[((int)threadIdx.x)] = (((volatile int*)red_buf0)[((int)threadIdx.x)] + ((volatile int*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    int w_16_0 = (((volatile int*)red_buf0)[((int)threadIdx.x)] + ((volatile int*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile int*)red_buf0)[((int)threadIdx.x)] = w_16_0;\n    int w_8_0 = (((volatile int*)red_buf0)[((int)threadIdx.x)] + ((volatile int*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile int*)red_buf0)[((int)threadIdx.x)] = w_8_0;\n    int w_4_0 = (((volatile int*)red_buf0)[((int)threadIdx.x)] + ((volatile int*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile int*)red_buf0)[((int)threadIdx.x)] = w_4_0;\n    int w_2_0 = (((volatile int*)red_buf0)[((int)threadIdx.x)] + ((volatile int*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile int*)red_buf0)[((int)threadIdx.x)] = w_2_0;\n    int w_1_0 = (((volatile int*)red_buf0)[((int)threadIdx.x)] + ((volatile int*)red_buf0)[(((int)threadIdx.x) + 1)]);\n    ((volatile int*)red_buf0)[((int)threadIdx.x)] = w_1_0;\n  }\n  __syncthreads();\n  T_cast[((int)blockIdx.x)] = ((half)((volatile int*)red_buf0)[0]);\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      8192,
      1,
      1
    ],
    "latency": 0.0867474228143692,
    "name": "Group17",
    "gain": 0
  },
  {
    "nodes": [
      30
    ],
    "node_names": [
      "reshape_add_30"
    ],
    "group_id": 18,
    "input_desc": [
      [
        "reshape_add_30",
        30,
        0
      ],
      [
        "reshape_add_30",
        30,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_add_30",
        30,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group11(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_add) {\n  \n  T_add[((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2))] = (p1[((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2))] + p0[((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2))]);\n  T_add[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2)) + 1)] = (p1[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2)) + 1)] + p0[(((((int)blockIdx.x) * 256) + (((int)threadIdx.x) * 2)) + 1)]);\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      32,
      1,
      1
    ],
    "latency": 0.0027544614858925343,
    "name": "Group11",
    "gain": 0
  }
]