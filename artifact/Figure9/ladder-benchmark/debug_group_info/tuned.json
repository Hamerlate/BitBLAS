[
  {
    "nodes": [
      0,
      1
    ],
    "node_names": [
      "cast_multiply_0",
      "mean_add_sqrt_divide_1"
    ],
    "group_id": 0,
    "input_desc": [
      [
        "cast_multiply_0",
        0,
        0
      ]
    ],
    "output_desc": [
      [
        "cast_multiply_0",
        0,
        0
      ],
      [
        "mean_add_sqrt_divide_1",
        1,
        0
      ]
    ],
    "code": "__device__ void Group0_0_cast_multiply_0(half* __restrict__ p0, float* __restrict__ output_proxy, float* __restrict__ output_proxy_1, char* shared) {\n  output_proxy[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))] = ((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]);\n  __syncthreads();\n  output_proxy_1[((int)threadIdx.x)] = (((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]) * ((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]));\n  output_proxy_1[(((int)threadIdx.x) + 128)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]));\n  output_proxy_1[(((int)threadIdx.x) + 256)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]));\n  output_proxy_1[(((int)threadIdx.x) + 384)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]));\n  output_proxy_1[(((int)threadIdx.x) + 512)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]));\n  output_proxy_1[(((int)threadIdx.x) + 640)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]));\n  output_proxy_1[(((int)threadIdx.x) + 768)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]));\n  output_proxy_1[(((int)threadIdx.x) + 896)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]));\n  output_proxy_1[(((int)threadIdx.x) + 1024)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]));\n  output_proxy_1[(((int)threadIdx.x) + 1152)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]));\n  output_proxy_1[(((int)threadIdx.x) + 1280)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]));\n  output_proxy_1[(((int)threadIdx.x) + 1408)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]));\n  output_proxy_1[(((int)threadIdx.x) + 1536)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]));\n  output_proxy_1[(((int)threadIdx.x) + 1664)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]));\n  output_proxy_1[(((int)threadIdx.x) + 1792)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]));\n  output_proxy_1[(((int)threadIdx.x) + 1920)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]));\n  output_proxy_1[(((int)threadIdx.x) + 2048)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]));\n  output_proxy_1[(((int)threadIdx.x) + 2176)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]));\n  output_proxy_1[(((int)threadIdx.x) + 2304)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]));\n  output_proxy_1[(((int)threadIdx.x) + 2432)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]));\n  output_proxy_1[(((int)threadIdx.x) + 2560)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]));\n  output_proxy_1[(((int)threadIdx.x) + 2688)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]));\n  output_proxy_1[(((int)threadIdx.x) + 2816)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]));\n  output_proxy_1[(((int)threadIdx.x) + 2944)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]));\n  output_proxy_1[(((int)threadIdx.x) + 3072)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]));\n  output_proxy_1[(((int)threadIdx.x) + 3200)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]));\n  output_proxy_1[(((int)threadIdx.x) + 3328)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]));\n  output_proxy_1[(((int)threadIdx.x) + 3456)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]));\n  output_proxy_1[(((int)threadIdx.x) + 3584)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]));\n  output_proxy_1[(((int)threadIdx.x) + 3712)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]));\n  output_proxy_1[(((int)threadIdx.x) + 3840)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]));\n  output_proxy_1[(((int)threadIdx.x) + 3968)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]));\n  output_proxy_1[(((int)threadIdx.x) + 4096)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]));\n  output_proxy_1[(((int)threadIdx.x) + 4224)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]));\n  output_proxy_1[(((int)threadIdx.x) + 4352)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]));\n  output_proxy_1[(((int)threadIdx.x) + 4480)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]));\n  output_proxy_1[(((int)threadIdx.x) + 4608)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]));\n  output_proxy_1[(((int)threadIdx.x) + 4736)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]));\n  output_proxy_1[(((int)threadIdx.x) + 4864)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]));\n  output_proxy_1[(((int)threadIdx.x) + 4992)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]));\n  output_proxy_1[(((int)threadIdx.x) + 5120)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]));\n  output_proxy_1[(((int)threadIdx.x) + 5248)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]));\n  output_proxy_1[(((int)threadIdx.x) + 5376)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]));\n  output_proxy_1[(((int)threadIdx.x) + 5504)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]));\n  output_proxy_1[(((int)threadIdx.x) + 5632)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]));\n  output_proxy_1[(((int)threadIdx.x) + 5760)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]));\n  output_proxy_1[(((int)threadIdx.x) + 5888)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]));\n  output_proxy_1[(((int)threadIdx.x) + 6016)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]));\n  output_proxy_1[(((int)threadIdx.x) + 6144)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]));\n  output_proxy_1[(((int)threadIdx.x) + 6272)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]));\n  output_proxy_1[(((int)threadIdx.x) + 6400)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]));\n  output_proxy_1[(((int)threadIdx.x) + 6528)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]));\n  output_proxy_1[(((int)threadIdx.x) + 6656)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]));\n  output_proxy_1[(((int)threadIdx.x) + 6784)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]));\n  output_proxy_1[(((int)threadIdx.x) + 6912)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]));\n  output_proxy_1[(((int)threadIdx.x) + 7040)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]));\n  output_proxy_1[(((int)threadIdx.x) + 7168)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]));\n  output_proxy_1[(((int)threadIdx.x) + 7296)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]));\n  output_proxy_1[(((int)threadIdx.x) + 7424)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]));\n  output_proxy_1[(((int)threadIdx.x) + 7552)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]));\n  output_proxy_1[(((int)threadIdx.x) + 7680)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]));\n  output_proxy_1[(((int)threadIdx.x) + 7808)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]));\n  output_proxy_1[(((int)threadIdx.x) + 7936)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]));\n  output_proxy_1[(((int)threadIdx.x) + 8064)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]));\n  __syncthreads();\n}\n\n__device__ void Group0_1_mean_add_sqrt_divide_1(float* __restrict__ p0, float* __restrict__ T_divide_7, char* shared) {\n  float normal_reduce_temp0[1];\n  float* p0_shared = (float*)p0;\n  __shared__ float red_buf0[128];\n  normal_reduce_temp0[0] = 0.000000e+00f;\n  for (int k2_inner_outer = 0; k2_inner_outer < 64; ++k2_inner_outer) {\n    normal_reduce_temp0[0] = (normal_reduce_temp0[0] + p0_shared[((k2_inner_outer * 128) + ((int)threadIdx.x))]);\n  }\n  __syncthreads();\n  ((volatile float*)red_buf0)[((int)threadIdx.x)] = normal_reduce_temp0[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 64)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    float w_16_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_16_0;\n    float w_8_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_8_0;\n    float w_4_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_4_0;\n    float w_2_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_2_0;\n    float w_1_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_1_0;\n  }\n  __syncthreads();\n  T_divide_7[((int)blockIdx.x)] = (1.000000e+00f / sqrtf(((((volatile float*)red_buf0)[0] * 1.220703e-04f) + 1.000000e-05f)));\n}\n\n__global__ void __launch_bounds__(128) Group0(half* input0, float* output0, float* output1) {\n  __shared__ char shared[32768];\n  Group0_0_cast_multiply_0(input0, output0, (float*)(shared+0), shared+0);\n  Group0_1_mean_add_sqrt_divide_1((float*)(shared+0), output1, shared+32768);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      32,
      1,
      1
    ],
    "latency": 0.0053183999843895435,
    "name": "Group0",
    "gain": 0.00362605694681406
  },
  {
    "nodes": [
      2
    ],
    "node_names": [
      "multiply_cast_multiply_reshape_cast_cast_reshape_2"
    ],
    "group_id": 1,
    "input_desc": [
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        0
      ],
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        1
      ],
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        2
      ]
    ],
    "output_desc": [
      [
        "multiply_cast_multiply_reshape_cast_cast_reshape_2",
        2,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group1(float* __restrict__ p0, float* __restrict__ p1, half* __restrict__ p2, int8_t* __restrict__ T_reshape_9) {\n  \n  T_reshape_9[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4))] = ((signed char)((float)(p2[(((((int)blockIdx.x) & 15) * 512) + (((int)threadIdx.x) * 4))] * ((half)(p0[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4))] * p1[(((int)blockIdx.x) >> 4)])))));\n  T_reshape_9[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 1)] = ((signed char)((float)(p2[(((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 1) & 8191)] * ((half)(p0[(((((int)blockIdx.x) >> 4) * 8192) + (((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 1) & 8191))] * p1[(((int)blockIdx.x) >> 4)])))));\n  T_reshape_9[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 2)] = ((signed char)((float)(p2[(((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 2) & 8191)] * ((half)(p0[(((((int)blockIdx.x) >> 4) * 8192) + (((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 2) & 8191))] * p1[(((int)blockIdx.x) >> 4)])))));\n  T_reshape_9[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 3)] = ((signed char)((float)(p2[(((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 3) & 8191)] * ((half)(p0[(((((int)blockIdx.x) >> 4) * 8192) + (((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 3) & 8191))] * p1[(((int)blockIdx.x) >> 4)])))));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      512,
      1,
      1
    ],
    "latency": 0.003909818362444639,
    "name": "Group1",
    "gain": 0
  },
  {
    "nodes": [
      3,
      4
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_3",
      "reshape_reshape_transpose_4"
    ],
    "group_id": 2,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_3",
        3,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_3",
        3,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_reshape_transpose_4",
        4,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group2(int8_t* __restrict__ input0, int8_t* __restrict__ input1, half* __restrict__ output0) {\n  \n  int mediate1_local[16];\n  __shared__ signed char input0_shared[8192];\n  __shared__ signed char mediate0_shared[16384];\n  for (int i2_1_1_init = 0; i2_1_1_init < 2; ++i2_1_1_init) {\n    mediate1_local[i2_1_1_init] = 0;\n    mediate1_local[(i2_1_1_init + 8)] = 0;\n    mediate1_local[(i2_1_1_init + 2)] = 0;\n    mediate1_local[(i2_1_1_init + 10)] = 0;\n    mediate1_local[(i2_1_1_init + 4)] = 0;\n    mediate1_local[(i2_1_1_init + 12)] = 0;\n    mediate1_local[(i2_1_1_init + 6)] = 0;\n    mediate1_local[(i2_1_1_init + 14)] = 0;\n  }\n  for (int k_0 = 0; k_0 < 32; ++k_0) {\n    __syncthreads();\n    *(int4*)(input0_shared + (((int)threadIdx.x) * 16)) = *(int4*)(input0 + ((k_0 * 4096) + (((int)threadIdx.x) * 16)));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 2048)) = *(int4*)(input0 + (((k_0 * 4096) + (((int)threadIdx.x) * 16)) + 2048));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 4096)) = *(int4*)(input0 + (((k_0 * 4096) + (((int)threadIdx.x) * 16)) + 131072));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 6144)) = *(int4*)(input0 + (((k_0 * 4096) + (((int)threadIdx.x) * 16)) + 133120));\n    for (int ax0_ax1_ax2_ax3_fused_1 = 0; ax0_ax1_ax2_ax3_fused_1 < 16; ++ax0_ax1_ax2_ax3_fused_1) {\n      mediate0_shared[((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1)] = ((input1[(((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1 >> 3))] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_1 = 0; ax0_ax1_ax2_ax3_fused_1_1 < 16; ++ax0_ax1_ax2_ax3_fused_1_1) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_1) + 2048)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_1 >> 3)) + 16384)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_2 = 0; ax0_ax1_ax2_ax3_fused_1_2 < 16; ++ax0_ax1_ax2_ax3_fused_1_2) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_2) + 4096)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_2 >> 3)) + 32768)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_2 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_3 = 0; ax0_ax1_ax2_ax3_fused_1_3 < 16; ++ax0_ax1_ax2_ax3_fused_1_3) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_3) + 6144)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_3 >> 3)) + 49152)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_3 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_4 = 0; ax0_ax1_ax2_ax3_fused_1_4 < 16; ++ax0_ax1_ax2_ax3_fused_1_4) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_4) + 8192)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_4 >> 3)) + 65536)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_4 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_5 = 0; ax0_ax1_ax2_ax3_fused_1_5 < 16; ++ax0_ax1_ax2_ax3_fused_1_5) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_5) + 10240)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_5 >> 3)) + 81920)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_5 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_6 = 0; ax0_ax1_ax2_ax3_fused_1_6 < 16; ++ax0_ax1_ax2_ax3_fused_1_6) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_6) + 12288)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_6 >> 3)) + 98304)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_6 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_7 = 0; ax0_ax1_ax2_ax3_fused_1_7 < 16; ++ax0_ax1_ax2_ax3_fused_1_7) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_7) + 14336)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_7 >> 3)) + 114688)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_7 & 7))) & (signed char)1);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 8; ++k_1) {\n      for (int kk_1 = 0; kk_1 < 32; ++kk_1) {\n        for (int i2_1_1 = 0; i2_1_1 < 2; ++i2_1_1) {\n          mediate1_local[i2_1_1] = (mediate1_local[i2_1_1] + (((int)input0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)mediate0_shared[((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          mediate1_local[(i2_1_1 + 8)] = (mediate1_local[(i2_1_1 + 8)] + (((int)input0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)mediate0_shared[((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          mediate1_local[(i2_1_1 + 2)] = (mediate1_local[(i2_1_1 + 2)] + (((int)input0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          mediate1_local[(i2_1_1 + 10)] = (mediate1_local[(i2_1_1 + 10)] + (((int)input0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          mediate1_local[(i2_1_1 + 4)] = (mediate1_local[(i2_1_1 + 4)] + (((int)input0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          mediate1_local[(i2_1_1 + 12)] = (mediate1_local[(i2_1_1 + 12)] + (((int)input0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          mediate1_local[(i2_1_1 + 6)] = (mediate1_local[(i2_1_1 + 6)] + (((int)input0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n          mediate1_local[(i2_1_1 + 14)] = (mediate1_local[(i2_1_1 + 14)] + (((int)input0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n        }\n      }\n    }\n  }\n  for (int ax0 = 0; ax0 < 2; ++ax0) {\n    output0[((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7))] = ((half)mediate1_local[ax0]);\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 128)] = ((half)mediate1_local[(ax0 + 8)]);\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 512)] = ((half)mediate1_local[(ax0 + 2)]);\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 640)] = ((half)mediate1_local[(ax0 + 10)]);\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1024)] = ((half)mediate1_local[(ax0 + 4)]);\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1152)] = ((half)mediate1_local[(ax0 + 12)]);\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1536)] = ((half)mediate1_local[(ax0 + 6)]);\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1664)] = ((half)mediate1_local[(ax0 + 14)]);\n  }\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      128,
      1,
      1
    ],
    "latency": 0.9676735997200012,
    "name": "Group2",
    "gain": 0.002688645152375102
  },
  {
    "nodes": [
      5
    ],
    "node_names": [
      "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5"
    ],
    "group_id": 3,
    "input_desc": [
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        0
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        1
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        2
      ]
    ],
    "output_desc": [
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_reshape_5",
        5,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group3(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ p2, half* __restrict__ T_reshape) {\n  \n  T_reshape[(((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2))] = ((p0[(((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2))] * p1[(((((int)blockIdx.x) & 1) * 64) + ((((int)threadIdx.x) & 15) * 2))]) + ((((((int)blockIdx.x) & 1) == 1) ? p0[((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)threadIdx.x) & 15) * 2))] : (__float2half_rn(0.000000e+00f) - p0[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 64)])) * p2[(((((int)blockIdx.x) & 1) * 64) + ((((int)threadIdx.x) & 15) * 2))]));\n  T_reshape[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 32)] = ((p0[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 32)] * p1[((((((int)blockIdx.x) & 1) * 64) + ((((int)threadIdx.x) & 15) * 2)) + 32)]) + ((((((int)blockIdx.x) & 1) == 1) ? p0[(((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)threadIdx.x) & 15) * 2)) + 32)] : (__float2half_rn(0.000000e+00f) - p0[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 96)])) * p2[((((((int)blockIdx.x) & 1) * 64) + ((((int)threadIdx.x) & 15) * 2)) + 32)]));\n  T_reshape[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 1)] = ((p0[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 1)] * p1[((((((int)blockIdx.x) & 1) * 64) + ((((int)threadIdx.x) & 15) * 2)) + 1)]) + ((((((int)blockIdx.x) & 1) == 1) ? p0[(((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)threadIdx.x) & 15) * 2)) + 1)] : (__float2half_rn(0.000000e+00f) - p0[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 65)])) * p2[((((((int)blockIdx.x) & 1) * 64) + ((((int)threadIdx.x) & 15) * 2)) + 1)]));\n  T_reshape[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 33)] = ((p0[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 33)] * p1[((((((int)blockIdx.x) & 1) * 64) + ((((int)threadIdx.x) & 15) * 2)) + 33)]) + ((((((int)blockIdx.x) & 1) == 1) ? p0[(((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)threadIdx.x) & 15) * 2)) + 33)] : (__float2half_rn(0.000000e+00f) - p0[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 128)) + ((((int)blockIdx.x) & 1) * 64)) + ((((int)threadIdx.x) & 15) * 2)) + 97)])) * p2[((((((int)blockIdx.x) & 1) * 64) + ((((int)threadIdx.x) & 15) * 2)) + 33)]));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      512,
      1,
      1
    ],
    "latency": 0.004403200000524521,
    "name": "Group3",
    "gain": 0
  },
  {
    "nodes": [
      6,
      7
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_6",
      "reshape_reshape_transpose_7"
    ],
    "group_id": 4,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_6",
        6,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_6",
        6,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_reshape_transpose_7",
        7,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group4(int8_t* __restrict__ input0, int8_t* __restrict__ input1, half* __restrict__ output0) {\n  \n  int mediate1_local[2];\n  __shared__ signed char input0_shared[16384];\n  __shared__ signed char mediate0_shared[4096];\n  for (int i2_1_1_init = 0; i2_1_1_init < 2; ++i2_1_1_init) {\n    mediate1_local[i2_1_1_init] = 0;\n  }\n  for (int k_0 = 0; k_0 < 16; ++k_0) {\n    __syncthreads();\n    *(int4*)(input0_shared + (((int)threadIdx.x) * 16)) = *(int4*)(input0 + ((k_0 * 8192) + (((int)threadIdx.x) * 16)));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 2048)) = *(int4*)(input0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 2048));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 4096)) = *(int4*)(input0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 4096));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 6144)) = *(int4*)(input0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 6144));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 8192)) = *(int4*)(input0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 131072));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 10240)) = *(int4*)(input0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 133120));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 12288)) = *(int4*)(input0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 135168));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 14336)) = *(int4*)(input0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 137216));\n    for (int ax0_ax1_ax2_fused_1 = 0; ax0_ax1_ax2_fused_1 < 16; ++ax0_ax1_ax2_fused_1) {\n      mediate0_shared[((((int)threadIdx.x) * 16) + ax0_ax1_ax2_fused_1)] = ((input1[(((((((((int)blockIdx.x) >> 1) * 16384) + (k_0 * 1024)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_fused_1 >> 3))] >> ((signed char)(ax0_ax1_ax2_fused_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_fused_1_1 = 0; ax0_ax1_ax2_fused_1_1 < 16; ++ax0_ax1_ax2_fused_1_1) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_fused_1_1) + 2048)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 16384) + (k_0 * 1024)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_fused_1_1 >> 3)) + 512)] >> ((signed char)(ax0_ax1_ax2_fused_1_1 & 7))) & (signed char)1);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 16; ++k_1) {\n      for (int kk_1 = 0; kk_1 < 32; ++kk_1) {\n        for (int i2_1_1 = 0; i2_1_1 < 2; ++i2_1_1) {\n          mediate1_local[i2_1_1] = (mediate1_local[i2_1_1] + (((int)input0_shared[((((((((int)threadIdx.x) >> 6) * 8192) + (k_1 * 512)) + (((((int)threadIdx.x) & 63) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)mediate0_shared[(((k_1 * 256) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n        }\n      }\n    }\n  }\n  for (int ax0 = 0; ax0 < 2; ++ax0) {\n    output0[(((((((int)threadIdx.x) >> 6) * 16384) + ((((int)blockIdx.x) >> 1) * 256)) + (((((int)threadIdx.x) & 63) >> 5) * 128)) + (((((((((int)threadIdx.x) & 63) >> 3) * 32) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) & 127))] = ((half)mediate1_local[ax0]);\n  }\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      128,
      1,
      1
    ],
    "latency": 0.34426242113113403,
    "name": "Group4",
    "gain": 0.0032653985545039177
  },
  {
    "nodes": [
      8,
      9,
      10,
      11,
      12,
      13,
      14
    ],
    "node_names": [
      "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
      "nn_batch_matmul_9",
      "reshape_divide_10",
      "max_11",
      "subtract_exp_12",
      "sum_13",
      "divide_cast_cast_reshape_14"
    ],
    "group_id": 5,
    "input_desc": [
      [
        "nn_batch_matmul_9",
        9,
        0
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
        8,
        0
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
        8,
        1
      ],
      [
        "multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8",
        8,
        2
      ]
    ],
    "output_desc": [
      [
        "divide_cast_cast_reshape_14",
        14,
        0
      ]
    ],
    "code": "__device__ void Group5_0_multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ p2, half* __restrict__ T_transpose_15, char* shared) {\n  __syncthreads();\n  T_transpose_15[(((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2))] = ((p0[((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2))] * p1[((((int)threadIdx.x) & 7) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 64)]) * p2[((((int)threadIdx.x) & 7) * 2)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 16)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 16)] * p1[(((((int)threadIdx.x) & 7) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 80)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 16)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 32)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 32)] * p1[(((((int)threadIdx.x) & 7) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 96)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 32)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 48)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 48)] * p1[(((((int)threadIdx.x) & 7) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 112)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 48)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 64)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 64)] * p1[(((((int)threadIdx.x) & 7) * 2) + 64)]) + (p0[((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2))] * p2[(((((int)threadIdx.x) & 7) * 2) + 64)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 80)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 80)] * p1[(((((int)threadIdx.x) & 7) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 16)] * p2[(((((int)threadIdx.x) & 7) * 2) + 80)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 96)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 96)] * p1[(((((int)threadIdx.x) & 7) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 32)] * p2[(((((int)threadIdx.x) & 7) * 2) + 96)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 112)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 112)] * p1[(((((int)threadIdx.x) & 7) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 48)] * p2[(((((int)threadIdx.x) & 7) * 2) + 112)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1024)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 128)] * p1[((((int)threadIdx.x) & 7) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 192)]) * p2[((((int)threadIdx.x) & 7) * 2)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1040)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 144)] * p1[(((((int)threadIdx.x) & 7) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 208)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 16)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1056)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 160)] * p1[(((((int)threadIdx.x) & 7) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 224)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 32)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1072)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 176)] * p1[(((((int)threadIdx.x) & 7) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 240)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 48)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1088)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 192)] * p1[(((((int)threadIdx.x) & 7) * 2) + 64)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 128)] * p2[(((((int)threadIdx.x) & 7) * 2) + 64)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1104)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 208)] * p1[(((((int)threadIdx.x) & 7) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 144)] * p2[(((((int)threadIdx.x) & 7) * 2) + 80)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1120)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 224)] * p1[(((((int)threadIdx.x) & 7) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 160)] * p2[(((((int)threadIdx.x) & 7) * 2) + 96)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1136)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 240)] * p1[(((((int)threadIdx.x) & 7) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 176)] * p2[(((((int)threadIdx.x) & 7) * 2) + 112)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2048)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 256)] * p1[((((int)threadIdx.x) & 7) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 320)]) * p2[((((int)threadIdx.x) & 7) * 2)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2064)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 272)] * p1[(((((int)threadIdx.x) & 7) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 336)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 16)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2080)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 288)] * p1[(((((int)threadIdx.x) & 7) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 352)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 32)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2096)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 304)] * p1[(((((int)threadIdx.x) & 7) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 368)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 48)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2112)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 320)] * p1[(((((int)threadIdx.x) & 7) * 2) + 64)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 256)] * p2[(((((int)threadIdx.x) & 7) * 2) + 64)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2128)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 336)] * p1[(((((int)threadIdx.x) & 7) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 272)] * p2[(((((int)threadIdx.x) & 7) * 2) + 80)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2144)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 352)] * p1[(((((int)threadIdx.x) & 7) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 288)] * p2[(((((int)threadIdx.x) & 7) * 2) + 96)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2160)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 368)] * p1[(((((int)threadIdx.x) & 7) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 304)] * p2[(((((int)threadIdx.x) & 7) * 2) + 112)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3072)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 384)] * p1[((((int)threadIdx.x) & 7) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 448)]) * p2[((((int)threadIdx.x) & 7) * 2)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3088)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 400)] * p1[(((((int)threadIdx.x) & 7) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 464)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 16)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3104)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 416)] * p1[(((((int)threadIdx.x) & 7) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 480)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 32)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3120)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 432)] * p1[(((((int)threadIdx.x) & 7) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 496)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 48)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3136)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 448)] * p1[(((((int)threadIdx.x) & 7) * 2) + 64)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 384)] * p2[(((((int)threadIdx.x) & 7) * 2) + 64)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3152)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 464)] * p1[(((((int)threadIdx.x) & 7) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 400)] * p2[(((((int)threadIdx.x) & 7) * 2) + 80)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3168)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 480)] * p1[(((((int)threadIdx.x) & 7) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 416)] * p2[(((((int)threadIdx.x) & 7) * 2) + 96)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3184)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 496)] * p1[(((((int)threadIdx.x) & 7) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 432)] * p2[(((((int)threadIdx.x) & 7) * 2) + 112)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4096)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 512)] * p1[((((int)threadIdx.x) & 7) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 576)]) * p2[((((int)threadIdx.x) & 7) * 2)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4112)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 528)] * p1[(((((int)threadIdx.x) & 7) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 592)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 16)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4128)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 544)] * p1[(((((int)threadIdx.x) & 7) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 608)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 32)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4144)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 560)] * p1[(((((int)threadIdx.x) & 7) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 624)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 48)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4160)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 576)] * p1[(((((int)threadIdx.x) & 7) * 2) + 64)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 512)] * p2[(((((int)threadIdx.x) & 7) * 2) + 64)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4176)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 592)] * p1[(((((int)threadIdx.x) & 7) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 528)] * p2[(((((int)threadIdx.x) & 7) * 2) + 80)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4192)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 608)] * p1[(((((int)threadIdx.x) & 7) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 544)] * p2[(((((int)threadIdx.x) & 7) * 2) + 96)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4208)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 624)] * p1[(((((int)threadIdx.x) & 7) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 560)] * p2[(((((int)threadIdx.x) & 7) * 2) + 112)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5120)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 640)] * p1[((((int)threadIdx.x) & 7) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 704)]) * p2[((((int)threadIdx.x) & 7) * 2)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5136)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 656)] * p1[(((((int)threadIdx.x) & 7) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 720)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 16)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5152)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 672)] * p1[(((((int)threadIdx.x) & 7) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 736)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 32)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5168)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 688)] * p1[(((((int)threadIdx.x) & 7) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 752)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 48)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5184)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 704)] * p1[(((((int)threadIdx.x) & 7) * 2) + 64)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 640)] * p2[(((((int)threadIdx.x) & 7) * 2) + 64)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5200)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 720)] * p1[(((((int)threadIdx.x) & 7) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 656)] * p2[(((((int)threadIdx.x) & 7) * 2) + 80)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5216)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 736)] * p1[(((((int)threadIdx.x) & 7) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 672)] * p2[(((((int)threadIdx.x) & 7) * 2) + 96)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5232)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 752)] * p1[(((((int)threadIdx.x) & 7) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 688)] * p2[(((((int)threadIdx.x) & 7) * 2) + 112)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6144)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 768)] * p1[((((int)threadIdx.x) & 7) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 832)]) * p2[((((int)threadIdx.x) & 7) * 2)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6160)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 784)] * p1[(((((int)threadIdx.x) & 7) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 848)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 16)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6176)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 800)] * p1[(((((int)threadIdx.x) & 7) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 864)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 32)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6192)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 816)] * p1[(((((int)threadIdx.x) & 7) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 880)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 48)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6208)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 832)] * p1[(((((int)threadIdx.x) & 7) * 2) + 64)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 768)] * p2[(((((int)threadIdx.x) & 7) * 2) + 64)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6224)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 848)] * p1[(((((int)threadIdx.x) & 7) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 784)] * p2[(((((int)threadIdx.x) & 7) * 2) + 80)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6240)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 864)] * p1[(((((int)threadIdx.x) & 7) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 800)] * p2[(((((int)threadIdx.x) & 7) * 2) + 96)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6256)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 880)] * p1[(((((int)threadIdx.x) & 7) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 816)] * p2[(((((int)threadIdx.x) & 7) * 2) + 112)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7168)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 896)] * p1[((((int)threadIdx.x) & 7) * 2)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 960)]) * p2[((((int)threadIdx.x) & 7) * 2)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7184)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 912)] * p1[(((((int)threadIdx.x) & 7) * 2) + 16)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 976)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 16)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7200)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 928)] * p1[(((((int)threadIdx.x) & 7) * 2) + 32)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 992)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 32)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7216)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 944)] * p1[(((((int)threadIdx.x) & 7) * 2) + 48)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 1008)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 48)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7232)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 960)] * p1[(((((int)threadIdx.x) & 7) * 2) + 64)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 896)] * p2[(((((int)threadIdx.x) & 7) * 2) + 64)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7248)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 976)] * p1[(((((int)threadIdx.x) & 7) * 2) + 80)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 912)] * p2[(((((int)threadIdx.x) & 7) * 2) + 80)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7264)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 992)] * p1[(((((int)threadIdx.x) & 7) * 2) + 96)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 928)] * p2[(((((int)threadIdx.x) & 7) * 2) + 96)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7280)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 1008)] * p1[(((((int)threadIdx.x) & 7) * 2) + 112)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 944)] * p2[(((((int)threadIdx.x) & 7) * 2) + 112)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 1)] * p1[(((((int)threadIdx.x) & 7) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 65)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 1)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 17)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 17)] * p1[(((((int)threadIdx.x) & 7) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 81)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 17)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 33)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 33)] * p1[(((((int)threadIdx.x) & 7) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 97)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 33)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 49)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 49)] * p1[(((((int)threadIdx.x) & 7) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 113)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 49)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 65)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 65)] * p1[(((((int)threadIdx.x) & 7) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 1)] * p2[(((((int)threadIdx.x) & 7) * 2) + 65)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 81)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 81)] * p1[(((((int)threadIdx.x) & 7) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 17)] * p2[(((((int)threadIdx.x) & 7) * 2) + 81)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 97)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 97)] * p1[(((((int)threadIdx.x) & 7) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 33)] * p2[(((((int)threadIdx.x) & 7) * 2) + 97)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 113)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 113)] * p1[(((((int)threadIdx.x) & 7) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 49)] * p2[(((((int)threadIdx.x) & 7) * 2) + 113)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1025)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 129)] * p1[(((((int)threadIdx.x) & 7) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 193)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 1)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1041)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 145)] * p1[(((((int)threadIdx.x) & 7) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 209)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 17)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1057)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 161)] * p1[(((((int)threadIdx.x) & 7) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 225)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 33)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1073)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 177)] * p1[(((((int)threadIdx.x) & 7) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 241)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 49)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1089)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 193)] * p1[(((((int)threadIdx.x) & 7) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 129)] * p2[(((((int)threadIdx.x) & 7) * 2) + 65)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1105)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 209)] * p1[(((((int)threadIdx.x) & 7) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 145)] * p2[(((((int)threadIdx.x) & 7) * 2) + 81)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1121)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 225)] * p1[(((((int)threadIdx.x) & 7) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 161)] * p2[(((((int)threadIdx.x) & 7) * 2) + 97)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 1137)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 241)] * p1[(((((int)threadIdx.x) & 7) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 177)] * p2[(((((int)threadIdx.x) & 7) * 2) + 113)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2049)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 257)] * p1[(((((int)threadIdx.x) & 7) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 321)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 1)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2065)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 273)] * p1[(((((int)threadIdx.x) & 7) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 337)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 17)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2081)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 289)] * p1[(((((int)threadIdx.x) & 7) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 353)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 33)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2097)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 305)] * p1[(((((int)threadIdx.x) & 7) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 369)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 49)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2113)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 321)] * p1[(((((int)threadIdx.x) & 7) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 257)] * p2[(((((int)threadIdx.x) & 7) * 2) + 65)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2129)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 337)] * p1[(((((int)threadIdx.x) & 7) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 273)] * p2[(((((int)threadIdx.x) & 7) * 2) + 81)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2145)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 353)] * p1[(((((int)threadIdx.x) & 7) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 289)] * p2[(((((int)threadIdx.x) & 7) * 2) + 97)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 2161)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 369)] * p1[(((((int)threadIdx.x) & 7) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 305)] * p2[(((((int)threadIdx.x) & 7) * 2) + 113)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3073)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 385)] * p1[(((((int)threadIdx.x) & 7) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 449)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 1)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3089)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 401)] * p1[(((((int)threadIdx.x) & 7) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 465)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 17)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3105)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 417)] * p1[(((((int)threadIdx.x) & 7) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 481)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 33)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3121)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 433)] * p1[(((((int)threadIdx.x) & 7) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 497)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 49)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3137)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 449)] * p1[(((((int)threadIdx.x) & 7) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 385)] * p2[(((((int)threadIdx.x) & 7) * 2) + 65)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3153)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 465)] * p1[(((((int)threadIdx.x) & 7) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 401)] * p2[(((((int)threadIdx.x) & 7) * 2) + 81)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3169)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 481)] * p1[(((((int)threadIdx.x) & 7) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 417)] * p2[(((((int)threadIdx.x) & 7) * 2) + 97)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 3185)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 497)] * p1[(((((int)threadIdx.x) & 7) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 433)] * p2[(((((int)threadIdx.x) & 7) * 2) + 113)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4097)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 513)] * p1[(((((int)threadIdx.x) & 7) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 577)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 1)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4113)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 529)] * p1[(((((int)threadIdx.x) & 7) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 593)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 17)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4129)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 545)] * p1[(((((int)threadIdx.x) & 7) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 609)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 33)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4145)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 561)] * p1[(((((int)threadIdx.x) & 7) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 625)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 49)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4161)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 577)] * p1[(((((int)threadIdx.x) & 7) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 513)] * p2[(((((int)threadIdx.x) & 7) * 2) + 65)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4177)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 593)] * p1[(((((int)threadIdx.x) & 7) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 529)] * p2[(((((int)threadIdx.x) & 7) * 2) + 81)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4193)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 609)] * p1[(((((int)threadIdx.x) & 7) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 545)] * p2[(((((int)threadIdx.x) & 7) * 2) + 97)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 4209)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 625)] * p1[(((((int)threadIdx.x) & 7) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 561)] * p2[(((((int)threadIdx.x) & 7) * 2) + 113)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5121)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 641)] * p1[(((((int)threadIdx.x) & 7) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 705)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 1)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5137)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 657)] * p1[(((((int)threadIdx.x) & 7) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 721)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 17)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5153)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 673)] * p1[(((((int)threadIdx.x) & 7) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 737)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 33)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5169)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 689)] * p1[(((((int)threadIdx.x) & 7) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 753)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 49)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5185)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 705)] * p1[(((((int)threadIdx.x) & 7) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 641)] * p2[(((((int)threadIdx.x) & 7) * 2) + 65)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5201)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 721)] * p1[(((((int)threadIdx.x) & 7) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 657)] * p2[(((((int)threadIdx.x) & 7) * 2) + 81)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5217)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 737)] * p1[(((((int)threadIdx.x) & 7) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 673)] * p2[(((((int)threadIdx.x) & 7) * 2) + 97)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 5233)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 753)] * p1[(((((int)threadIdx.x) & 7) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 689)] * p2[(((((int)threadIdx.x) & 7) * 2) + 113)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6145)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 769)] * p1[(((((int)threadIdx.x) & 7) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 833)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 1)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6161)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 785)] * p1[(((((int)threadIdx.x) & 7) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 849)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 17)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6177)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 801)] * p1[(((((int)threadIdx.x) & 7) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 865)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 33)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6193)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 817)] * p1[(((((int)threadIdx.x) & 7) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 881)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 49)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6209)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 833)] * p1[(((((int)threadIdx.x) & 7) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 769)] * p2[(((((int)threadIdx.x) & 7) * 2) + 65)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6225)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 849)] * p1[(((((int)threadIdx.x) & 7) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 785)] * p2[(((((int)threadIdx.x) & 7) * 2) + 81)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6241)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 865)] * p1[(((((int)threadIdx.x) & 7) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 801)] * p2[(((((int)threadIdx.x) & 7) * 2) + 97)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 6257)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 881)] * p1[(((((int)threadIdx.x) & 7) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 817)] * p2[(((((int)threadIdx.x) & 7) * 2) + 113)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7169)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 897)] * p1[(((((int)threadIdx.x) & 7) * 2) + 1)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 961)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 1)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7185)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 913)] * p1[(((((int)threadIdx.x) & 7) * 2) + 17)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 977)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 17)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7201)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 929)] * p1[(((((int)threadIdx.x) & 7) * 2) + 33)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 993)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 33)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7217)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 945)] * p1[(((((int)threadIdx.x) & 7) * 2) + 49)]) + ((__float2half_rn(0.000000e+00f) - p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 1009)]) * p2[(((((int)threadIdx.x) & 7) * 2) + 49)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7233)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 961)] * p1[(((((int)threadIdx.x) & 7) * 2) + 65)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 897)] * p2[(((((int)threadIdx.x) & 7) * 2) + 65)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7249)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 977)] * p1[(((((int)threadIdx.x) & 7) * 2) + 81)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 913)] * p2[(((((int)threadIdx.x) & 7) * 2) + 81)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7265)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 993)] * p1[(((((int)threadIdx.x) & 7) * 2) + 97)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 929)] * p2[(((((int)threadIdx.x) & 7) * 2) + 97)]));\n  T_transpose_15[((((((int)threadIdx.x) >> 3) * 128) + ((((int)threadIdx.x) & 7) * 2)) + 7281)] = ((p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 1009)] * p1[(((((int)threadIdx.x) & 7) * 2) + 113)]) + (p0[(((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) & 7) * 2)) + 945)] * p2[(((((int)threadIdx.x) & 7) * 2) + 113)]));\n  __syncthreads();\n}\n\n__device__ void Group5_1_nn_batch_matmul_9(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_batch_matmul_NT, char* shared) {\n  half* p1_shared = (half*)p1;\n  half T_batch_matmul_NT_local[1];\n  half* p0_shared = (half*)(shared+0);\n  p1_shared[((int)threadIdx.x)] = p1[((int)threadIdx.x)];\n  p1_shared[(((int)threadIdx.x) + 64)] = p1[(((int)threadIdx.x) + 64)];\n  p1_shared[(((int)threadIdx.x) + 128)] = p1[(((int)threadIdx.x) + 128)];\n  p1_shared[(((int)threadIdx.x) + 192)] = p1[(((int)threadIdx.x) + 192)];\n  p1_shared[(((int)threadIdx.x) + 256)] = p1[(((int)threadIdx.x) + 256)];\n  p1_shared[(((int)threadIdx.x) + 320)] = p1[(((int)threadIdx.x) + 320)];\n  p1_shared[(((int)threadIdx.x) + 384)] = p1[(((int)threadIdx.x) + 384)];\n  p1_shared[(((int)threadIdx.x) + 448)] = p1[(((int)threadIdx.x) + 448)];\n  p1_shared[(((int)threadIdx.x) + 512)] = p1[(((int)threadIdx.x) + 512)];\n  p1_shared[(((int)threadIdx.x) + 576)] = p1[(((int)threadIdx.x) + 576)];\n  p1_shared[(((int)threadIdx.x) + 640)] = p1[(((int)threadIdx.x) + 640)];\n  p1_shared[(((int)threadIdx.x) + 704)] = p1[(((int)threadIdx.x) + 704)];\n  p1_shared[(((int)threadIdx.x) + 768)] = p1[(((int)threadIdx.x) + 768)];\n  p1_shared[(((int)threadIdx.x) + 832)] = p1[(((int)threadIdx.x) + 832)];\n  p1_shared[(((int)threadIdx.x) + 896)] = p1[(((int)threadIdx.x) + 896)];\n  p1_shared[(((int)threadIdx.x) + 960)] = p1[(((int)threadIdx.x) + 960)];\n  p1_shared[(((int)threadIdx.x) + 1024)] = p1[(((int)threadIdx.x) + 1024)];\n  p1_shared[(((int)threadIdx.x) + 1088)] = p1[(((int)threadIdx.x) + 1088)];\n  p1_shared[(((int)threadIdx.x) + 1152)] = p1[(((int)threadIdx.x) + 1152)];\n  p1_shared[(((int)threadIdx.x) + 1216)] = p1[(((int)threadIdx.x) + 1216)];\n  p1_shared[(((int)threadIdx.x) + 1280)] = p1[(((int)threadIdx.x) + 1280)];\n  p1_shared[(((int)threadIdx.x) + 1344)] = p1[(((int)threadIdx.x) + 1344)];\n  p1_shared[(((int)threadIdx.x) + 1408)] = p1[(((int)threadIdx.x) + 1408)];\n  p1_shared[(((int)threadIdx.x) + 1472)] = p1[(((int)threadIdx.x) + 1472)];\n  p1_shared[(((int)threadIdx.x) + 1536)] = p1[(((int)threadIdx.x) + 1536)];\n  p1_shared[(((int)threadIdx.x) + 1600)] = p1[(((int)threadIdx.x) + 1600)];\n  p1_shared[(((int)threadIdx.x) + 1664)] = p1[(((int)threadIdx.x) + 1664)];\n  p1_shared[(((int)threadIdx.x) + 1728)] = p1[(((int)threadIdx.x) + 1728)];\n  p1_shared[(((int)threadIdx.x) + 1792)] = p1[(((int)threadIdx.x) + 1792)];\n  p1_shared[(((int)threadIdx.x) + 1856)] = p1[(((int)threadIdx.x) + 1856)];\n  p1_shared[(((int)threadIdx.x) + 1920)] = p1[(((int)threadIdx.x) + 1920)];\n  p1_shared[(((int)threadIdx.x) + 1984)] = p1[(((int)threadIdx.x) + 1984)];\n  p1_shared[(((int)threadIdx.x) + 2048)] = p1[(((int)threadIdx.x) + 2048)];\n  p1_shared[(((int)threadIdx.x) + 2112)] = p1[(((int)threadIdx.x) + 2112)];\n  p1_shared[(((int)threadIdx.x) + 2176)] = p1[(((int)threadIdx.x) + 2176)];\n  p1_shared[(((int)threadIdx.x) + 2240)] = p1[(((int)threadIdx.x) + 2240)];\n  p1_shared[(((int)threadIdx.x) + 2304)] = p1[(((int)threadIdx.x) + 2304)];\n  p1_shared[(((int)threadIdx.x) + 2368)] = p1[(((int)threadIdx.x) + 2368)];\n  p1_shared[(((int)threadIdx.x) + 2432)] = p1[(((int)threadIdx.x) + 2432)];\n  p1_shared[(((int)threadIdx.x) + 2496)] = p1[(((int)threadIdx.x) + 2496)];\n  p1_shared[(((int)threadIdx.x) + 2560)] = p1[(((int)threadIdx.x) + 2560)];\n  p1_shared[(((int)threadIdx.x) + 2624)] = p1[(((int)threadIdx.x) + 2624)];\n  p1_shared[(((int)threadIdx.x) + 2688)] = p1[(((int)threadIdx.x) + 2688)];\n  p1_shared[(((int)threadIdx.x) + 2752)] = p1[(((int)threadIdx.x) + 2752)];\n  p1_shared[(((int)threadIdx.x) + 2816)] = p1[(((int)threadIdx.x) + 2816)];\n  p1_shared[(((int)threadIdx.x) + 2880)] = p1[(((int)threadIdx.x) + 2880)];\n  p1_shared[(((int)threadIdx.x) + 2944)] = p1[(((int)threadIdx.x) + 2944)];\n  p1_shared[(((int)threadIdx.x) + 3008)] = p1[(((int)threadIdx.x) + 3008)];\n  p1_shared[(((int)threadIdx.x) + 3072)] = p1[(((int)threadIdx.x) + 3072)];\n  p1_shared[(((int)threadIdx.x) + 3136)] = p1[(((int)threadIdx.x) + 3136)];\n  p1_shared[(((int)threadIdx.x) + 3200)] = p1[(((int)threadIdx.x) + 3200)];\n  p1_shared[(((int)threadIdx.x) + 3264)] = p1[(((int)threadIdx.x) + 3264)];\n  p1_shared[(((int)threadIdx.x) + 3328)] = p1[(((int)threadIdx.x) + 3328)];\n  p1_shared[(((int)threadIdx.x) + 3392)] = p1[(((int)threadIdx.x) + 3392)];\n  p1_shared[(((int)threadIdx.x) + 3456)] = p1[(((int)threadIdx.x) + 3456)];\n  p1_shared[(((int)threadIdx.x) + 3520)] = p1[(((int)threadIdx.x) + 3520)];\n  p1_shared[(((int)threadIdx.x) + 3584)] = p1[(((int)threadIdx.x) + 3584)];\n  p1_shared[(((int)threadIdx.x) + 3648)] = p1[(((int)threadIdx.x) + 3648)];\n  p1_shared[(((int)threadIdx.x) + 3712)] = p1[(((int)threadIdx.x) + 3712)];\n  p1_shared[(((int)threadIdx.x) + 3776)] = p1[(((int)threadIdx.x) + 3776)];\n  p1_shared[(((int)threadIdx.x) + 3840)] = p1[(((int)threadIdx.x) + 3840)];\n  p1_shared[(((int)threadIdx.x) + 3904)] = p1[(((int)threadIdx.x) + 3904)];\n  p1_shared[(((int)threadIdx.x) + 3968)] = p1[(((int)threadIdx.x) + 3968)];\n  p1_shared[(((int)threadIdx.x) + 4032)] = p1[(((int)threadIdx.x) + 4032)];\n  p1_shared[(((int)threadIdx.x) + 4096)] = p1[(((int)threadIdx.x) + 4096)];\n  p1_shared[(((int)threadIdx.x) + 4160)] = p1[(((int)threadIdx.x) + 4160)];\n  p1_shared[(((int)threadIdx.x) + 4224)] = p1[(((int)threadIdx.x) + 4224)];\n  p1_shared[(((int)threadIdx.x) + 4288)] = p1[(((int)threadIdx.x) + 4288)];\n  p1_shared[(((int)threadIdx.x) + 4352)] = p1[(((int)threadIdx.x) + 4352)];\n  p1_shared[(((int)threadIdx.x) + 4416)] = p1[(((int)threadIdx.x) + 4416)];\n  p1_shared[(((int)threadIdx.x) + 4480)] = p1[(((int)threadIdx.x) + 4480)];\n  p1_shared[(((int)threadIdx.x) + 4544)] = p1[(((int)threadIdx.x) + 4544)];\n  p1_shared[(((int)threadIdx.x) + 4608)] = p1[(((int)threadIdx.x) + 4608)];\n  p1_shared[(((int)threadIdx.x) + 4672)] = p1[(((int)threadIdx.x) + 4672)];\n  p1_shared[(((int)threadIdx.x) + 4736)] = p1[(((int)threadIdx.x) + 4736)];\n  p1_shared[(((int)threadIdx.x) + 4800)] = p1[(((int)threadIdx.x) + 4800)];\n  p1_shared[(((int)threadIdx.x) + 4864)] = p1[(((int)threadIdx.x) + 4864)];\n  p1_shared[(((int)threadIdx.x) + 4928)] = p1[(((int)threadIdx.x) + 4928)];\n  p1_shared[(((int)threadIdx.x) + 4992)] = p1[(((int)threadIdx.x) + 4992)];\n  p1_shared[(((int)threadIdx.x) + 5056)] = p1[(((int)threadIdx.x) + 5056)];\n  p1_shared[(((int)threadIdx.x) + 5120)] = p1[(((int)threadIdx.x) + 5120)];\n  p1_shared[(((int)threadIdx.x) + 5184)] = p1[(((int)threadIdx.x) + 5184)];\n  p1_shared[(((int)threadIdx.x) + 5248)] = p1[(((int)threadIdx.x) + 5248)];\n  p1_shared[(((int)threadIdx.x) + 5312)] = p1[(((int)threadIdx.x) + 5312)];\n  p1_shared[(((int)threadIdx.x) + 5376)] = p1[(((int)threadIdx.x) + 5376)];\n  p1_shared[(((int)threadIdx.x) + 5440)] = p1[(((int)threadIdx.x) + 5440)];\n  p1_shared[(((int)threadIdx.x) + 5504)] = p1[(((int)threadIdx.x) + 5504)];\n  p1_shared[(((int)threadIdx.x) + 5568)] = p1[(((int)threadIdx.x) + 5568)];\n  p1_shared[(((int)threadIdx.x) + 5632)] = p1[(((int)threadIdx.x) + 5632)];\n  p1_shared[(((int)threadIdx.x) + 5696)] = p1[(((int)threadIdx.x) + 5696)];\n  p1_shared[(((int)threadIdx.x) + 5760)] = p1[(((int)threadIdx.x) + 5760)];\n  p1_shared[(((int)threadIdx.x) + 5824)] = p1[(((int)threadIdx.x) + 5824)];\n  p1_shared[(((int)threadIdx.x) + 5888)] = p1[(((int)threadIdx.x) + 5888)];\n  p1_shared[(((int)threadIdx.x) + 5952)] = p1[(((int)threadIdx.x) + 5952)];\n  p1_shared[(((int)threadIdx.x) + 6016)] = p1[(((int)threadIdx.x) + 6016)];\n  p1_shared[(((int)threadIdx.x) + 6080)] = p1[(((int)threadIdx.x) + 6080)];\n  p1_shared[(((int)threadIdx.x) + 6144)] = p1[(((int)threadIdx.x) + 6144)];\n  p1_shared[(((int)threadIdx.x) + 6208)] = p1[(((int)threadIdx.x) + 6208)];\n  p1_shared[(((int)threadIdx.x) + 6272)] = p1[(((int)threadIdx.x) + 6272)];\n  p1_shared[(((int)threadIdx.x) + 6336)] = p1[(((int)threadIdx.x) + 6336)];\n  p1_shared[(((int)threadIdx.x) + 6400)] = p1[(((int)threadIdx.x) + 6400)];\n  p1_shared[(((int)threadIdx.x) + 6464)] = p1[(((int)threadIdx.x) + 6464)];\n  p1_shared[(((int)threadIdx.x) + 6528)] = p1[(((int)threadIdx.x) + 6528)];\n  p1_shared[(((int)threadIdx.x) + 6592)] = p1[(((int)threadIdx.x) + 6592)];\n  p1_shared[(((int)threadIdx.x) + 6656)] = p1[(((int)threadIdx.x) + 6656)];\n  p1_shared[(((int)threadIdx.x) + 6720)] = p1[(((int)threadIdx.x) + 6720)];\n  p1_shared[(((int)threadIdx.x) + 6784)] = p1[(((int)threadIdx.x) + 6784)];\n  p1_shared[(((int)threadIdx.x) + 6848)] = p1[(((int)threadIdx.x) + 6848)];\n  p1_shared[(((int)threadIdx.x) + 6912)] = p1[(((int)threadIdx.x) + 6912)];\n  p1_shared[(((int)threadIdx.x) + 6976)] = p1[(((int)threadIdx.x) + 6976)];\n  p1_shared[(((int)threadIdx.x) + 7040)] = p1[(((int)threadIdx.x) + 7040)];\n  p1_shared[(((int)threadIdx.x) + 7104)] = p1[(((int)threadIdx.x) + 7104)];\n  p1_shared[(((int)threadIdx.x) + 7168)] = p1[(((int)threadIdx.x) + 7168)];\n  p1_shared[(((int)threadIdx.x) + 7232)] = p1[(((int)threadIdx.x) + 7232)];\n  p1_shared[(((int)threadIdx.x) + 7296)] = p1[(((int)threadIdx.x) + 7296)];\n  p1_shared[(((int)threadIdx.x) + 7360)] = p1[(((int)threadIdx.x) + 7360)];\n  p1_shared[(((int)threadIdx.x) + 7424)] = p1[(((int)threadIdx.x) + 7424)];\n  p1_shared[(((int)threadIdx.x) + 7488)] = p1[(((int)threadIdx.x) + 7488)];\n  p1_shared[(((int)threadIdx.x) + 7552)] = p1[(((int)threadIdx.x) + 7552)];\n  p1_shared[(((int)threadIdx.x) + 7616)] = p1[(((int)threadIdx.x) + 7616)];\n  p1_shared[(((int)threadIdx.x) + 7680)] = p1[(((int)threadIdx.x) + 7680)];\n  p1_shared[(((int)threadIdx.x) + 7744)] = p1[(((int)threadIdx.x) + 7744)];\n  p1_shared[(((int)threadIdx.x) + 7808)] = p1[(((int)threadIdx.x) + 7808)];\n  p1_shared[(((int)threadIdx.x) + 7872)] = p1[(((int)threadIdx.x) + 7872)];\n  p1_shared[(((int)threadIdx.x) + 7936)] = p1[(((int)threadIdx.x) + 7936)];\n  p1_shared[(((int)threadIdx.x) + 8000)] = p1[(((int)threadIdx.x) + 8000)];\n  p1_shared[(((int)threadIdx.x) + 8064)] = p1[(((int)threadIdx.x) + 8064)];\n  p1_shared[(((int)threadIdx.x) + 8128)] = p1[(((int)threadIdx.x) + 8128)];\n  T_batch_matmul_NT_local[0] = __float2half_rn(0.000000e+00f);\n  for (int k_0 = 0; k_0 < 2; ++k_0) {\n    __syncthreads();\n    *(uint4*)(p0_shared + (((int)threadIdx.x) * 8)) = *(uint4*)(p0 + ((((((int)blockIdx.x) * 8192) + ((((int)threadIdx.x) >> 3) * 128)) + (k_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)));\n    *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 512)) = *(uint4*)(p0 + (((((((int)blockIdx.x) * 8192) + ((((int)threadIdx.x) >> 3) * 128)) + (k_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 1024));\n    *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 1024)) = *(uint4*)(p0 + (((((((int)blockIdx.x) * 8192) + ((((int)threadIdx.x) >> 3) * 128)) + (k_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 2048));\n    *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 1536)) = *(uint4*)(p0 + (((((((int)blockIdx.x) * 8192) + ((((int)threadIdx.x) >> 3) * 128)) + (k_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 3072));\n    *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 2048)) = *(uint4*)(p0 + (((((((int)blockIdx.x) * 8192) + ((((int)threadIdx.x) >> 3) * 128)) + (k_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 4096));\n    *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 2560)) = *(uint4*)(p0 + (((((((int)blockIdx.x) * 8192) + ((((int)threadIdx.x) >> 3) * 128)) + (k_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 5120));\n    *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 3072)) = *(uint4*)(p0 + (((((((int)blockIdx.x) * 8192) + ((((int)threadIdx.x) >> 3) * 128)) + (k_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 6144));\n    *(uint4*)(p0_shared + ((((int)threadIdx.x) * 8) + 3584)) = *(uint4*)(p0 + (((((((int)blockIdx.x) * 8192) + ((((int)threadIdx.x) >> 3) * 128)) + (k_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 7168));\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 64; ++k_1) {\n      T_batch_matmul_NT_local[0] = (T_batch_matmul_NT_local[0] + (p0_shared[((((int)threadIdx.x) * 64) + k_1)] * p1_shared[(((((int)threadIdx.x) * 128) + (k_0 * 64)) + k_1)]));\n    }\n  }\n  __syncthreads();\n  T_batch_matmul_NT[((int)threadIdx.x)] = T_batch_matmul_NT_local[0];\n  __syncthreads();\n}\n\n__device__ void Group5_2_reshape_divide_10(half* __restrict__ p0, half* __restrict__ T_divide, char* shared) {\n  half* p0_shared = (half*)p0;\n  half p0_shared_local[1];\n  p0_shared_local[0] = p0_shared[((int)threadIdx.x)];\n  __syncthreads();\n  T_divide[((int)threadIdx.x)] = (p0_shared_local[0] * __float2half_rn(8.839779e-02f));\n  __syncthreads();\n}\n\n__device__ void Group5_3_max_11(half* __restrict__ p0, half* __restrict__ p0_red, char* shared) {\n  half* p0_shared = (half*)p0;\n  half p0_red_local[1];\n  p0_shared[((int)threadIdx.x)] = p0[((int)threadIdx.x)];\n  p0_red_local[0] = __float2half_rn(-6.550400e+04f);\n  p0_red_local[0] = max(p0_red_local[0], p0_shared[((int)threadIdx.x)]);\n  __syncthreads();\n  p0_red[((int)threadIdx.x)] = p0_red_local[0];\n  __syncthreads();\n}\n\n__device__ void Group5_4_subtract_exp_12(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_exp, char* shared) {\n  half* p0_shared = (half*)p0;\n  half p0_shared_local[1];\n  half* p1_shared = (half*)p1;\n  half p1_shared_local[1];\n  p0_shared_local[0] = p0_shared[((int)threadIdx.x)];\n  p1_shared_local[0] = p1_shared[((int)threadIdx.x)];\n  __syncthreads();\n  T_exp[((int)threadIdx.x)] = hexp((p0_shared_local[0] - p1_shared_local[0]));\n  __syncthreads();\n}\n\n__device__ void Group5_5_sum_13(half* __restrict__ p0, half* __restrict__ p0_red, char* shared) {\n  half* p0_shared = (half*)p0;\n  half p0_red_local[1];\n  p0_shared[((int)threadIdx.x)] = p0[((int)threadIdx.x)];\n  p0_red_local[0] = __float2half_rn(0.000000e+00f);\n  p0_red_local[0] = (p0_red_local[0] + p0_shared[((int)threadIdx.x)]);\n  __syncthreads();\n  p0_red[((int)threadIdx.x)] = p0_red_local[0];\n  __syncthreads();\n}\n\n__device__ void Group5_6_divide_cast_cast_reshape_14(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_reshape, char* shared) {\n  half* p0_shared = (half*)p0;\n  half* p1_shared = (half*)p1;\n  T_reshape[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = ((half)((float)(p0_shared[((int)threadIdx.x)] / p1_shared[((int)threadIdx.x)])));\n}\n\n__global__ void __launch_bounds__(64) Group5(half* input0, half* input1, half* input2, half* input3, half* output0) {\n  __shared__ char shared[24576];\n  Group5_0_multiply_strided_slice_negative_strided_slice_concatenate_multiply_add_expand_dims_broadcast_to_reshape_transpose_reshape_transpose_8(input1, input2, input3, (half*)(shared+0), shared+0);\n  Group5_1_nn_batch_matmul_9(input0, (half*)(shared+0), (half*)(shared+0), shared+16384);\n  Group5_2_reshape_divide_10((half*)(shared+0), (half*)(shared+0), shared+128);\n  Group5_3_max_11((half*)(shared+0), (half*)(shared+128), shared+128);\n  Group5_4_subtract_exp_12((half*)(shared+0), (half*)(shared+128), (half*)(shared+0), shared+256);\n  Group5_5_sum_13((half*)(shared+0), (half*)(shared+128), shared+128);\n  Group5_6_divide_cast_cast_reshape_14((half*)(shared+0), (half*)(shared+128), output0, shared+256);\n}\n",
    "block_size": [
      64,
      1,
      1
    ],
    "grid_size": [
      32,
      1,
      1
    ],
    "latency": 0.009619200602173805,
    "name": "Group5",
    "gain": 0.009464830160140991
  },
  {
    "nodes": [
      15
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_15"
    ],
    "group_id": 6,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_15",
        15,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_15",
        15,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_perfect_quant_linear_cast_15",
        15,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group6(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int T_perfect_quant_linear_local[2];\n  __shared__ signed char p0_shared[16384];\n  __shared__ signed char B_decode_shared[4096];\n  for (int i2_1_1_init = 0; i2_1_1_init < 2; ++i2_1_1_init) {\n    T_perfect_quant_linear_local[i2_1_1_init] = 0;\n  }\n  for (int k_0 = 0; k_0 < 16; ++k_0) {\n    __syncthreads();\n    *(int4*)(p0_shared + (((int)threadIdx.x) * 16)) = *(int4*)(p0 + ((k_0 * 8192) + (((int)threadIdx.x) * 16)));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 2048)) = *(int4*)(p0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 2048));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 4096)) = *(int4*)(p0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 4096));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 6144)) = *(int4*)(p0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 6144));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 8192)) = *(int4*)(p0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 131072));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 10240)) = *(int4*)(p0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 133120));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 12288)) = *(int4*)(p0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 135168));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 14336)) = *(int4*)(p0 + (((k_0 * 8192) + (((int)threadIdx.x) * 16)) + 137216));\n    for (int ax0_ax1_ax2_fused_1 = 0; ax0_ax1_ax2_fused_1 < 16; ++ax0_ax1_ax2_fused_1) {\n      B_decode_shared[((((int)threadIdx.x) * 16) + ax0_ax1_ax2_fused_1)] = ((p1[(((((((((int)blockIdx.x) >> 1) * 16384) + (k_0 * 1024)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_fused_1 >> 3))] >> ((signed char)(ax0_ax1_ax2_fused_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_fused_1_1 = 0; ax0_ax1_ax2_fused_1_1 < 16; ++ax0_ax1_ax2_fused_1_1) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_fused_1_1) + 2048)] = ((p1[((((((((((int)blockIdx.x) >> 1) * 16384) + (k_0 * 1024)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_fused_1_1 >> 3)) + 512)] >> ((signed char)(ax0_ax1_ax2_fused_1_1 & 7))) & (signed char)1);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 16; ++k_1) {\n      for (int kk_1 = 0; kk_1 < 32; ++kk_1) {\n        for (int i2_1_1 = 0; i2_1_1 < 2; ++i2_1_1) {\n          T_perfect_quant_linear_local[i2_1_1] = (T_perfect_quant_linear_local[i2_1_1] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 8192) + (k_1 * 512)) + (((((int)threadIdx.x) & 63) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[(((k_1 * 256) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n        }\n      }\n    }\n  }\n  for (int ax0 = 0; ax0 < 2; ++ax0) {\n    T_cast[(((((((((int)threadIdx.x) >> 6) * 16384) + ((((int)blockIdx.x) >> 1) * 256)) + (((((int)threadIdx.x) & 63) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7))] = ((half)T_perfect_quant_linear_local[ax0]);\n  }\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      128,
      1,
      1
    ],
    "latency": 0.3450815975666046,
    "name": "Group6",
    "gain": 0
  },
  {
    "nodes": [
      16,
      17,
      18
    ],
    "node_names": [
      "reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16",
      "nn_batch_matmul_17",
      "reshape_transpose_reshape_reshape_cast_cast_reshape_18"
    ],
    "group_id": 7,
    "input_desc": [
      [
        "nn_batch_matmul_17",
        17,
        0
      ],
      [
        "reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16",
        16,
        0
      ]
    ],
    "output_desc": [
      [
        "reshape_transpose_reshape_reshape_cast_cast_reshape_18",
        18,
        0
      ]
    ],
    "code": "__device__ void Group7_0_reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16(half* __restrict__ p0, half* __restrict__ T_transpose_8, char* shared) {\n  __syncthreads();\n  T_transpose_8[((int)threadIdx.x)] = p0[(((((int)blockIdx.x) >> 1) * 128) + ((int)threadIdx.x))];\n  T_transpose_8[(((int)threadIdx.x) + 256)] = p0[(((((int)blockIdx.x) >> 1) * 128) + ((int)threadIdx.x))];\n  T_transpose_8[(((int)threadIdx.x) + 128)] = p0[(((((int)blockIdx.x) >> 1) * 128) + ((int)threadIdx.x))];\n  T_transpose_8[(((int)threadIdx.x) + 384)] = p0[(((((int)blockIdx.x) >> 1) * 128) + ((int)threadIdx.x))];\n  __syncthreads();\n}\n\n__device__ void Group7_1_nn_batch_matmul_17(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_batch_matmul_NT, char* shared) {\n  half* p1_shared = (half*)p1;\n  half T_batch_matmul_NT_local[4];\n  half* p0_shared = (half*)(shared+0);\n  p1_shared[((int)threadIdx.x)] = p1[((int)threadIdx.x)];\n  p1_shared[(((int)threadIdx.x) + 128)] = p1[(((int)threadIdx.x) + 128)];\n  p1_shared[(((int)threadIdx.x) + 256)] = p1[(((int)threadIdx.x) + 256)];\n  p1_shared[(((int)threadIdx.x) + 384)] = p1[(((int)threadIdx.x) + 384)];\n  for (int j_1_1_init = 0; j_1_1_init < 2; ++j_1_1_init) {\n    T_batch_matmul_NT_local[j_1_1_init] = __float2half_rn(0.000000e+00f);\n    T_batch_matmul_NT_local[(j_1_1_init + 2)] = __float2half_rn(0.000000e+00f);\n  }\n  if (((int)threadIdx.x) < 4) {\n    p0_shared[((int)threadIdx.x)] = p0[((((int)blockIdx.x) * 4) + ((int)threadIdx.x))];\n  }\n  __syncthreads();\n  for (int j_1_1 = 0; j_1_1 < 2; ++j_1_1) {\n    T_batch_matmul_NT_local[j_1_1] = (T_batch_matmul_NT_local[j_1_1] + (p0_shared[(((int)threadIdx.x) >> 5)] * p1_shared[((((((int)threadIdx.x) >> 5) * 128) + ((((int)threadIdx.x) & 31) * 2)) + j_1_1)]));\n    T_batch_matmul_NT_local[(j_1_1 + 2)] = (T_batch_matmul_NT_local[(j_1_1 + 2)] + (p0_shared[(((int)threadIdx.x) >> 5)] * p1_shared[(((((((int)threadIdx.x) >> 5) * 128) + ((((int)threadIdx.x) & 31) * 2)) + j_1_1) + 64)]));\n  }\n  __syncthreads();\n  for (int ax0 = 0; ax0 < 2; ++ax0) {\n    T_batch_matmul_NT[((((((int)threadIdx.x) >> 5) * 128) + ((((int)threadIdx.x) & 31) * 2)) + ax0)] = T_batch_matmul_NT_local[ax0];\n    T_batch_matmul_NT[(((((((int)threadIdx.x) >> 5) * 128) + ((((int)threadIdx.x) & 31) * 2)) + ax0) + 64)] = T_batch_matmul_NT_local[(ax0 + 2)];\n  }\n  __syncthreads();\n}\n\n__device__ void Group7_2_reshape_transpose_reshape_reshape_cast_cast_reshape_18(half* __restrict__ p0, int8_t* __restrict__ T_reshape_7, char* shared) {\n  half* p0_shared = (half*)p0;\n  T_reshape_7[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4))] = ((signed char)((float)p0_shared[(((int)threadIdx.x) * 4)]));\n  T_reshape_7[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 1)] = ((signed char)((float)p0_shared[((((int)threadIdx.x) * 4) + 1)]));\n  T_reshape_7[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 2)] = ((signed char)((float)p0_shared[((((int)threadIdx.x) * 4) + 2)]));\n  T_reshape_7[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 3)] = ((signed char)((float)p0_shared[((((int)threadIdx.x) * 4) + 3)]));\n}\n\n__global__ void __launch_bounds__(128) Group7(half* input0, half* input1, int8_t* output0) {\n  __shared__ char shared[1056];\n  Group7_0_reshape_reshape_transpose_expand_dims_broadcast_to_reshape_reshape_transpose_16(input1, (half*)(shared+0), shared+0);\n  Group7_1_nn_batch_matmul_17(input0, (half*)(shared+0), (half*)(shared+0), shared+1024);\n  Group7_2_reshape_transpose_reshape_reshape_cast_cast_reshape_18((half*)(shared+0), output0, shared+1024);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      512,
      1,
      1
    ],
    "latency": 0.0042133331298828125,
    "name": "Group7",
    "gain": 0.006344076246023178
  },
  {
    "nodes": [
      19,
      20
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_19",
      "reshape_add_20"
    ],
    "group_id": 8,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_19",
        19,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_19",
        19,
        1
      ],
      [
        "reshape_add_20",
        20,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_add_20",
        20,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group8(int8_t* __restrict__ input0, int8_t* __restrict__ input1, half* __restrict__ input2, half* __restrict__ output0) {\n  \n  int mediate1_local[16];\n  __shared__ signed char input0_shared[8192];\n  __shared__ signed char mediate0_shared[16384];\n  for (int i2_1_1_init = 0; i2_1_1_init < 2; ++i2_1_1_init) {\n    mediate1_local[i2_1_1_init] = 0;\n    mediate1_local[(i2_1_1_init + 8)] = 0;\n    mediate1_local[(i2_1_1_init + 2)] = 0;\n    mediate1_local[(i2_1_1_init + 10)] = 0;\n    mediate1_local[(i2_1_1_init + 4)] = 0;\n    mediate1_local[(i2_1_1_init + 12)] = 0;\n    mediate1_local[(i2_1_1_init + 6)] = 0;\n    mediate1_local[(i2_1_1_init + 14)] = 0;\n  }\n  for (int k_0 = 0; k_0 < 32; ++k_0) {\n    __syncthreads();\n    *(int4*)(input0_shared + (((int)threadIdx.x) * 16)) = *(int4*)(input0 + ((k_0 * 4096) + (((int)threadIdx.x) * 16)));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 2048)) = *(int4*)(input0 + (((k_0 * 4096) + (((int)threadIdx.x) * 16)) + 2048));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 4096)) = *(int4*)(input0 + (((k_0 * 4096) + (((int)threadIdx.x) * 16)) + 131072));\n    *(int4*)(input0_shared + ((((int)threadIdx.x) * 16) + 6144)) = *(int4*)(input0 + (((k_0 * 4096) + (((int)threadIdx.x) * 16)) + 133120));\n    for (int ax0_ax1_ax2_ax3_fused_1 = 0; ax0_ax1_ax2_ax3_fused_1 < 16; ++ax0_ax1_ax2_ax3_fused_1) {\n      mediate0_shared[((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1)] = ((input1[(((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1 >> 3))] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_1 = 0; ax0_ax1_ax2_ax3_fused_1_1 < 16; ++ax0_ax1_ax2_ax3_fused_1_1) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_1) + 2048)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_1 >> 3)) + 16384)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_2 = 0; ax0_ax1_ax2_ax3_fused_1_2 < 16; ++ax0_ax1_ax2_ax3_fused_1_2) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_2) + 4096)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_2 >> 3)) + 32768)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_2 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_3 = 0; ax0_ax1_ax2_ax3_fused_1_3 < 16; ++ax0_ax1_ax2_ax3_fused_1_3) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_3) + 6144)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_3 >> 3)) + 49152)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_3 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_4 = 0; ax0_ax1_ax2_ax3_fused_1_4 < 16; ++ax0_ax1_ax2_ax3_fused_1_4) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_4) + 8192)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_4 >> 3)) + 65536)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_4 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_5 = 0; ax0_ax1_ax2_ax3_fused_1_5 < 16; ++ax0_ax1_ax2_ax3_fused_1_5) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_5) + 10240)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_5 >> 3)) + 81920)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_5 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_6 = 0; ax0_ax1_ax2_ax3_fused_1_6 < 16; ++ax0_ax1_ax2_ax3_fused_1_6) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_6) + 12288)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_6 >> 3)) + 98304)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_6 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_7 = 0; ax0_ax1_ax2_ax3_fused_1_7 < 16; ++ax0_ax1_ax2_ax3_fused_1_7) {\n      mediate0_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_7) + 14336)] = ((input1[((((((((((int)blockIdx.x) >> 1) * 131072) + (k_0 * 512)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_7 >> 3)) + 114688)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_7 & 7))) & (signed char)1);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 8; ++k_1) {\n      for (int kk_1 = 0; kk_1 < 32; ++kk_1) {\n        for (int i2_1_1 = 0; i2_1_1 < 2; ++i2_1_1) {\n          mediate1_local[i2_1_1] = (mediate1_local[i2_1_1] + (((int)input0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)mediate0_shared[((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          mediate1_local[(i2_1_1 + 8)] = (mediate1_local[(i2_1_1 + 8)] + (((int)input0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)mediate0_shared[((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          mediate1_local[(i2_1_1 + 2)] = (mediate1_local[(i2_1_1 + 2)] + (((int)input0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          mediate1_local[(i2_1_1 + 10)] = (mediate1_local[(i2_1_1 + 10)] + (((int)input0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          mediate1_local[(i2_1_1 + 4)] = (mediate1_local[(i2_1_1 + 4)] + (((int)input0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          mediate1_local[(i2_1_1 + 12)] = (mediate1_local[(i2_1_1 + 12)] + (((int)input0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          mediate1_local[(i2_1_1 + 6)] = (mediate1_local[(i2_1_1 + 6)] + (((int)input0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n          mediate1_local[(i2_1_1 + 14)] = (mediate1_local[(i2_1_1 + 14)] + (((int)input0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)mediate0_shared[(((((((((int)threadIdx.x) & 63) >> 5) * 2048) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n        }\n      }\n    }\n  }\n  for (int ax0 = 0; ax0 < 2; ++ax0) {\n    output0[((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7))] = (input2[((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7))] + ((half)mediate1_local[ax0]));\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 128)] = (input2[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 128)] + ((half)mediate1_local[(ax0 + 8)]));\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 512)] = (input2[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 512)] + ((half)mediate1_local[(ax0 + 2)]));\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 640)] = (input2[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 640)] + ((half)mediate1_local[(ax0 + 10)]));\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1024)] = (input2[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1024)] + ((half)mediate1_local[(ax0 + 4)]));\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1152)] = (input2[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1152)] + ((half)mediate1_local[(ax0 + 12)]));\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1536)] = (input2[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1536)] + ((half)mediate1_local[(ax0 + 6)]));\n    output0[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1664)] = (input2[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 1) * 2048)) + (((((int)threadIdx.x) & 63) >> 5) * 256)) + (((((int)threadIdx.x) & 31) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1664)] + ((half)mediate1_local[(ax0 + 14)]));\n  }\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      128,
      1,
      1
    ],
    "latency": 0.8691712617874146,
    "name": "Group8",
    "gain": 0.10140150948427618
  },
  {
    "nodes": [
      21,
      22
    ],
    "node_names": [
      "cast_multiply_21",
      "mean_add_sqrt_divide_22"
    ],
    "group_id": 9,
    "input_desc": [
      [
        "cast_multiply_21",
        21,
        0
      ]
    ],
    "output_desc": [
      [
        "cast_multiply_21",
        21,
        0
      ],
      [
        "mean_add_sqrt_divide_22",
        22,
        0
      ]
    ],
    "code": "__device__ void Group0_0_cast_multiply_0(half* __restrict__ p0, float* __restrict__ output_proxy, float* __restrict__ output_proxy_1, char* shared) {\n  output_proxy[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))] = ((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]);\n  output_proxy[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)] = ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]);\n  __syncthreads();\n  output_proxy_1[((int)threadIdx.x)] = (((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]) * ((float)p0[((((int)blockIdx.x) * 8192) + ((int)threadIdx.x))]));\n  output_proxy_1[(((int)threadIdx.x) + 128)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 128)]));\n  output_proxy_1[(((int)threadIdx.x) + 256)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 256)]));\n  output_proxy_1[(((int)threadIdx.x) + 384)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 384)]));\n  output_proxy_1[(((int)threadIdx.x) + 512)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 512)]));\n  output_proxy_1[(((int)threadIdx.x) + 640)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 640)]));\n  output_proxy_1[(((int)threadIdx.x) + 768)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 768)]));\n  output_proxy_1[(((int)threadIdx.x) + 896)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 896)]));\n  output_proxy_1[(((int)threadIdx.x) + 1024)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1024)]));\n  output_proxy_1[(((int)threadIdx.x) + 1152)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1152)]));\n  output_proxy_1[(((int)threadIdx.x) + 1280)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1280)]));\n  output_proxy_1[(((int)threadIdx.x) + 1408)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1408)]));\n  output_proxy_1[(((int)threadIdx.x) + 1536)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1536)]));\n  output_proxy_1[(((int)threadIdx.x) + 1664)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1664)]));\n  output_proxy_1[(((int)threadIdx.x) + 1792)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1792)]));\n  output_proxy_1[(((int)threadIdx.x) + 1920)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 1920)]));\n  output_proxy_1[(((int)threadIdx.x) + 2048)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2048)]));\n  output_proxy_1[(((int)threadIdx.x) + 2176)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2176)]));\n  output_proxy_1[(((int)threadIdx.x) + 2304)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2304)]));\n  output_proxy_1[(((int)threadIdx.x) + 2432)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2432)]));\n  output_proxy_1[(((int)threadIdx.x) + 2560)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2560)]));\n  output_proxy_1[(((int)threadIdx.x) + 2688)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2688)]));\n  output_proxy_1[(((int)threadIdx.x) + 2816)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2816)]));\n  output_proxy_1[(((int)threadIdx.x) + 2944)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 2944)]));\n  output_proxy_1[(((int)threadIdx.x) + 3072)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3072)]));\n  output_proxy_1[(((int)threadIdx.x) + 3200)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3200)]));\n  output_proxy_1[(((int)threadIdx.x) + 3328)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3328)]));\n  output_proxy_1[(((int)threadIdx.x) + 3456)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3456)]));\n  output_proxy_1[(((int)threadIdx.x) + 3584)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3584)]));\n  output_proxy_1[(((int)threadIdx.x) + 3712)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3712)]));\n  output_proxy_1[(((int)threadIdx.x) + 3840)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3840)]));\n  output_proxy_1[(((int)threadIdx.x) + 3968)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 3968)]));\n  output_proxy_1[(((int)threadIdx.x) + 4096)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4096)]));\n  output_proxy_1[(((int)threadIdx.x) + 4224)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4224)]));\n  output_proxy_1[(((int)threadIdx.x) + 4352)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4352)]));\n  output_proxy_1[(((int)threadIdx.x) + 4480)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4480)]));\n  output_proxy_1[(((int)threadIdx.x) + 4608)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4608)]));\n  output_proxy_1[(((int)threadIdx.x) + 4736)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4736)]));\n  output_proxy_1[(((int)threadIdx.x) + 4864)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4864)]));\n  output_proxy_1[(((int)threadIdx.x) + 4992)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 4992)]));\n  output_proxy_1[(((int)threadIdx.x) + 5120)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5120)]));\n  output_proxy_1[(((int)threadIdx.x) + 5248)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5248)]));\n  output_proxy_1[(((int)threadIdx.x) + 5376)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5376)]));\n  output_proxy_1[(((int)threadIdx.x) + 5504)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5504)]));\n  output_proxy_1[(((int)threadIdx.x) + 5632)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5632)]));\n  output_proxy_1[(((int)threadIdx.x) + 5760)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5760)]));\n  output_proxy_1[(((int)threadIdx.x) + 5888)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 5888)]));\n  output_proxy_1[(((int)threadIdx.x) + 6016)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6016)]));\n  output_proxy_1[(((int)threadIdx.x) + 6144)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6144)]));\n  output_proxy_1[(((int)threadIdx.x) + 6272)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6272)]));\n  output_proxy_1[(((int)threadIdx.x) + 6400)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6400)]));\n  output_proxy_1[(((int)threadIdx.x) + 6528)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6528)]));\n  output_proxy_1[(((int)threadIdx.x) + 6656)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6656)]));\n  output_proxy_1[(((int)threadIdx.x) + 6784)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6784)]));\n  output_proxy_1[(((int)threadIdx.x) + 6912)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 6912)]));\n  output_proxy_1[(((int)threadIdx.x) + 7040)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7040)]));\n  output_proxy_1[(((int)threadIdx.x) + 7168)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7168)]));\n  output_proxy_1[(((int)threadIdx.x) + 7296)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7296)]));\n  output_proxy_1[(((int)threadIdx.x) + 7424)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7424)]));\n  output_proxy_1[(((int)threadIdx.x) + 7552)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7552)]));\n  output_proxy_1[(((int)threadIdx.x) + 7680)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7680)]));\n  output_proxy_1[(((int)threadIdx.x) + 7808)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7808)]));\n  output_proxy_1[(((int)threadIdx.x) + 7936)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 7936)]));\n  output_proxy_1[(((int)threadIdx.x) + 8064)] = (((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]) * ((float)p0[(((((int)blockIdx.x) * 8192) + ((int)threadIdx.x)) + 8064)]));\n  __syncthreads();\n}\n\n__device__ void Group0_1_mean_add_sqrt_divide_1(float* __restrict__ p0, float* __restrict__ T_divide_7, char* shared) {\n  float normal_reduce_temp0[1];\n  float* p0_shared = (float*)p0;\n  __shared__ float red_buf0[128];\n  normal_reduce_temp0[0] = 0.000000e+00f;\n  for (int k2_inner_outer = 0; k2_inner_outer < 64; ++k2_inner_outer) {\n    normal_reduce_temp0[0] = (normal_reduce_temp0[0] + p0_shared[((k2_inner_outer * 128) + ((int)threadIdx.x))]);\n  }\n  __syncthreads();\n  ((volatile float*)red_buf0)[((int)threadIdx.x)] = normal_reduce_temp0[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 64)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 32)]);\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    float w_16_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 16)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_16_0;\n    float w_8_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 8)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_8_0;\n    float w_4_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 4)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_4_0;\n    float w_2_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 2)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_2_0;\n    float w_1_0 = (((volatile float*)red_buf0)[((int)threadIdx.x)] + ((volatile float*)red_buf0)[(((int)threadIdx.x) + 1)]);\n    ((volatile float*)red_buf0)[((int)threadIdx.x)] = w_1_0;\n  }\n  __syncthreads();\n  T_divide_7[((int)blockIdx.x)] = (1.000000e+00f / sqrtf(((((volatile float*)red_buf0)[0] * 1.220703e-04f) + 1.000000e-05f)));\n}\n\n__global__ void __launch_bounds__(128) Group0(half* input0, float* output0, float* output1) {\n  __shared__ char shared[32768];\n  Group0_0_cast_multiply_0(input0, output0, (float*)(shared+0), shared+0);\n  Group0_1_mean_add_sqrt_divide_1((float*)(shared+0), output1, shared+32768);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      32,
      1,
      1
    ],
    "latency": 0.0053183999843895435,
    "name": "Group0",
    "gain": 0.00362605694681406
  },
  {
    "nodes": [
      23,
      24
    ],
    "node_names": [
      "multiply_cast_multiply_23",
      "reshape_cast_cast_reshape_24"
    ],
    "group_id": 10,
    "input_desc": [
      [
        "multiply_cast_multiply_23",
        23,
        0
      ],
      [
        "multiply_cast_multiply_23",
        23,
        1
      ],
      [
        "multiply_cast_multiply_23",
        23,
        2
      ]
    ],
    "output_desc": [
      [
        "reshape_cast_cast_reshape_24",
        24,
        0
      ]
    ],
    "code": "__device__ void Group10_0_multiply_cast_multiply_23(float* __restrict__ p0, float* __restrict__ p1, half* __restrict__ p2, half* __restrict__ T_multiply_5, char* shared) {\n  __syncthreads();\n  T_multiply_5[(((int)threadIdx.x) * 2)] = (p2[(((((int)blockIdx.x) & 15) * 512) + (((int)threadIdx.x) * 2))] * ((half)(p0[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2))] * p1[(((int)blockIdx.x) >> 4)])));\n  T_multiply_5[((((int)threadIdx.x) * 2) + 256)] = (p2[((((((int)blockIdx.x) & 15) * 512) + (((int)threadIdx.x) * 2)) + 256)] * ((half)(p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 256)] * p1[(((int)blockIdx.x) >> 4)])));\n  T_multiply_5[((((int)threadIdx.x) * 2) + 1)] = (p2[((((((int)blockIdx.x) & 15) * 512) + (((int)threadIdx.x) * 2)) + 1)] * ((half)(p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 1)] * p1[(((int)blockIdx.x) >> 4)])));\n  T_multiply_5[((((int)threadIdx.x) * 2) + 257)] = (p2[((((((int)blockIdx.x) & 15) * 512) + (((int)threadIdx.x) * 2)) + 257)] * ((half)(p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 257)] * p1[(((int)blockIdx.x) >> 4)])));\n  __syncthreads();\n}\n\n__device__ void Group10_1_reshape_cast_cast_reshape_24(half* __restrict__ p0, int8_t* __restrict__ T_reshape_4, char* shared) {\n  half* p0_shared = (half*)p0;\n  T_reshape_4[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4))] = ((signed char)((float)p0_shared[(((int)threadIdx.x) * 4)]));\n  T_reshape_4[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 1)] = ((signed char)((float)p0_shared[((((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 1) & 8191) - ((((int)blockIdx.x) & 15) * 512))]));\n  T_reshape_4[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 2)] = ((signed char)((float)p0_shared[((((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 2) & 8191) - ((((int)blockIdx.x) & 15) * 512))]));\n  T_reshape_4[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 4)) + 3)] = ((signed char)((float)p0_shared[((((((((int)blockIdx.x) & 255) * 512) + (((int)threadIdx.x) * 4)) + 3) & 8191) - ((((int)blockIdx.x) & 15) * 512))]));\n}\n\n__global__ void __launch_bounds__(128) Group10(float* input0, float* input1, half* input2, int8_t* output0) {\n  __shared__ char shared[1024];\n  Group10_0_multiply_cast_multiply_23(input0, input1, input2, (half*)(shared+0), shared+0);\n  Group10_1_reshape_cast_cast_reshape_24((half*)(shared+0), output0, shared+1024);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      512,
      1,
      1
    ],
    "latency": 0.004297600127756596,
    "name": "Group10",
    "gain": 0.003002685494720936
  },
  {
    "nodes": [
      25,
      26
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_25",
      "reshape_26"
    ],
    "group_id": 11,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_25",
        25,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_25",
        25,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_26",
        26,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group11(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int T_perfect_quant_linear_local[32];\n  __shared__ signed char p0_shared[4096];\n  __shared__ signed char B_decode_shared[16384];\n  for (int i2_1_1_init = 0; i2_1_1_init < 2; ++i2_1_1_init) {\n    T_perfect_quant_linear_local[i2_1_1_init] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 8)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 16)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 24)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 2)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 10)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 18)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 26)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 4)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 12)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 20)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 28)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 6)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 14)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 22)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 30)] = 0;\n  }\n  for (int k_0 = 0; k_0 < 64; ++k_0) {\n    __syncthreads();\n    *(int4*)(p0_shared + (((int)threadIdx.x) * 16)) = *(int4*)(p0 + ((k_0 * 2048) + (((int)threadIdx.x) * 16)));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 2048)) = *(int4*)(p0 + (((k_0 * 2048) + (((int)threadIdx.x) * 16)) + 131072));\n    for (int ax0_ax1_ax2_ax3_fused_1 = 0; ax0_ax1_ax2_ax3_fused_1 < 16; ++ax0_ax1_ax2_ax3_fused_1) {\n      B_decode_shared[((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1)] = ((p1[((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1 >> 3))] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_1 = 0; ax0_ax1_ax2_ax3_fused_1_1 < 16; ++ax0_ax1_ax2_ax3_fused_1_1) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_1) + 2048)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_1 >> 3)) + 32768)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_2 = 0; ax0_ax1_ax2_ax3_fused_1_2 < 16; ++ax0_ax1_ax2_ax3_fused_1_2) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_2) + 4096)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_2 >> 3)) + 65536)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_2 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_3 = 0; ax0_ax1_ax2_ax3_fused_1_3 < 16; ++ax0_ax1_ax2_ax3_fused_1_3) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_3) + 6144)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_3 >> 3)) + 98304)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_3 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_4 = 0; ax0_ax1_ax2_ax3_fused_1_4 < 16; ++ax0_ax1_ax2_ax3_fused_1_4) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_4) + 8192)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_4 >> 3)) + 131072)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_4 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_5 = 0; ax0_ax1_ax2_ax3_fused_1_5 < 16; ++ax0_ax1_ax2_ax3_fused_1_5) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_5) + 10240)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_5 >> 3)) + 163840)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_5 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_6 = 0; ax0_ax1_ax2_ax3_fused_1_6 < 16; ++ax0_ax1_ax2_ax3_fused_1_6) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_6) + 12288)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_6 >> 3)) + 196608)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_6 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_7 = 0; ax0_ax1_ax2_ax3_fused_1_7 < 16; ++ax0_ax1_ax2_ax3_fused_1_7) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_7) + 14336)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_7 >> 3)) + 229376)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_7 & 7))) & (signed char)1);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 4; ++k_1) {\n      for (int kk_1 = 0; kk_1 < 32; ++kk_1) {\n        for (int i2_1_1 = 0; i2_1_1 < 2; ++i2_1_1) {\n          T_perfect_quant_linear_local[i2_1_1] = (T_perfect_quant_linear_local[i2_1_1] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 8)] = (T_perfect_quant_linear_local[(i2_1_1 + 8)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 128)]) * ((int)B_decode_shared[((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 16)] = (T_perfect_quant_linear_local[(i2_1_1 + 16)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 24)] = (T_perfect_quant_linear_local[(i2_1_1 + 24)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 384)]) * ((int)B_decode_shared[((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 2)] = (T_perfect_quant_linear_local[(i2_1_1 + 2)] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 10)] = (T_perfect_quant_linear_local[(i2_1_1 + 10)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 128)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 18)] = (T_perfect_quant_linear_local[(i2_1_1 + 18)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 26)] = (T_perfect_quant_linear_local[(i2_1_1 + 26)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 384)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 4)] = (T_perfect_quant_linear_local[(i2_1_1 + 4)] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 12)] = (T_perfect_quant_linear_local[(i2_1_1 + 12)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 128)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 20)] = (T_perfect_quant_linear_local[(i2_1_1 + 20)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 28)] = (T_perfect_quant_linear_local[(i2_1_1 + 28)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 384)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 6)] = (T_perfect_quant_linear_local[(i2_1_1 + 6)] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 14)] = (T_perfect_quant_linear_local[(i2_1_1 + 14)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 128)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 22)] = (T_perfect_quant_linear_local[(i2_1_1 + 22)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 30)] = (T_perfect_quant_linear_local[(i2_1_1 + 30)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 384)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n        }\n      }\n    }\n  }\n  for (int ax0 = 0; ax0 < 2; ++ax0) {\n    T_cast[((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7))] = ((half)T_perfect_quant_linear_local[ax0]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 64)] = ((half)T_perfect_quant_linear_local[(ax0 + 8)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 128)] = ((half)T_perfect_quant_linear_local[(ax0 + 16)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 192)] = ((half)T_perfect_quant_linear_local[(ax0 + 24)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1024)] = ((half)T_perfect_quant_linear_local[(ax0 + 2)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1088)] = ((half)T_perfect_quant_linear_local[(ax0 + 10)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1152)] = ((half)T_perfect_quant_linear_local[(ax0 + 18)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1216)] = ((half)T_perfect_quant_linear_local[(ax0 + 26)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 2048)] = ((half)T_perfect_quant_linear_local[(ax0 + 4)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 2112)] = ((half)T_perfect_quant_linear_local[(ax0 + 12)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 2176)] = ((half)T_perfect_quant_linear_local[(ax0 + 20)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 2240)] = ((half)T_perfect_quant_linear_local[(ax0 + 28)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 3072)] = ((half)T_perfect_quant_linear_local[(ax0 + 6)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 3136)] = ((half)T_perfect_quant_linear_local[(ax0 + 14)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 3200)] = ((half)T_perfect_quant_linear_local[(ax0 + 22)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 3264)] = ((half)T_perfect_quant_linear_local[(ax0 + 30)]);\n  }\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      224,
      1,
      1
    ],
    "latency": 2.292121410369873,
    "name": "Group11",
    "gain": 0.0
  },
  {
    "nodes": [
      27
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_27"
    ],
    "group_id": 12,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_27",
        27,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_27",
        27,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_perfect_quant_linear_cast_27",
        27,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group11(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int T_perfect_quant_linear_local[32];\n  __shared__ signed char p0_shared[4096];\n  __shared__ signed char B_decode_shared[16384];\n  for (int i2_1_1_init = 0; i2_1_1_init < 2; ++i2_1_1_init) {\n    T_perfect_quant_linear_local[i2_1_1_init] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 8)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 16)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 24)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 2)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 10)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 18)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 26)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 4)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 12)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 20)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 28)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 6)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 14)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 22)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 30)] = 0;\n  }\n  for (int k_0 = 0; k_0 < 64; ++k_0) {\n    __syncthreads();\n    *(int4*)(p0_shared + (((int)threadIdx.x) * 16)) = *(int4*)(p0 + ((k_0 * 2048) + (((int)threadIdx.x) * 16)));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 2048)) = *(int4*)(p0 + (((k_0 * 2048) + (((int)threadIdx.x) * 16)) + 131072));\n    for (int ax0_ax1_ax2_ax3_fused_1 = 0; ax0_ax1_ax2_ax3_fused_1 < 16; ++ax0_ax1_ax2_ax3_fused_1) {\n      B_decode_shared[((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1)] = ((p1[((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1 >> 3))] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_1 = 0; ax0_ax1_ax2_ax3_fused_1_1 < 16; ++ax0_ax1_ax2_ax3_fused_1_1) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_1) + 2048)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_1 >> 3)) + 32768)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_2 = 0; ax0_ax1_ax2_ax3_fused_1_2 < 16; ++ax0_ax1_ax2_ax3_fused_1_2) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_2) + 4096)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_2 >> 3)) + 65536)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_2 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_3 = 0; ax0_ax1_ax2_ax3_fused_1_3 < 16; ++ax0_ax1_ax2_ax3_fused_1_3) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_3) + 6144)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_3 >> 3)) + 98304)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_3 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_4 = 0; ax0_ax1_ax2_ax3_fused_1_4 < 16; ++ax0_ax1_ax2_ax3_fused_1_4) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_4) + 8192)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_4 >> 3)) + 131072)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_4 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_5 = 0; ax0_ax1_ax2_ax3_fused_1_5 < 16; ++ax0_ax1_ax2_ax3_fused_1_5) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_5) + 10240)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_5 >> 3)) + 163840)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_5 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_6 = 0; ax0_ax1_ax2_ax3_fused_1_6 < 16; ++ax0_ax1_ax2_ax3_fused_1_6) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_6) + 12288)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_6 >> 3)) + 196608)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_6 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_7 = 0; ax0_ax1_ax2_ax3_fused_1_7 < 16; ++ax0_ax1_ax2_ax3_fused_1_7) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_7) + 14336)] = ((p1[(((((((((((int)blockIdx.x) >> 1) * 262144) + ((((int)threadIdx.x) >> 6) * 16384)) + (k_0 * 256)) + (((((int)threadIdx.x) & 63) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + (ax0_ax1_ax2_ax3_fused_1_7 >> 3)) + 229376)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_7 & 7))) & (signed char)1);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 4; ++k_1) {\n      for (int kk_1 = 0; kk_1 < 32; ++kk_1) {\n        for (int i2_1_1 = 0; i2_1_1 < 2; ++i2_1_1) {\n          T_perfect_quant_linear_local[i2_1_1] = (T_perfect_quant_linear_local[i2_1_1] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 8)] = (T_perfect_quant_linear_local[(i2_1_1 + 8)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 128)]) * ((int)B_decode_shared[((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 16)] = (T_perfect_quant_linear_local[(i2_1_1 + 16)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 24)] = (T_perfect_quant_linear_local[(i2_1_1 + 24)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 384)]) * ((int)B_decode_shared[((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 2)] = (T_perfect_quant_linear_local[(i2_1_1 + 2)] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 10)] = (T_perfect_quant_linear_local[(i2_1_1 + 10)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 128)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 18)] = (T_perfect_quant_linear_local[(i2_1_1 + 18)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 26)] = (T_perfect_quant_linear_local[(i2_1_1 + 26)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 384)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 4096)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 4)] = (T_perfect_quant_linear_local[(i2_1_1 + 4)] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 12)] = (T_perfect_quant_linear_local[(i2_1_1 + 12)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 128)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 20)] = (T_perfect_quant_linear_local[(i2_1_1 + 20)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 28)] = (T_perfect_quant_linear_local[(i2_1_1 + 28)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 384)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 8192)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 6)] = (T_perfect_quant_linear_local[(i2_1_1 + 6)] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 14)] = (T_perfect_quant_linear_local[(i2_1_1 + 14)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 128)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 22)] = (T_perfect_quant_linear_local[(i2_1_1 + 22)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 30)] = (T_perfect_quant_linear_local[(i2_1_1 + 30)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 2048) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 64)) + (i2_1_1 * 32)) + kk_1) + 384)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 256)) + ((((int)threadIdx.x) & 7) * 32)) + kk_1) + 12288)])));\n        }\n      }\n    }\n  }\n  for (int ax0 = 0; ax0 < 2; ++ax0) {\n    T_cast[((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7))] = ((half)T_perfect_quant_linear_local[ax0]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 64)] = ((half)T_perfect_quant_linear_local[(ax0 + 8)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 128)] = ((half)T_perfect_quant_linear_local[(ax0 + 16)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 192)] = ((half)T_perfect_quant_linear_local[(ax0 + 24)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1024)] = ((half)T_perfect_quant_linear_local[(ax0 + 2)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1088)] = ((half)T_perfect_quant_linear_local[(ax0 + 10)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1152)] = ((half)T_perfect_quant_linear_local[(ax0 + 18)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 1216)] = ((half)T_perfect_quant_linear_local[(ax0 + 26)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 2048)] = ((half)T_perfect_quant_linear_local[(ax0 + 4)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 2112)] = ((half)T_perfect_quant_linear_local[(ax0 + 12)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 2176)] = ((half)T_perfect_quant_linear_local[(ax0 + 20)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 2240)] = ((half)T_perfect_quant_linear_local[(ax0 + 28)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 3072)] = ((half)T_perfect_quant_linear_local[(ax0 + 6)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 3136)] = ((half)T_perfect_quant_linear_local[(ax0 + 14)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 3200)] = ((half)T_perfect_quant_linear_local[(ax0 + 22)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 458752) + ((((int)blockIdx.x) >> 1) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 3) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 1) * 8)) + (((int)threadIdx.x) & 7)) + 3264)] = ((half)T_perfect_quant_linear_local[(ax0 + 30)]);\n  }\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      224,
      1,
      1
    ],
    "latency": 2.292121410369873,
    "name": "Group11",
    "gain": 0
  },
  {
    "nodes": [
      28
    ],
    "node_names": [
      "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28"
    ],
    "group_id": 13,
    "input_desc": [
      [
        "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28",
        28,
        0
      ],
      [
        "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28",
        28,
        1
      ]
    ],
    "output_desc": [
      [
        "sigmoid_multiply_reshape_multiply_reshape_cast_cast_reshape_28",
        28,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group13(half* __restrict__ p0, half* __restrict__ p1, int8_t* __restrict__ T_reshape_9) {\n  \n  T_reshape_9[((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x))] = ((signed char)((float)((p0[((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x))] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x))]))))) * p1[((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x))])));\n  T_reshape_9[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 512)] = ((signed char)((float)((p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 512)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 512)]))))) * p1[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 512)])));\n  T_reshape_9[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 1024)] = ((signed char)((float)((p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 1024)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 1024)]))))) * p1[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 1024)])));\n  T_reshape_9[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 1536)] = ((signed char)((float)((p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 1536)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 1536)]))))) * p1[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 1536)])));\n  T_reshape_9[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 2048)] = ((signed char)((float)((p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 2048)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 2048)]))))) * p1[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 2048)])));\n  T_reshape_9[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 2560)] = ((signed char)((float)((p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 2560)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 2560)]))))) * p1[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 2560)])));\n  T_reshape_9[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 3072)] = ((signed char)((float)((p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 3072)] * (__float2half_rn(1.000000e+00f) / (__float2half_rn(1.000000e+00f) + hexp((__float2half_rn(0.000000e+00f) - p0[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 3072)]))))) * p1[(((((((int)blockIdx.x) >> 2) * 3584) + ((((int)blockIdx.x) & 3) * 128)) + ((int)threadIdx.x)) + 3072)])));\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      1024,
      1,
      1
    ],
    "latency": 0.006997333373874426,
    "name": "Group13",
    "gain": 0
  },
  {
    "nodes": [
      29
    ],
    "node_names": [
      "ladder_perfect_quant_linear_cast_29"
    ],
    "group_id": 14,
    "input_desc": [
      [
        "ladder_perfect_quant_linear_cast_29",
        29,
        0
      ],
      [
        "ladder_perfect_quant_linear_cast_29",
        29,
        1
      ]
    ],
    "output_desc": [
      [
        "ladder_perfect_quant_linear_cast_29",
        29,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group14(int8_t* __restrict__ p0, int8_t* __restrict__ p1, half* __restrict__ T_cast) {\n  \n  int T_perfect_quant_linear_local[16];\n  __shared__ signed char p0_shared[8192];\n  __shared__ signed char B_decode_shared[16384];\n  for (int i2_1_1_init = 0; i2_1_1_init < 2; ++i2_1_1_init) {\n    T_perfect_quant_linear_local[i2_1_1_init] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 8)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 2)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 10)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 4)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 12)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 6)] = 0;\n    T_perfect_quant_linear_local[(i2_1_1_init + 14)] = 0;\n  }\n  for (int k_0 = 0; k_0 < 112; ++k_0) {\n    __syncthreads();\n    *(int4*)(p0_shared + (((int)threadIdx.x) * 16)) = *(int4*)(p0 + ((k_0 * 4096) + (((int)threadIdx.x) * 16)));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 2048)) = *(int4*)(p0 + (((k_0 * 4096) + (((int)threadIdx.x) * 16)) + 2048));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 4096)) = *(int4*)(p0 + (((k_0 * 4096) + (((int)threadIdx.x) * 16)) + 458752));\n    *(int4*)(p0_shared + ((((int)threadIdx.x) * 16) + 6144)) = *(int4*)(p0 + (((k_0 * 4096) + (((int)threadIdx.x) * 16)) + 460800));\n    for (int ax0_ax1_ax2_ax3_fused_1 = 0; ax0_ax1_ax2_ax3_fused_1 < 16; ++ax0_ax1_ax2_ax3_fused_1) {\n      B_decode_shared[((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1)] = ((p1[((((((((((int)blockIdx.x) >> 2) * 917504) + ((((int)threadIdx.x) >> 6) * 57344)) + (k_0 * 512)) + (((((int)threadIdx.x) & 63) >> 3) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + (ax0_ax1_ax2_ax3_fused_1 >> 3))] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_1 = 0; ax0_ax1_ax2_ax3_fused_1_1 < 16; ++ax0_ax1_ax2_ax3_fused_1_1) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_1) + 2048)] = ((p1[(((((((((((int)blockIdx.x) >> 2) * 917504) + ((((int)threadIdx.x) >> 6) * 57344)) + (k_0 * 512)) + (((((int)threadIdx.x) & 63) >> 3) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + (ax0_ax1_ax2_ax3_fused_1_1 >> 3)) + 114688)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_1 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_2 = 0; ax0_ax1_ax2_ax3_fused_1_2 < 16; ++ax0_ax1_ax2_ax3_fused_1_2) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_2) + 4096)] = ((p1[(((((((((((int)blockIdx.x) >> 2) * 917504) + ((((int)threadIdx.x) >> 6) * 57344)) + (k_0 * 512)) + (((((int)threadIdx.x) & 63) >> 3) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + (ax0_ax1_ax2_ax3_fused_1_2 >> 3)) + 229376)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_2 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_3 = 0; ax0_ax1_ax2_ax3_fused_1_3 < 16; ++ax0_ax1_ax2_ax3_fused_1_3) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_3) + 6144)] = ((p1[(((((((((((int)blockIdx.x) >> 2) * 917504) + ((((int)threadIdx.x) >> 6) * 57344)) + (k_0 * 512)) + (((((int)threadIdx.x) & 63) >> 3) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + (ax0_ax1_ax2_ax3_fused_1_3 >> 3)) + 344064)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_3 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_4 = 0; ax0_ax1_ax2_ax3_fused_1_4 < 16; ++ax0_ax1_ax2_ax3_fused_1_4) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_4) + 8192)] = ((p1[(((((((((((int)blockIdx.x) >> 2) * 917504) + ((((int)threadIdx.x) >> 6) * 57344)) + (k_0 * 512)) + (((((int)threadIdx.x) & 63) >> 3) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + (ax0_ax1_ax2_ax3_fused_1_4 >> 3)) + 458752)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_4 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_5 = 0; ax0_ax1_ax2_ax3_fused_1_5 < 16; ++ax0_ax1_ax2_ax3_fused_1_5) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_5) + 10240)] = ((p1[(((((((((((int)blockIdx.x) >> 2) * 917504) + ((((int)threadIdx.x) >> 6) * 57344)) + (k_0 * 512)) + (((((int)threadIdx.x) & 63) >> 3) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + (ax0_ax1_ax2_ax3_fused_1_5 >> 3)) + 573440)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_5 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_6 = 0; ax0_ax1_ax2_ax3_fused_1_6 < 16; ++ax0_ax1_ax2_ax3_fused_1_6) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_6) + 12288)] = ((p1[(((((((((((int)blockIdx.x) >> 2) * 917504) + ((((int)threadIdx.x) >> 6) * 57344)) + (k_0 * 512)) + (((((int)threadIdx.x) & 63) >> 3) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + (ax0_ax1_ax2_ax3_fused_1_6 >> 3)) + 688128)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_6 & 7))) & (signed char)1);\n    }\n    for (int ax0_ax1_ax2_ax3_fused_1_7 = 0; ax0_ax1_ax2_ax3_fused_1_7 < 16; ++ax0_ax1_ax2_ax3_fused_1_7) {\n      B_decode_shared[(((((int)threadIdx.x) * 16) + ax0_ax1_ax2_ax3_fused_1_7) + 14336)] = ((p1[(((((((((((int)blockIdx.x) >> 2) * 917504) + ((((int)threadIdx.x) >> 6) * 57344)) + (k_0 * 512)) + (((((int)threadIdx.x) & 63) >> 3) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + (ax0_ax1_ax2_ax3_fused_1_7 >> 3)) + 802816)] >> ((signed char)(ax0_ax1_ax2_ax3_fused_1_7 & 7))) & (signed char)1);\n    }\n    __syncthreads();\n    for (int k_1 = 0; k_1 < 8; ++k_1) {\n      for (int kk_1 = 0; kk_1 < 32; ++kk_1) {\n        for (int i2_1_1 = 0; i2_1_1 < 2; ++i2_1_1) {\n          T_perfect_quant_linear_local[i2_1_1] = (T_perfect_quant_linear_local[i2_1_1] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 2) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 128)) + ((((int)threadIdx.x) & 3) * 32)) + kk_1)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 8)] = (T_perfect_quant_linear_local[(i2_1_1 + 8)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 2) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 128)) + ((((int)threadIdx.x) & 3) * 32)) + kk_1)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 2)] = (T_perfect_quant_linear_local[(i2_1_1 + 2)] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 2) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 128)) + ((((int)threadIdx.x) & 3) * 32)) + kk_1) + 4096)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 10)] = (T_perfect_quant_linear_local[(i2_1_1 + 10)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 2) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 128)) + ((((int)threadIdx.x) & 3) * 32)) + kk_1) + 4096)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 4)] = (T_perfect_quant_linear_local[(i2_1_1 + 4)] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 2) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 128)) + ((((int)threadIdx.x) & 3) * 32)) + kk_1) + 8192)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 12)] = (T_perfect_quant_linear_local[(i2_1_1 + 12)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 2) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 128)) + ((((int)threadIdx.x) & 3) * 32)) + kk_1) + 8192)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 6)] = (T_perfect_quant_linear_local[(i2_1_1 + 6)] + (((int)p0_shared[((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 2) * 64)) + (i2_1_1 * 32)) + kk_1)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 128)) + ((((int)threadIdx.x) & 3) * 32)) + kk_1) + 12288)])));\n          T_perfect_quant_linear_local[(i2_1_1 + 14)] = (T_perfect_quant_linear_local[(i2_1_1 + 14)] + (((int)p0_shared[(((((((((int)threadIdx.x) >> 6) * 4096) + (k_1 * 512)) + (((((int)threadIdx.x) & 15) >> 2) * 64)) + (i2_1_1 * 32)) + kk_1) + 256)]) * ((int)B_decode_shared[(((((((((int)threadIdx.x) & 63) >> 4) * 1024) + (k_1 * 128)) + ((((int)threadIdx.x) & 3) * 32)) + kk_1) + 12288)])));\n        }\n      }\n    }\n  }\n  for (int ax0 = 0; ax0 < 2; ++ax0) {\n    T_cast[((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 2) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 2) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 3) * 4)) + (((int)threadIdx.x) & 3))] = ((half)T_perfect_quant_linear_local[ax0]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 2) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 2) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 3) * 4)) + (((int)threadIdx.x) & 3)) + 128)] = ((half)T_perfect_quant_linear_local[(ax0 + 8)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 2) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 2) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 3) * 4)) + (((int)threadIdx.x) & 3)) + 1024)] = ((half)T_perfect_quant_linear_local[(ax0 + 2)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 2) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 2) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 3) * 4)) + (((int)threadIdx.x) & 3)) + 1152)] = ((half)T_perfect_quant_linear_local[(ax0 + 10)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 2) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 2) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 3) * 4)) + (((int)threadIdx.x) & 3)) + 2048)] = ((half)T_perfect_quant_linear_local[(ax0 + 4)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 2) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 2) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 3) * 4)) + (((int)threadIdx.x) & 3)) + 2176)] = ((half)T_perfect_quant_linear_local[(ax0 + 12)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 2) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 2) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 3) * 4)) + (((int)threadIdx.x) & 3)) + 3072)] = ((half)T_perfect_quant_linear_local[(ax0 + 6)]);\n    T_cast[(((((((((((int)threadIdx.x) >> 6) * 131072) + ((((int)blockIdx.x) >> 2) * 4096)) + (((((int)threadIdx.x) & 63) >> 4) * 256)) + (((((int)threadIdx.x) & 15) >> 2) * 32)) + (ax0 * 16)) + ((((int)blockIdx.x) & 3) * 4)) + (((int)threadIdx.x) & 3)) + 3200)] = ((half)T_perfect_quant_linear_local[(ax0 + 14)]);\n  }\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      128,
      1,
      1
    ],
    "latency": 3.0386176109313965,
    "name": "Group14",
    "gain": 0
  },
  {
    "nodes": [
      30
    ],
    "node_names": [
      "reshape_add_30"
    ],
    "group_id": 15,
    "input_desc": [
      [
        "reshape_add_30",
        30,
        0
      ],
      [
        "reshape_add_30",
        30,
        1
      ]
    ],
    "output_desc": [
      [
        "reshape_add_30",
        30,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group15(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_add) {\n  \n  T_add[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2))] = (p1[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2))] + p0[((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2))]);\n  T_add[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 256)] = (p1[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 256)] + p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 256)]);\n  T_add[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 1)] = (p1[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 1)] + p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 1)]);\n  T_add[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 257)] = (p1[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 257)] + p0[(((((int)blockIdx.x) * 512) + (((int)threadIdx.x) * 2)) + 257)]);\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      512,
      1,
      1
    ],
    "latency": 0.0037120000924915075,
    "name": "Group15",
    "gain": 0
  }
]