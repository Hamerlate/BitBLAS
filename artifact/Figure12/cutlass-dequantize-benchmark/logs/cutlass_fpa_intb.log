# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 16384), dtype="float16"), params: R.Tuple(R.Tensor((16384, 8192), dtype="int8"), R.Tensor((16384,), dtype="float16"))) -> R.Tensor((1, 16384), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((16384, 8192), dtype="int8") = params[0]
            lv1: R.Tensor((16384,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 16384), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-4400. -3948. -4232. ... -3840. -4196. -3476.]]
cost:  0.156402587890625
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 14336), dtype="float16"), params: R.Tuple(R.Tensor((14336, 21504), dtype="int8"), R.Tensor((43008,), dtype="float16"))) -> R.Tensor((1, 43008), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((14336, 21504), dtype="int8") = params[0]
            lv1: R.Tensor((43008,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 43008), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-3292. -2820. -3336. ... -2894. -3450. -4400.]]
cost:  0.26683807373046875
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 14336), dtype="float16"), params: R.Tuple(R.Tensor((14336, 7168), dtype="int8"), R.Tensor((14336,), dtype="float16"))) -> R.Tensor((1, 14336), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((14336, 7168), dtype="int8") = params[0]
            lv1: R.Tensor((14336,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 14336), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-3684. -3100. -3882. ... -3586. -3226. -2328.]]
cost:  0.1371145248413086
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 14336), dtype="float16"), params: R.Tuple(R.Tensor((14336, 28672), dtype="int8"), R.Tensor((57344,), dtype="float16"))) -> R.Tensor((1, 57344), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((14336, 28672), dtype="int8") = params[0]
            lv1: R.Tensor((57344,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 57344), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-3544. -3206. -3192. ... -3524. -3912. -3700.]]
cost:  0.3410816192626953
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 57344), dtype="float16"), params: R.Tuple(R.Tensor((57344, 7168), dtype="int8"), R.Tensor((14336,), dtype="float16"))) -> R.Tensor((1, 14336), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((57344, 7168), dtype="int8") = params[0]
            lv1: R.Tensor((14336,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 14336), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-14656. -14232. -13360. ... -13824. -13264. -14616.]]
cost:  0.5147695541381836
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 9216), dtype="float16"), params: R.Tuple(R.Tensor((9216, 4608), dtype="int8"), R.Tensor((9216,), dtype="float16"))) -> R.Tensor((1, 9216), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((9216, 4608), dtype="int8") = params[0]
            lv1: R.Tensor((9216,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 9216), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-2658. -2856. -2312. ... -2052. -1869. -2482.]]
cost:  0.060939788818359375
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 9216), dtype="float16"), params: R.Tuple(R.Tensor((9216, 18432), dtype="int8"), R.Tensor((36864,), dtype="float16"))) -> R.Tensor((1, 36864), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((9216, 18432), dtype="int8") = params[0]
            lv1: R.Tensor((36864,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 36864), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-2017. -2108. -2037. ... -2338. -2054. -2000.]]
cost:  0.13637542724609375
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 36864), dtype="float16"), params: R.Tuple(R.Tensor((36864, 4608), dtype="int8"), R.Tensor((9216,), dtype="float16"))) -> R.Tensor((1, 9216), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((36864, 4608), dtype="int8") = params[0]
            lv1: R.Tensor((9216,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 9216), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-8808. -8624. -9096. ... -8968. -9648. -8656.]]
cost:  0.21283626556396484
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 8192), dtype="float16"), params: R.Tuple(R.Tensor((8192, 11008), dtype="int8"), R.Tensor((22016,), dtype="float16"))) -> R.Tensor((1, 22016), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((8192, 11008), dtype="int8") = params[0]
            lv1: R.Tensor((22016,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 22016), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-2108. -2316. -1469. ... -2222. -2038. -1863.]]
cost:  0.09119510650634766
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 22016), dtype="float16"), params: R.Tuple(R.Tensor((22016, 4096), dtype="int8"), R.Tensor((8192,), dtype="float16"))) -> R.Tensor((1, 8192), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((22016, 4096), dtype="int8") = params[0]
            lv1: R.Tensor((8192,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 8192), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-5252. -5680. -5056. ... -4800. -5132. -5480.]]
cost:  0.12383460998535156
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 8192), dtype="float16"), params: R.Tuple(R.Tensor((8192, 4096), dtype="int8"), R.Tensor((8192,), dtype="float16"))) -> R.Tensor((1, 8192), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((8192, 4096), dtype="int8") = params[0]
            lv1: R.Tensor((8192,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 8192), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-1958. -2562. -2406. ... -1977. -1959. -1655.]]
cost:  0.05412101745605469
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 8192), dtype="float16"), params: R.Tuple(R.Tensor((8192, 14336), dtype="int8"), R.Tensor((28672,), dtype="float16"))) -> R.Tensor((1, 28672), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((8192, 14336), dtype="int8") = params[0]
            lv1: R.Tensor((28672,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 28672), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-2272. -2106. -1813. ... -2254. -2164. -2110.]]
cost:  0.12025833129882812
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((1, 28672), dtype="float16"), params: R.Tuple(R.Tensor((28672, 4096), dtype="int8"), R.Tensor((8192,), dtype="float16"))) -> R.Tensor((1, 8192), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((28672, 4096), dtype="int8") = params[0]
            lv1: R.Tensor((8192,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((1, 8192), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-6792. -6252. -7100. ... -7348. -7456. -7480.]]
cost:  0.15954971313476562
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((16384, 16384), dtype="float16"), params: R.Tuple(R.Tensor((16384, 8192), dtype="int8"), R.Tensor((16384,), dtype="float16"))) -> R.Tensor((16384, 16384), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((16384, 8192), dtype="int8") = params[0]
            lv1: R.Tensor((16384,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((16384, 16384), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-3788. -4032. -4100. ... -3888. -3498. -4372.]
 [-4012. -3918. -4176. ... -4452. -3766. -4248.]
 [-4172. -4212. -4384. ... -4078. -4008. -4504.]
 ...
 [-4108. -4300. -4344. ... -4028. -3768. -4062.]
 [-4128. -4440. -4460. ... -3664. -3758. -4336.]
 [-3706. -4280. -3858. ... -4082. -3908. -4716.]]
cost:  46.761107444763184
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 14336), dtype="float16"), params: R.Tuple(R.Tensor((14336, 21504), dtype="int8"), R.Tensor((43008,), dtype="float16"))) -> R.Tensor((8192, 43008), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((14336, 21504), dtype="int8") = params[0]
            lv1: R.Tensor((43008,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 43008), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-3508. -3986. -3136. ... -3870. -3784. -3992.]
 [-3624. -3946. -3372. ... -3786. -3382. -4136.]
 [-3818. -3836. -3500. ... -3734. -3224. -4380.]
 ...
 [-3694. -3890. -3336. ... -3912. -3428. -3632.]
 [-3394. -3764. -3380. ... -3724. -3462. -4080.]
 [-3876. -3784. -3200. ... -3958. -3582. -3734.]]
cost:  57.74815082550049
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 14336), dtype="float16"), params: R.Tuple(R.Tensor((14336, 7168), dtype="int8"), R.Tensor((14336,), dtype="float16"))) -> R.Tensor((8192, 14336), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((14336, 7168), dtype="int8") = params[0]
            lv1: R.Tensor((14336,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 14336), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-3836. -3436. -3818. ... -3748. -3464. -3678.]
 [-3856. -3238. -3818. ... -3194. -3632. -3518.]
 [-3426. -3570. -3716. ... -3372. -3368. -3108.]
 ...
 [-3886. -3384. -3794. ... -3582. -3492. -3146.]
 [-3992. -3082. -3942. ... -3450. -3466. -3342.]
 [-3844. -3554. -3680. ... -3292. -3534. -3274.]]
cost:  22.325515747070312
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 14336), dtype="float16"), params: R.Tuple(R.Tensor((14336, 28672), dtype="int8"), R.Tensor((57344,), dtype="float16"))) -> R.Tensor((8192, 57344), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((14336, 28672), dtype="int8") = params[0]
            lv1: R.Tensor((57344,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 57344), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-2944. -3360. -3556. ... -3804. -3616. -3792.]
 [-3206. -3210. -3270. ... -3940. -3712. -3932.]
 [-2830. -3590. -3432. ... -3780. -3714. -3788.]
 ...
 [-2814. -3446. -3286. ... -3442. -3340. -3884.]
 [-3028. -3064. -3030. ... -3998. -3450. -3812.]
 [-3050. -2996. -3394. ... -3458. -3550. -3768.]]
cost:  83.12954902648926
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 57344), dtype="float16"), params: R.Tuple(R.Tensor((57344, 7168), dtype="int8"), R.Tensor((14336,), dtype="float16"))) -> R.Tensor((8192, 14336), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((57344, 7168), dtype="int8") = params[0]
            lv1: R.Tensor((14336,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 14336), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-14144. -13856. -13200. ... -13720. -13752. -13936.]
 [-13856. -14240. -13272. ... -13904. -13888. -13672.]
 [-13888. -14568. -13464. ... -13472. -13304. -14080.]
 ...
 [-13552. -14608. -13360. ... -14008. -13656. -14008.]
 [-13480. -14360. -13608. ... -13616. -14080. -13488.]
 [-13768. -14600. -13440. ... -13608. -13992. -13936.]]
cost:  90.45517444610596
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 9216), dtype="float16"), params: R.Tuple(R.Tensor((9216, 4608), dtype="int8"), R.Tensor((9216,), dtype="float16"))) -> R.Tensor((8192, 9216), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((9216, 4608), dtype="int8") = params[0]
            lv1: R.Tensor((9216,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 9216), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-2566. -2272. -2070. ... -1961. -1718. -2344.]
 [-2704. -2082. -2008. ... -1586. -1899. -2330.]
 [-2502. -1892. -2056. ... -1647. -1553. -2402.]
 ...
 [-2540. -2110. -1759. ... -1779. -1871. -2394.]
 [-2412. -2296. -2058. ... -1806. -1797. -2544.]
 [-2562. -2124. -2066. ... -2062. -1834. -2514.]]
cost:  9.560561180114746
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 9216), dtype="float16"), params: R.Tuple(R.Tensor((9216, 18432), dtype="int8"), R.Tensor((36864,), dtype="float16"))) -> R.Tensor((8192, 36864), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((9216, 18432), dtype="int8") = params[0]
            lv1: R.Tensor((36864,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 36864), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-1963. -2284. -2632. ... -2380. -2278. -2306.]
 [-1986. -2074. -2624. ... -2466. -2122. -2186.]
 [-2018. -2432. -2724. ... -2342. -2436. -2098.]
 ...
 [-1932. -2039. -2746. ... -2236. -2202. -2368.]
 [-1840. -2280. -2530. ... -2398. -2390. -2182.]
 [-2080. -2246. -2690. ... -2356. -2074. -2326.]]
cost:  31.665039062499996
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 36864), dtype="float16"), params: R.Tuple(R.Tensor((36864, 4608), dtype="int8"), R.Tensor((9216,), dtype="float16"))) -> R.Tensor((8192, 9216), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((36864, 4608), dtype="int8") = params[0]
            lv1: R.Tensor((9216,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 9216), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-8432. -8092. -8272. ... -8800. -9016. -9440.]
 [-8288. -8368. -8976. ... -9128. -9152. -9184.]
 [-8456. -8568. -8632. ... -9104. -9032. -9344.]
 ...
 [-8640. -8912. -8184. ... -9144. -9224. -9144.]
 [-8384. -8400. -8600. ... -9360. -8912. -9312.]
 [-9000. -8552. -8768. ... -9560. -9544. -9120.]]
cost:  36.26821041107178
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 8192), dtype="float16"), params: R.Tuple(R.Tensor((8192, 11008), dtype="int8"), R.Tensor((22016,), dtype="float16"))) -> R.Tensor((8192, 22016), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((8192, 11008), dtype="int8") = params[0]
            lv1: R.Tensor((22016,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 22016), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-1808. -2314. -2114. ... -1850. -2072. -2013.]
 [-1900. -2012. -2334. ... -1645. -2120. -2156.]
 [-1676. -2360. -2214. ... -1837. -2238. -2006.]
 ...
 [-1772. -2336. -2360. ... -1759. -1820. -2021.]
 [-1630. -2112. -2354. ... -1653. -2316. -2018.]
 [-1578. -2334. -2070. ... -1765. -2104. -1999.]]
cost:  14.998769760131836
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 22016), dtype="float16"), params: R.Tuple(R.Tensor((22016, 4096), dtype="int8"), R.Tensor((8192,), dtype="float16"))) -> R.Tensor((8192, 8192), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((22016, 4096), dtype="int8") = params[0]
            lv1: R.Tensor((8192,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 8192), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-5096. -5136. -5132. ... -5428. -5504. -5016.]
 [-4828. -5116. -5592. ... -5096. -5316. -4584.]
 [-4592. -5288. -5360. ... -5148. -5060. -5328.]
 ...
 [-5180. -5708. -5224. ... -5168. -5248. -5092.]
 [-4760. -5500. -5288. ... -5600. -5872. -4996.]
 [-5084. -4440. -5384. ... -5060. -5060. -5068.]]
cost:  14.635229110717773
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 8192), dtype="float16"), params: R.Tuple(R.Tensor((8192, 4096), dtype="int8"), R.Tensor((8192,), dtype="float16"))) -> R.Tensor((8192, 8192), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((8192, 4096), dtype="int8") = params[0]
            lv1: R.Tensor((8192,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 8192), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-2198. -1867. -2214. ... -2058. -1757. -2292.]
 [-1778. -2019. -2124. ... -1870. -1868. -1955.]
 [-2025. -2128. -2222. ... -2048. -1815. -2021.]
 ...
 [-2256. -1807. -2138. ... -1972. -1756. -1937.]
 [-1966. -2032. -2214. ... -2136. -1772. -2128.]
 [-2040. -1959. -2330. ... -2262. -1797. -2322.]]
cost:  4.951643943786621
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 8192), dtype="float16"), params: R.Tuple(R.Tensor((8192, 14336), dtype="int8"), R.Tensor((28672,), dtype="float16"))) -> R.Tensor((8192, 28672), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((8192, 14336), dtype="int8") = params[0]
            lv1: R.Tensor((28672,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 28672), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-1996. -2122. -1954. ... -1750. -1731. -2152.]
 [-1786. -2000. -2242. ... -1688. -1929. -2136.]
 [-1901. -2136. -2144. ... -1760. -1871. -1893.]
 ...
 [-1807. -2252. -2128. ... -1696. -1653. -1932.]
 [-1937. -2035. -2238. ... -1473. -1915. -1919.]
 [-1608. -2374. -1836. ... -1676. -2038. -1992.]]
cost:  25.465750694274902
# from tvm.script import ir as I
# from tvm.script import relax as R

@I.ir_module
class Module:
    I.module_attrs({"external_mods": [metadata["runtime.Module"][0]]})
    @R.function
    def main(x: R.Tensor((8192, 28672), dtype="float16"), params: R.Tuple(R.Tensor((28672, 4096), dtype="int8"), R.Tensor((8192,), dtype="float16"))) -> R.Tensor((8192, 8192), dtype="float16"):
        with R.dataflow():
            lv: R.Tensor((28672, 4096), dtype="int8") = params[0]
            lv1: R.Tensor((8192,), dtype="float16") = params[1]
            gv = R.call_dps_packed("fused_decode_relax_matmul_cutlass", (lv, lv1, x), out_sinfo=R.Tensor((8192, 8192), dtype="float16"))
            R.output(gv)
        return gv

# Metadata omitted. Use show_meta=True in script() method to show it.
[[-7260. -6396. -7276. ... -7768. -7580. -7088.]
 [-7248. -7128. -7180. ... -7780. -7752. -7152.]
 [-6512. -6632. -6852. ... -7656. -7332. -6964.]
 ...
 [-7116. -6916. -7152. ... -7872. -7688. -7060.]
 [-6888. -6684. -7280. ... -7796. -7476. -6808.]
 [-7040. -7092. -7124. ... -7740. -7356. -7012.]]
cost:  18.812847137451172
1_16384_16384: 0.156402587890625
1_43008_14336: 0.26683807373046875
1_14336_14336: 0.1371145248413086
1_57344_14336: 0.3410816192626953
1_14336_57344: 0.5147695541381836
1_9216_9216: 0.060939788818359375
1_36864_9216: 0.13637542724609375
1_9216_36864: 0.21283626556396484
1_22016_8192: 0.09119510650634766
1_8192_22016: 0.12383460998535156
1_8192_8192: 0.05412101745605469
1_28672_8192: 0.12025833129882812
1_8192_28672: 0.15954971313476562
16384_16384_16384: 46.761107444763184
8192_43008_14336: 57.74815082550049
8192_14336_14336: 22.325515747070312
8192_57344_14336: 83.12954902648926
8192_14336_57344: 90.45517444610596
8192_9216_9216: 9.560561180114746
8192_36864_9216: 31.665039062499996
8192_9216_36864: 36.26821041107178
8192_22016_8192: 14.998769760131836
8192_8192_22016: 14.635229110717773
8192_8192_8192: 4.951643943786621
8192_28672_8192: 25.465750694274902
8192_8192_28672: 18.812847137451172
